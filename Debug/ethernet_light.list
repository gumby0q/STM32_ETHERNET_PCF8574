
ethernet_light.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000c0  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000260c  080000c0  080000c0  000100c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000130  080026cc  080026cc  000126cc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .init_array   00000004  080027fc  080027fc  000127fc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  4 .fini_array   00000004  08002800  08002800  00012800  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .data         000000a4  20000000  08002804  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .bss          00000198  200000a4  080028a8  000200a4  2**2
                  ALLOC
  7 ._user_heap_stack 00000600  2000023c  080028a8  0002023c  2**0
                  ALLOC
  8 .ARM.attributes 00000028  00000000  00000000  000200a4  2**0
                  CONTENTS, READONLY
  9 .debug_info   00012daf  00000000  00000000  000200cc  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_abbrev 00002cb8  00000000  00000000  00032e7b  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00006ff1  00000000  00000000  00035b33  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_aranges 00000a18  00000000  00000000  0003cb28  2**3
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000d70  00000000  00000000  0003d540  2**3
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_line   000056cf  00000000  00000000  0003e2b0  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_str    00003aae  00000000  00000000  0004397f  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .comment      0000007c  00000000  00000000  0004742d  2**0
                  CONTENTS, READONLY
 17 .debug_frame  000020a8  00000000  00000000  000474ac  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	; (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	; (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	; (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	200000a4 	.word	0x200000a4
 80000e0:	00000000 	.word	0x00000000
 80000e4:	080026b4 	.word	0x080026b4

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	; (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	; (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	; (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			; (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	200000a8 	.word	0x200000a8
 8000104:	080026b4 	.word	0x080026b4

08000108 <strlen>:
 8000108:	2300      	movs	r3, #0
 800010a:	5cc2      	ldrb	r2, [r0, r3]
 800010c:	3301      	adds	r3, #1
 800010e:	2a00      	cmp	r2, #0
 8000110:	d1fb      	bne.n	800010a <strlen+0x2>
 8000112:	1e58      	subs	r0, r3, #1
 8000114:	4770      	bx	lr
	...

08000118 <__udivsi3>:
 8000118:	2200      	movs	r2, #0
 800011a:	0843      	lsrs	r3, r0, #1
 800011c:	428b      	cmp	r3, r1
 800011e:	d374      	bcc.n	800020a <__udivsi3+0xf2>
 8000120:	0903      	lsrs	r3, r0, #4
 8000122:	428b      	cmp	r3, r1
 8000124:	d35f      	bcc.n	80001e6 <__udivsi3+0xce>
 8000126:	0a03      	lsrs	r3, r0, #8
 8000128:	428b      	cmp	r3, r1
 800012a:	d344      	bcc.n	80001b6 <__udivsi3+0x9e>
 800012c:	0b03      	lsrs	r3, r0, #12
 800012e:	428b      	cmp	r3, r1
 8000130:	d328      	bcc.n	8000184 <__udivsi3+0x6c>
 8000132:	0c03      	lsrs	r3, r0, #16
 8000134:	428b      	cmp	r3, r1
 8000136:	d30d      	bcc.n	8000154 <__udivsi3+0x3c>
 8000138:	22ff      	movs	r2, #255	; 0xff
 800013a:	0209      	lsls	r1, r1, #8
 800013c:	ba12      	rev	r2, r2
 800013e:	0c03      	lsrs	r3, r0, #16
 8000140:	428b      	cmp	r3, r1
 8000142:	d302      	bcc.n	800014a <__udivsi3+0x32>
 8000144:	1212      	asrs	r2, r2, #8
 8000146:	0209      	lsls	r1, r1, #8
 8000148:	d065      	beq.n	8000216 <__udivsi3+0xfe>
 800014a:	0b03      	lsrs	r3, r0, #12
 800014c:	428b      	cmp	r3, r1
 800014e:	d319      	bcc.n	8000184 <__udivsi3+0x6c>
 8000150:	e000      	b.n	8000154 <__udivsi3+0x3c>
 8000152:	0a09      	lsrs	r1, r1, #8
 8000154:	0bc3      	lsrs	r3, r0, #15
 8000156:	428b      	cmp	r3, r1
 8000158:	d301      	bcc.n	800015e <__udivsi3+0x46>
 800015a:	03cb      	lsls	r3, r1, #15
 800015c:	1ac0      	subs	r0, r0, r3
 800015e:	4152      	adcs	r2, r2
 8000160:	0b83      	lsrs	r3, r0, #14
 8000162:	428b      	cmp	r3, r1
 8000164:	d301      	bcc.n	800016a <__udivsi3+0x52>
 8000166:	038b      	lsls	r3, r1, #14
 8000168:	1ac0      	subs	r0, r0, r3
 800016a:	4152      	adcs	r2, r2
 800016c:	0b43      	lsrs	r3, r0, #13
 800016e:	428b      	cmp	r3, r1
 8000170:	d301      	bcc.n	8000176 <__udivsi3+0x5e>
 8000172:	034b      	lsls	r3, r1, #13
 8000174:	1ac0      	subs	r0, r0, r3
 8000176:	4152      	adcs	r2, r2
 8000178:	0b03      	lsrs	r3, r0, #12
 800017a:	428b      	cmp	r3, r1
 800017c:	d301      	bcc.n	8000182 <__udivsi3+0x6a>
 800017e:	030b      	lsls	r3, r1, #12
 8000180:	1ac0      	subs	r0, r0, r3
 8000182:	4152      	adcs	r2, r2
 8000184:	0ac3      	lsrs	r3, r0, #11
 8000186:	428b      	cmp	r3, r1
 8000188:	d301      	bcc.n	800018e <__udivsi3+0x76>
 800018a:	02cb      	lsls	r3, r1, #11
 800018c:	1ac0      	subs	r0, r0, r3
 800018e:	4152      	adcs	r2, r2
 8000190:	0a83      	lsrs	r3, r0, #10
 8000192:	428b      	cmp	r3, r1
 8000194:	d301      	bcc.n	800019a <__udivsi3+0x82>
 8000196:	028b      	lsls	r3, r1, #10
 8000198:	1ac0      	subs	r0, r0, r3
 800019a:	4152      	adcs	r2, r2
 800019c:	0a43      	lsrs	r3, r0, #9
 800019e:	428b      	cmp	r3, r1
 80001a0:	d301      	bcc.n	80001a6 <__udivsi3+0x8e>
 80001a2:	024b      	lsls	r3, r1, #9
 80001a4:	1ac0      	subs	r0, r0, r3
 80001a6:	4152      	adcs	r2, r2
 80001a8:	0a03      	lsrs	r3, r0, #8
 80001aa:	428b      	cmp	r3, r1
 80001ac:	d301      	bcc.n	80001b2 <__udivsi3+0x9a>
 80001ae:	020b      	lsls	r3, r1, #8
 80001b0:	1ac0      	subs	r0, r0, r3
 80001b2:	4152      	adcs	r2, r2
 80001b4:	d2cd      	bcs.n	8000152 <__udivsi3+0x3a>
 80001b6:	09c3      	lsrs	r3, r0, #7
 80001b8:	428b      	cmp	r3, r1
 80001ba:	d301      	bcc.n	80001c0 <__udivsi3+0xa8>
 80001bc:	01cb      	lsls	r3, r1, #7
 80001be:	1ac0      	subs	r0, r0, r3
 80001c0:	4152      	adcs	r2, r2
 80001c2:	0983      	lsrs	r3, r0, #6
 80001c4:	428b      	cmp	r3, r1
 80001c6:	d301      	bcc.n	80001cc <__udivsi3+0xb4>
 80001c8:	018b      	lsls	r3, r1, #6
 80001ca:	1ac0      	subs	r0, r0, r3
 80001cc:	4152      	adcs	r2, r2
 80001ce:	0943      	lsrs	r3, r0, #5
 80001d0:	428b      	cmp	r3, r1
 80001d2:	d301      	bcc.n	80001d8 <__udivsi3+0xc0>
 80001d4:	014b      	lsls	r3, r1, #5
 80001d6:	1ac0      	subs	r0, r0, r3
 80001d8:	4152      	adcs	r2, r2
 80001da:	0903      	lsrs	r3, r0, #4
 80001dc:	428b      	cmp	r3, r1
 80001de:	d301      	bcc.n	80001e4 <__udivsi3+0xcc>
 80001e0:	010b      	lsls	r3, r1, #4
 80001e2:	1ac0      	subs	r0, r0, r3
 80001e4:	4152      	adcs	r2, r2
 80001e6:	08c3      	lsrs	r3, r0, #3
 80001e8:	428b      	cmp	r3, r1
 80001ea:	d301      	bcc.n	80001f0 <__udivsi3+0xd8>
 80001ec:	00cb      	lsls	r3, r1, #3
 80001ee:	1ac0      	subs	r0, r0, r3
 80001f0:	4152      	adcs	r2, r2
 80001f2:	0883      	lsrs	r3, r0, #2
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d301      	bcc.n	80001fc <__udivsi3+0xe4>
 80001f8:	008b      	lsls	r3, r1, #2
 80001fa:	1ac0      	subs	r0, r0, r3
 80001fc:	4152      	adcs	r2, r2
 80001fe:	0843      	lsrs	r3, r0, #1
 8000200:	428b      	cmp	r3, r1
 8000202:	d301      	bcc.n	8000208 <__udivsi3+0xf0>
 8000204:	004b      	lsls	r3, r1, #1
 8000206:	1ac0      	subs	r0, r0, r3
 8000208:	4152      	adcs	r2, r2
 800020a:	1a41      	subs	r1, r0, r1
 800020c:	d200      	bcs.n	8000210 <__udivsi3+0xf8>
 800020e:	4601      	mov	r1, r0
 8000210:	4152      	adcs	r2, r2
 8000212:	4610      	mov	r0, r2
 8000214:	4770      	bx	lr
 8000216:	e7ff      	b.n	8000218 <__udivsi3+0x100>
 8000218:	b501      	push	{r0, lr}
 800021a:	2000      	movs	r0, #0
 800021c:	f000 f806 	bl	800022c <__aeabi_idiv0>
 8000220:	bd02      	pop	{r1, pc}
 8000222:	46c0      	nop			; (mov r8, r8)

08000224 <__aeabi_uidivmod>:
 8000224:	2900      	cmp	r1, #0
 8000226:	d0f7      	beq.n	8000218 <__udivsi3+0x100>
 8000228:	e776      	b.n	8000118 <__udivsi3>
 800022a:	4770      	bx	lr

0800022c <__aeabi_idiv0>:
 800022c:	4770      	bx	lr
 800022e:	46c0      	nop			; (mov r8, r8)

08000230 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000230:	b510      	push	{r4, lr}
 8000232:	0004      	movs	r4, r0
  /*Configure the SysTick to have interrupt in 1ms time basis*/
  HAL_SYSTICK_Config(HAL_RCC_GetHCLKFreq()/1000U);
 8000234:	f000 fbea 	bl	8000a0c <HAL_RCC_GetHCLKFreq>
 8000238:	21fa      	movs	r1, #250	; 0xfa
 800023a:	0089      	lsls	r1, r1, #2
 800023c:	f7ff ff6c 	bl	8000118 <__udivsi3>
 8000240:	f000 f866 	bl	8000310 <HAL_SYSTICK_Config>

  /*Configure the SysTick IRQ priority */
  HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority ,0U);
 8000244:	2001      	movs	r0, #1
 8000246:	2200      	movs	r2, #0
 8000248:	0021      	movs	r1, r4
 800024a:	4240      	negs	r0, r0
 800024c:	f000 f830 	bl	80002b0 <HAL_NVIC_SetPriority>

   /* Return function status */
  return HAL_OK;
}
 8000250:	2000      	movs	r0, #0
 8000252:	bd10      	pop	{r4, pc}

08000254 <HAL_Init>:
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000254:	2310      	movs	r3, #16
 8000256:	4a06      	ldr	r2, [pc, #24]	; (8000270 <HAL_Init+0x1c>)
{
 8000258:	b510      	push	{r4, lr}
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800025a:	6811      	ldr	r1, [r2, #0]
  HAL_InitTick(TICK_INT_PRIORITY);
 800025c:	2000      	movs	r0, #0
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800025e:	430b      	orrs	r3, r1
 8000260:	6013      	str	r3, [r2, #0]
  HAL_InitTick(TICK_INT_PRIORITY);
 8000262:	f7ff ffe5 	bl	8000230 <HAL_InitTick>
  HAL_MspInit();
 8000266:	f001 fd29 	bl	8001cbc <HAL_MspInit>
}
 800026a:	2000      	movs	r0, #0
 800026c:	bd10      	pop	{r4, pc}
 800026e:	46c0      	nop			; (mov r8, r8)
 8000270:	40022000 	.word	0x40022000

08000274 <HAL_IncTick>:
  *       implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick++;
 8000274:	4a02      	ldr	r2, [pc, #8]	; (8000280 <HAL_IncTick+0xc>)
 8000276:	6813      	ldr	r3, [r2, #0]
 8000278:	3301      	adds	r3, #1
 800027a:	6013      	str	r3, [r2, #0]
}
 800027c:	4770      	bx	lr
 800027e:	46c0      	nop			; (mov r8, r8)
 8000280:	200000fc 	.word	0x200000fc

08000284 <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 8000284:	4b01      	ldr	r3, [pc, #4]	; (800028c <HAL_GetTick+0x8>)
 8000286:	6818      	ldr	r0, [r3, #0]
}
 8000288:	4770      	bx	lr
 800028a:	46c0      	nop			; (mov r8, r8)
 800028c:	200000fc 	.word	0x200000fc

08000290 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(__IO uint32_t Delay)
{
 8000290:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8000292:	9001      	str	r0, [sp, #4]
  uint32_t tickstart = HAL_GetTick();
 8000294:	f7ff fff6 	bl	8000284 <HAL_GetTick>
  uint32_t wait = Delay;
 8000298:	9c01      	ldr	r4, [sp, #4]
  uint32_t tickstart = HAL_GetTick();
 800029a:	0005      	movs	r5, r0
  
  /* Add a period to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
  {
     wait++;
 800029c:	1c63      	adds	r3, r4, #1
 800029e:	1e5a      	subs	r2, r3, #1
 80002a0:	4193      	sbcs	r3, r2
 80002a2:	18e4      	adds	r4, r4, r3
  }
  
  while((HAL_GetTick() - tickstart) < wait)
 80002a4:	f7ff ffee 	bl	8000284 <HAL_GetTick>
 80002a8:	1b40      	subs	r0, r0, r5
 80002aa:	42a0      	cmp	r0, r4
 80002ac:	d3fa      	bcc.n	80002a4 <HAL_Delay+0x14>
  {
  }
}
 80002ae:	bd37      	pop	{r0, r1, r2, r4, r5, pc}

080002b0 <HAL_NVIC_SetPriority>:
  *         with stm32f0xx devices, this parameter is a dummy value and it is ignored, because 
  *         no subpriority supported in Cortex M0 based products.   
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80002b0:	b570      	push	{r4, r5, r6, lr}
 80002b2:	0189      	lsls	r1, r1, #6
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
 */
__STATIC_INLINE void NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
  if ((int32_t)(IRQn) < 0)
 80002b4:	2800      	cmp	r0, #0
 80002b6:	da14      	bge.n	80002e2 <HAL_NVIC_SetPriority+0x32>
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80002b8:	230f      	movs	r3, #15
 80002ba:	b2c0      	uxtb	r0, r0
 80002bc:	4003      	ands	r3, r0
 80002be:	3b08      	subs	r3, #8
 80002c0:	4a11      	ldr	r2, [pc, #68]	; (8000308 <HAL_NVIC_SetPriority+0x58>)
 80002c2:	089b      	lsrs	r3, r3, #2
 80002c4:	009b      	lsls	r3, r3, #2
 80002c6:	189b      	adds	r3, r3, r2
 80002c8:	2203      	movs	r2, #3
 80002ca:	4010      	ands	r0, r2
 80002cc:	4090      	lsls	r0, r2
 80002ce:	32fc      	adds	r2, #252	; 0xfc
 80002d0:	0015      	movs	r5, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 80002d2:	4011      	ands	r1, r2
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80002d4:	4085      	lsls	r5, r0
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 80002d6:	4081      	lsls	r1, r0
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80002d8:	69dc      	ldr	r4, [r3, #28]
 80002da:	43ac      	bics	r4, r5
 80002dc:	4321      	orrs	r1, r4
 80002de:	61d9      	str	r1, [r3, #28]
  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn,PreemptPriority);
}
 80002e0:	bd70      	pop	{r4, r5, r6, pc}
  }
  else
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80002e2:	2503      	movs	r5, #3
 80002e4:	0883      	lsrs	r3, r0, #2
 80002e6:	4028      	ands	r0, r5
 80002e8:	40a8      	lsls	r0, r5
 80002ea:	35fc      	adds	r5, #252	; 0xfc
 80002ec:	002e      	movs	r6, r5
 80002ee:	4a07      	ldr	r2, [pc, #28]	; (800030c <HAL_NVIC_SetPriority+0x5c>)
 80002f0:	009b      	lsls	r3, r3, #2
 80002f2:	189b      	adds	r3, r3, r2
 80002f4:	22c0      	movs	r2, #192	; 0xc0
 80002f6:	4086      	lsls	r6, r0
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 80002f8:	4029      	ands	r1, r5
 80002fa:	4081      	lsls	r1, r0
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80002fc:	0092      	lsls	r2, r2, #2
 80002fe:	589c      	ldr	r4, [r3, r2]
 8000300:	43b4      	bics	r4, r6
 8000302:	4321      	orrs	r1, r4
 8000304:	5099      	str	r1, [r3, r2]
 8000306:	e7eb      	b.n	80002e0 <HAL_NVIC_SetPriority+0x30>
 8000308:	e000ed00 	.word	0xe000ed00
 800030c:	e000e100 	.word	0xe000e100

08000310 <HAL_SYSTICK_Config>:
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000310:	4a09      	ldr	r2, [pc, #36]	; (8000338 <HAL_SYSTICK_Config+0x28>)
 8000312:	1e43      	subs	r3, r0, #1
  {
    return (1UL);                                                   /* Reload value impossible */
 8000314:	2001      	movs	r0, #1
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000316:	4293      	cmp	r3, r2
 8000318:	d80d      	bhi.n	8000336 <HAL_SYSTICK_Config+0x26>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 800031a:	21c0      	movs	r1, #192	; 0xc0
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800031c:	4a07      	ldr	r2, [pc, #28]	; (800033c <HAL_SYSTICK_Config+0x2c>)
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 800031e:	4808      	ldr	r0, [pc, #32]	; (8000340 <HAL_SYSTICK_Config+0x30>)
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000320:	6053      	str	r3, [r2, #4]
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000322:	6a03      	ldr	r3, [r0, #32]
 8000324:	0609      	lsls	r1, r1, #24
 8000326:	021b      	lsls	r3, r3, #8
 8000328:	0a1b      	lsrs	r3, r3, #8
 800032a:	430b      	orrs	r3, r1
 800032c:	6203      	str	r3, [r0, #32]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800032e:	2000      	movs	r0, #0
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000330:	2307      	movs	r3, #7
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000332:	6090      	str	r0, [r2, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000334:	6013      	str	r3, [r2, #0]
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
   return SysTick_Config(TicksNumb);
}
 8000336:	4770      	bx	lr
 8000338:	00ffffff 	.word	0x00ffffff
 800033c:	e000e010 	.word	0xe000e010
 8000340:	e000ed00 	.word	0xe000ed00

08000344 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{ 
 8000344:	b5f0      	push	{r4, r5, r6, r7, lr}
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull)); 

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != RESET)
 8000346:	680b      	ldr	r3, [r1, #0]
{ 
 8000348:	b087      	sub	sp, #28
  while (((GPIO_Init->Pin) >> position) != RESET)
 800034a:	9302      	str	r3, [sp, #8]
  uint32_t position = 0x00U;
 800034c:	2300      	movs	r3, #0
{ 
 800034e:	9101      	str	r1, [sp, #4]
  while (((GPIO_Init->Pin) >> position) != RESET)
 8000350:	9a02      	ldr	r2, [sp, #8]
 8000352:	40da      	lsrs	r2, r3
 8000354:	d101      	bne.n	800035a <HAL_GPIO_Init+0x16>
      }
    }
    
    position++;
  } 
}
 8000356:	b007      	add	sp, #28
 8000358:	bdf0      	pop	{r4, r5, r6, r7, pc}
    iocurrent = (GPIO_Init->Pin) & (1U << position);
 800035a:	2201      	movs	r2, #1
 800035c:	409a      	lsls	r2, r3
 800035e:	9203      	str	r2, [sp, #12]
 8000360:	9903      	ldr	r1, [sp, #12]
 8000362:	9a02      	ldr	r2, [sp, #8]
 8000364:	400a      	ands	r2, r1
 8000366:	9200      	str	r2, [sp, #0]
    if(iocurrent)
 8000368:	d100      	bne.n	800036c <HAL_GPIO_Init+0x28>
 800036a:	e08c      	b.n	8000486 <HAL_GPIO_Init+0x142>
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD)) 
 800036c:	9a01      	ldr	r2, [sp, #4]
 800036e:	2110      	movs	r1, #16
 8000370:	6852      	ldr	r2, [r2, #4]
 8000372:	0016      	movs	r6, r2
 8000374:	438e      	bics	r6, r1
 8000376:	2e02      	cmp	r6, #2
 8000378:	d10e      	bne.n	8000398 <HAL_GPIO_Init+0x54>
        CLEAR_BIT(temp, 0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;      
 800037a:	2507      	movs	r5, #7
 800037c:	401d      	ands	r5, r3
 800037e:	00ad      	lsls	r5, r5, #2
 8000380:	3901      	subs	r1, #1
 8000382:	40a9      	lsls	r1, r5
        temp = GPIOx->AFR[position >> 3];
 8000384:	08dc      	lsrs	r4, r3, #3
 8000386:	00a4      	lsls	r4, r4, #2
 8000388:	1904      	adds	r4, r0, r4
 800038a:	6a27      	ldr	r7, [r4, #32]
        CLEAR_BIT(temp, 0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;      
 800038c:	438f      	bics	r7, r1
        SET_BIT(temp, (uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));       
 800038e:	9901      	ldr	r1, [sp, #4]
 8000390:	6909      	ldr	r1, [r1, #16]
 8000392:	40a9      	lsls	r1, r5
 8000394:	430f      	orrs	r7, r1
        GPIOx->AFR[position >> 3U] = temp;
 8000396:	6227      	str	r7, [r4, #32]
      CLEAR_BIT(temp, GPIO_MODER_MODER0 << (position * 2U));   
 8000398:	2403      	movs	r4, #3
 800039a:	005f      	lsls	r7, r3, #1
 800039c:	40bc      	lsls	r4, r7
 800039e:	43e4      	mvns	r4, r4
      temp = GPIOx->MODER;
 80003a0:	6805      	ldr	r5, [r0, #0]
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80003a2:	3e01      	subs	r6, #1
      CLEAR_BIT(temp, GPIO_MODER_MODER0 << (position * 2U));   
 80003a4:	4025      	ands	r5, r4
 80003a6:	46ac      	mov	ip, r5
      SET_BIT(temp, (GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80003a8:	2503      	movs	r5, #3
 80003aa:	4015      	ands	r5, r2
 80003ac:	40bd      	lsls	r5, r7
 80003ae:	4661      	mov	r1, ip
 80003b0:	430d      	orrs	r5, r1
      GPIOx->MODER = temp;
 80003b2:	6005      	str	r5, [r0, #0]
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80003b4:	2e01      	cmp	r6, #1
 80003b6:	d80f      	bhi.n	80003d8 <HAL_GPIO_Init+0x94>
        SET_BIT(temp, GPIO_Init->Speed << (position * 2U));
 80003b8:	9901      	ldr	r1, [sp, #4]
        temp = GPIOx->OSPEEDR; 
 80003ba:	6886      	ldr	r6, [r0, #8]
        SET_BIT(temp, GPIO_Init->Speed << (position * 2U));
 80003bc:	68cd      	ldr	r5, [r1, #12]
        CLEAR_BIT(temp, GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80003be:	4026      	ands	r6, r4
        SET_BIT(temp, GPIO_Init->Speed << (position * 2U));
 80003c0:	40bd      	lsls	r5, r7
 80003c2:	4335      	orrs	r5, r6
        GPIOx->OSPEEDR = temp;
 80003c4:	6085      	str	r5, [r0, #8]
        temp = GPIOx->OTYPER;
 80003c6:	6846      	ldr	r6, [r0, #4]
        CLEAR_BIT(temp, GPIO_OTYPER_OT_0 << position) ;
 80003c8:	9903      	ldr	r1, [sp, #12]
        SET_BIT(temp, ((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 80003ca:	0915      	lsrs	r5, r2, #4
        CLEAR_BIT(temp, GPIO_OTYPER_OT_0 << position) ;
 80003cc:	438e      	bics	r6, r1
        SET_BIT(temp, ((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 80003ce:	2101      	movs	r1, #1
 80003d0:	400d      	ands	r5, r1
 80003d2:	409d      	lsls	r5, r3
 80003d4:	4335      	orrs	r5, r6
        GPIOx->OTYPER = temp;
 80003d6:	6045      	str	r5, [r0, #4]
      temp = GPIOx->PUPDR;
 80003d8:	68c5      	ldr	r5, [r0, #12]
      SET_BIT(temp, (GPIO_Init->Pull) << (position * 2U));
 80003da:	9901      	ldr	r1, [sp, #4]
      CLEAR_BIT(temp, GPIO_PUPDR_PUPDR0 << (position * 2U));
 80003dc:	402c      	ands	r4, r5
      SET_BIT(temp, (GPIO_Init->Pull) << (position * 2U));
 80003de:	688d      	ldr	r5, [r1, #8]
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE) 
 80003e0:	2180      	movs	r1, #128	; 0x80
      SET_BIT(temp, (GPIO_Init->Pull) << (position * 2U));
 80003e2:	40bd      	lsls	r5, r7
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE) 
 80003e4:	0549      	lsls	r1, r1, #21
      SET_BIT(temp, (GPIO_Init->Pull) << (position * 2U));
 80003e6:	432c      	orrs	r4, r5
      GPIOx->PUPDR = temp;
 80003e8:	60c4      	str	r4, [r0, #12]
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE) 
 80003ea:	420a      	tst	r2, r1
 80003ec:	d04b      	beq.n	8000486 <HAL_GPIO_Init+0x142>
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80003ee:	2101      	movs	r1, #1
 80003f0:	4c26      	ldr	r4, [pc, #152]	; (800048c <HAL_GPIO_Init+0x148>)
        CLEAR_BIT(temp, (0x0FU) << (4U * (position & 0x03U)));
 80003f2:	2603      	movs	r6, #3
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80003f4:	69a5      	ldr	r5, [r4, #24]
        CLEAR_BIT(temp, (0x0FU) << (4U * (position & 0x03U)));
 80003f6:	401e      	ands	r6, r3
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80003f8:	430d      	orrs	r5, r1
 80003fa:	61a5      	str	r5, [r4, #24]
 80003fc:	69a4      	ldr	r4, [r4, #24]
        temp = SYSCFG->EXTICR[position >> 2];
 80003fe:	089d      	lsrs	r5, r3, #2
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000400:	400c      	ands	r4, r1
 8000402:	9405      	str	r4, [sp, #20]
 8000404:	9c05      	ldr	r4, [sp, #20]
        CLEAR_BIT(temp, (0x0FU) << (4U * (position & 0x03U)));
 8000406:	240f      	movs	r4, #15
 8000408:	4921      	ldr	r1, [pc, #132]	; (8000490 <HAL_GPIO_Init+0x14c>)
 800040a:	00ad      	lsls	r5, r5, #2
 800040c:	00b6      	lsls	r6, r6, #2
 800040e:	186d      	adds	r5, r5, r1
 8000410:	40b4      	lsls	r4, r6
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8000412:	2190      	movs	r1, #144	; 0x90
        temp = SYSCFG->EXTICR[position >> 2];
 8000414:	68af      	ldr	r7, [r5, #8]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8000416:	05c9      	lsls	r1, r1, #23
        CLEAR_BIT(temp, (0x0FU) << (4U * (position & 0x03U)));
 8000418:	43a7      	bics	r7, r4
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800041a:	2400      	movs	r4, #0
 800041c:	4288      	cmp	r0, r1
 800041e:	d00c      	beq.n	800043a <HAL_GPIO_Init+0xf6>
 8000420:	491c      	ldr	r1, [pc, #112]	; (8000494 <HAL_GPIO_Init+0x150>)
 8000422:	3401      	adds	r4, #1
 8000424:	4288      	cmp	r0, r1
 8000426:	d008      	beq.n	800043a <HAL_GPIO_Init+0xf6>
 8000428:	491b      	ldr	r1, [pc, #108]	; (8000498 <HAL_GPIO_Init+0x154>)
 800042a:	3401      	adds	r4, #1
 800042c:	4288      	cmp	r0, r1
 800042e:	d004      	beq.n	800043a <HAL_GPIO_Init+0xf6>
 8000430:	491a      	ldr	r1, [pc, #104]	; (800049c <HAL_GPIO_Init+0x158>)
 8000432:	3403      	adds	r4, #3
 8000434:	4288      	cmp	r0, r1
 8000436:	d100      	bne.n	800043a <HAL_GPIO_Init+0xf6>
 8000438:	3c02      	subs	r4, #2
 800043a:	40b4      	lsls	r4, r6
        CLEAR_BIT(temp, (uint32_t)iocurrent);
 800043c:	9900      	ldr	r1, [sp, #0]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800043e:	433c      	orrs	r4, r7
          SET_BIT(temp, iocurrent); 
 8000440:	000e      	movs	r6, r1
        SYSCFG->EXTICR[position >> 2] = temp;
 8000442:	60ac      	str	r4, [r5, #8]
        temp = EXTI->IMR;
 8000444:	4c16      	ldr	r4, [pc, #88]	; (80004a0 <HAL_GPIO_Init+0x15c>)
        CLEAR_BIT(temp, (uint32_t)iocurrent);
 8000446:	43cd      	mvns	r5, r1
        temp = EXTI->IMR;
 8000448:	6827      	ldr	r7, [r4, #0]
          SET_BIT(temp, iocurrent); 
 800044a:	433e      	orrs	r6, r7
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 800044c:	03d1      	lsls	r1, r2, #15
 800044e:	d401      	bmi.n	8000454 <HAL_GPIO_Init+0x110>
        CLEAR_BIT(temp, (uint32_t)iocurrent);
 8000450:	003e      	movs	r6, r7
 8000452:	402e      	ands	r6, r5
        EXTI->IMR = temp;
 8000454:	6026      	str	r6, [r4, #0]
        temp = EXTI->EMR;
 8000456:	6867      	ldr	r7, [r4, #4]
          SET_BIT(temp, iocurrent); 
 8000458:	9e00      	ldr	r6, [sp, #0]
 800045a:	433e      	orrs	r6, r7
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 800045c:	0391      	lsls	r1, r2, #14
 800045e:	d401      	bmi.n	8000464 <HAL_GPIO_Init+0x120>
        CLEAR_BIT(temp, (uint32_t)iocurrent);      
 8000460:	003e      	movs	r6, r7
 8000462:	402e      	ands	r6, r5
        EXTI->EMR = temp;
 8000464:	6066      	str	r6, [r4, #4]
        temp = EXTI->RTSR;
 8000466:	68a7      	ldr	r7, [r4, #8]
          SET_BIT(temp, iocurrent); 
 8000468:	9e00      	ldr	r6, [sp, #0]
 800046a:	433e      	orrs	r6, r7
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 800046c:	02d1      	lsls	r1, r2, #11
 800046e:	d401      	bmi.n	8000474 <HAL_GPIO_Init+0x130>
        CLEAR_BIT(temp, (uint32_t)iocurrent); 
 8000470:	003e      	movs	r6, r7
 8000472:	402e      	ands	r6, r5
        EXTI->RTSR = temp;
 8000474:	60a6      	str	r6, [r4, #8]
        temp = EXTI->FTSR;
 8000476:	68e6      	ldr	r6, [r4, #12]
          SET_BIT(temp, iocurrent); 
 8000478:	9f00      	ldr	r7, [sp, #0]
 800047a:	4337      	orrs	r7, r6
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 800047c:	0292      	lsls	r2, r2, #10
 800047e:	d401      	bmi.n	8000484 <HAL_GPIO_Init+0x140>
        CLEAR_BIT(temp, (uint32_t)iocurrent); 
 8000480:	402e      	ands	r6, r5
 8000482:	0037      	movs	r7, r6
        EXTI->FTSR = temp;
 8000484:	60e7      	str	r7, [r4, #12]
    position++;
 8000486:	3301      	adds	r3, #1
 8000488:	e762      	b.n	8000350 <HAL_GPIO_Init+0xc>
 800048a:	46c0      	nop			; (mov r8, r8)
 800048c:	40021000 	.word	0x40021000
 8000490:	40010000 	.word	0x40010000
 8000494:	48000400 	.word	0x48000400
 8000498:	48000800 	.word	0x48000800
 800049c:	48000c00 	.word	0x48000c00
 80004a0:	40010400 	.word	0x40010400

080004a4 <HAL_GPIO_WritePin>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80004a4:	2a00      	cmp	r2, #0
 80004a6:	d001      	beq.n	80004ac <HAL_GPIO_WritePin+0x8>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80004a8:	6181      	str	r1, [r0, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 80004aa:	4770      	bx	lr
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80004ac:	6281      	str	r1, [r0, #40]	; 0x28
}
 80004ae:	e7fc      	b.n	80004aa <HAL_GPIO_WritePin+0x6>

080004b0 <HAL_GPIO_TogglePin>:
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  GPIOx->ODR ^= GPIO_Pin;
 80004b0:	6943      	ldr	r3, [r0, #20]
 80004b2:	4059      	eors	r1, r3
 80004b4:	6141      	str	r1, [r0, #20]
}
 80004b6:	4770      	bx	lr

080004b8 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80004b8:	b5f0      	push	{r4, r5, r6, r7, lr}
  /* Check the parameters */
  assert_param(RCC_OscInitStruct != NULL);
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80004ba:	6803      	ldr	r3, [r0, #0]
{
 80004bc:	b085      	sub	sp, #20
 80004be:	0005      	movs	r5, r0
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80004c0:	07db      	lsls	r3, r3, #31
 80004c2:	d42f      	bmi.n	8000524 <HAL_RCC_OscConfig+0x6c>
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80004c4:	682b      	ldr	r3, [r5, #0]
 80004c6:	079b      	lsls	r3, r3, #30
 80004c8:	d500      	bpl.n	80004cc <HAL_RCC_OscConfig+0x14>
 80004ca:	e081      	b.n	80005d0 <HAL_RCC_OscConfig+0x118>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80004cc:	682b      	ldr	r3, [r5, #0]
 80004ce:	071b      	lsls	r3, r3, #28
 80004d0:	d500      	bpl.n	80004d4 <HAL_RCC_OscConfig+0x1c>
 80004d2:	e0bc      	b.n	800064e <HAL_RCC_OscConfig+0x196>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80004d4:	682b      	ldr	r3, [r5, #0]
 80004d6:	075b      	lsls	r3, r3, #29
 80004d8:	d500      	bpl.n	80004dc <HAL_RCC_OscConfig+0x24>
 80004da:	e0df      	b.n	800069c <HAL_RCC_OscConfig+0x1e4>
      __HAL_RCC_PWR_CLK_DISABLE();
    }
  }

  /*----------------------------- HSI14 Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI14) == RCC_OSCILLATORTYPE_HSI14)
 80004dc:	682b      	ldr	r3, [r5, #0]
 80004de:	06db      	lsls	r3, r3, #27
 80004e0:	d51a      	bpl.n	8000518 <HAL_RCC_OscConfig+0x60>
    /* Check the parameters */
    assert_param(IS_RCC_HSI14(RCC_OscInitStruct->HSI14State));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSI14CalibrationValue));

    /* Check the HSI14 State */
    if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ON)
 80004e2:	696a      	ldr	r2, [r5, #20]
 80004e4:	4cb5      	ldr	r4, [pc, #724]	; (80007bc <HAL_RCC_OscConfig+0x304>)
 80004e6:	2304      	movs	r3, #4
 80004e8:	2a01      	cmp	r2, #1
 80004ea:	d000      	beq.n	80004ee <HAL_RCC_OscConfig+0x36>
 80004ec:	e14b      	b.n	8000786 <HAL_RCC_OscConfig+0x2ce>
    {
      /* Disable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_DISABLE();
 80004ee:	6b61      	ldr	r1, [r4, #52]	; 0x34

      /* Get Start Tick */
      tickstart = HAL_GetTick();
      
      /* Wait till HSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 80004f0:	2602      	movs	r6, #2
      __HAL_RCC_HSI14ADC_DISABLE();
 80004f2:	430b      	orrs	r3, r1
 80004f4:	6363      	str	r3, [r4, #52]	; 0x34
      __HAL_RCC_HSI14_ENABLE();
 80004f6:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80004f8:	431a      	orrs	r2, r3
 80004fa:	6362      	str	r2, [r4, #52]	; 0x34
      tickstart = HAL_GetTick();
 80004fc:	f7ff fec2 	bl	8000284 <HAL_GetTick>
 8000500:	0007      	movs	r7, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 8000502:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8000504:	4233      	tst	r3, r6
 8000506:	d100      	bne.n	800050a <HAL_RCC_OscConfig+0x52>
 8000508:	e136      	b.n	8000778 <HAL_RCC_OscConfig+0x2c0>
    {
      /* Enable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_ENABLE();

      /* Adjusts the Internal High Speed oscillator 14Mhz (HSI14) calibration value. */
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 800050a:	21f8      	movs	r1, #248	; 0xf8
 800050c:	6b62      	ldr	r2, [r4, #52]	; 0x34
 800050e:	69ab      	ldr	r3, [r5, #24]
 8000510:	438a      	bics	r2, r1
 8000512:	00db      	lsls	r3, r3, #3
 8000514:	4313      	orrs	r3, r2
 8000516:	6363      	str	r3, [r4, #52]	; 0x34
#endif /* RCC_HSI48_SUPPORT */
       
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8000518:	6a29      	ldr	r1, [r5, #32]
 800051a:	2900      	cmp	r1, #0
 800051c:	d000      	beq.n	8000520 <HAL_RCC_OscConfig+0x68>
 800051e:	e159      	b.n	80007d4 <HAL_RCC_OscConfig+0x31c>
    {
      return HAL_ERROR;
    }
  }
  
  return HAL_OK;
 8000520:	2000      	movs	r0, #0
 8000522:	e013      	b.n	800054c <HAL_RCC_OscConfig+0x94>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 8000524:	210c      	movs	r1, #12
 8000526:	4ca5      	ldr	r4, [pc, #660]	; (80007bc <HAL_RCC_OscConfig+0x304>)
 8000528:	6862      	ldr	r2, [r4, #4]
 800052a:	400a      	ands	r2, r1
 800052c:	2a04      	cmp	r2, #4
 800052e:	d006      	beq.n	800053e <HAL_RCC_OscConfig+0x86>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8000530:	6863      	ldr	r3, [r4, #4]
 8000532:	400b      	ands	r3, r1
 8000534:	2b08      	cmp	r3, #8
 8000536:	d10b      	bne.n	8000550 <HAL_RCC_OscConfig+0x98>
 8000538:	6863      	ldr	r3, [r4, #4]
 800053a:	03db      	lsls	r3, r3, #15
 800053c:	d508      	bpl.n	8000550 <HAL_RCC_OscConfig+0x98>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800053e:	6823      	ldr	r3, [r4, #0]
 8000540:	039b      	lsls	r3, r3, #14
 8000542:	d5bf      	bpl.n	80004c4 <HAL_RCC_OscConfig+0xc>
 8000544:	686b      	ldr	r3, [r5, #4]
 8000546:	2b00      	cmp	r3, #0
 8000548:	d1bc      	bne.n	80004c4 <HAL_RCC_OscConfig+0xc>
        return HAL_ERROR;
 800054a:	2001      	movs	r0, #1
}
 800054c:	b005      	add	sp, #20
 800054e:	bdf0      	pop	{r4, r5, r6, r7, pc}
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000550:	686b      	ldr	r3, [r5, #4]
 8000552:	2b01      	cmp	r3, #1
 8000554:	d113      	bne.n	800057e <HAL_RCC_OscConfig+0xc6>
 8000556:	2380      	movs	r3, #128	; 0x80
 8000558:	6822      	ldr	r2, [r4, #0]
 800055a:	025b      	lsls	r3, r3, #9
 800055c:	4313      	orrs	r3, r2
 800055e:	6023      	str	r3, [r4, #0]
        tickstart = HAL_GetTick();
 8000560:	f7ff fe90 	bl	8000284 <HAL_GetTick>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000564:	2680      	movs	r6, #128	; 0x80
        tickstart = HAL_GetTick();
 8000566:	0007      	movs	r7, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000568:	02b6      	lsls	r6, r6, #10
 800056a:	6823      	ldr	r3, [r4, #0]
 800056c:	4233      	tst	r3, r6
 800056e:	d1a9      	bne.n	80004c4 <HAL_RCC_OscConfig+0xc>
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8000570:	f7ff fe88 	bl	8000284 <HAL_GetTick>
 8000574:	1bc0      	subs	r0, r0, r7
 8000576:	2864      	cmp	r0, #100	; 0x64
 8000578:	d9f7      	bls.n	800056a <HAL_RCC_OscConfig+0xb2>
            return HAL_TIMEOUT;
 800057a:	2003      	movs	r0, #3
 800057c:	e7e6      	b.n	800054c <HAL_RCC_OscConfig+0x94>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800057e:	2b00      	cmp	r3, #0
 8000580:	d116      	bne.n	80005b0 <HAL_RCC_OscConfig+0xf8>
 8000582:	6823      	ldr	r3, [r4, #0]
 8000584:	4a8e      	ldr	r2, [pc, #568]	; (80007c0 <HAL_RCC_OscConfig+0x308>)
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8000586:	2680      	movs	r6, #128	; 0x80
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000588:	4013      	ands	r3, r2
 800058a:	6023      	str	r3, [r4, #0]
 800058c:	6823      	ldr	r3, [r4, #0]
 800058e:	4a8d      	ldr	r2, [pc, #564]	; (80007c4 <HAL_RCC_OscConfig+0x30c>)
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8000590:	02b6      	lsls	r6, r6, #10
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000592:	4013      	ands	r3, r2
 8000594:	6023      	str	r3, [r4, #0]
        tickstart = HAL_GetTick();
 8000596:	f7ff fe75 	bl	8000284 <HAL_GetTick>
 800059a:	0007      	movs	r7, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800059c:	6823      	ldr	r3, [r4, #0]
 800059e:	4233      	tst	r3, r6
 80005a0:	d100      	bne.n	80005a4 <HAL_RCC_OscConfig+0xec>
 80005a2:	e78f      	b.n	80004c4 <HAL_RCC_OscConfig+0xc>
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80005a4:	f7ff fe6e 	bl	8000284 <HAL_GetTick>
 80005a8:	1bc0      	subs	r0, r0, r7
 80005aa:	2864      	cmp	r0, #100	; 0x64
 80005ac:	d9f6      	bls.n	800059c <HAL_RCC_OscConfig+0xe4>
 80005ae:	e7e4      	b.n	800057a <HAL_RCC_OscConfig+0xc2>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80005b0:	2b05      	cmp	r3, #5
 80005b2:	d105      	bne.n	80005c0 <HAL_RCC_OscConfig+0x108>
 80005b4:	2380      	movs	r3, #128	; 0x80
 80005b6:	6822      	ldr	r2, [r4, #0]
 80005b8:	02db      	lsls	r3, r3, #11
 80005ba:	4313      	orrs	r3, r2
 80005bc:	6023      	str	r3, [r4, #0]
 80005be:	e7ca      	b.n	8000556 <HAL_RCC_OscConfig+0x9e>
 80005c0:	6823      	ldr	r3, [r4, #0]
 80005c2:	4a7f      	ldr	r2, [pc, #508]	; (80007c0 <HAL_RCC_OscConfig+0x308>)
 80005c4:	4013      	ands	r3, r2
 80005c6:	6023      	str	r3, [r4, #0]
 80005c8:	6823      	ldr	r3, [r4, #0]
 80005ca:	4a7e      	ldr	r2, [pc, #504]	; (80007c4 <HAL_RCC_OscConfig+0x30c>)
 80005cc:	4013      	ands	r3, r2
 80005ce:	e7c6      	b.n	800055e <HAL_RCC_OscConfig+0xa6>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 80005d0:	220c      	movs	r2, #12
 80005d2:	4c7a      	ldr	r4, [pc, #488]	; (80007bc <HAL_RCC_OscConfig+0x304>)
 80005d4:	6863      	ldr	r3, [r4, #4]
 80005d6:	4213      	tst	r3, r2
 80005d8:	d006      	beq.n	80005e8 <HAL_RCC_OscConfig+0x130>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 80005da:	6863      	ldr	r3, [r4, #4]
 80005dc:	4013      	ands	r3, r2
 80005de:	2b08      	cmp	r3, #8
 80005e0:	d110      	bne.n	8000604 <HAL_RCC_OscConfig+0x14c>
 80005e2:	6863      	ldr	r3, [r4, #4]
 80005e4:	03db      	lsls	r3, r3, #15
 80005e6:	d40d      	bmi.n	8000604 <HAL_RCC_OscConfig+0x14c>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80005e8:	6823      	ldr	r3, [r4, #0]
 80005ea:	079b      	lsls	r3, r3, #30
 80005ec:	d502      	bpl.n	80005f4 <HAL_RCC_OscConfig+0x13c>
 80005ee:	68eb      	ldr	r3, [r5, #12]
 80005f0:	2b01      	cmp	r3, #1
 80005f2:	d1aa      	bne.n	800054a <HAL_RCC_OscConfig+0x92>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80005f4:	21f8      	movs	r1, #248	; 0xf8
 80005f6:	6822      	ldr	r2, [r4, #0]
 80005f8:	692b      	ldr	r3, [r5, #16]
 80005fa:	438a      	bics	r2, r1
 80005fc:	00db      	lsls	r3, r3, #3
 80005fe:	4313      	orrs	r3, r2
 8000600:	6023      	str	r3, [r4, #0]
 8000602:	e763      	b.n	80004cc <HAL_RCC_OscConfig+0x14>
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8000604:	68ea      	ldr	r2, [r5, #12]
 8000606:	2301      	movs	r3, #1
 8000608:	2a00      	cmp	r2, #0
 800060a:	d00f      	beq.n	800062c <HAL_RCC_OscConfig+0x174>
        __HAL_RCC_HSI_ENABLE();
 800060c:	6822      	ldr	r2, [r4, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800060e:	2602      	movs	r6, #2
        __HAL_RCC_HSI_ENABLE();
 8000610:	4313      	orrs	r3, r2
 8000612:	6023      	str	r3, [r4, #0]
        tickstart = HAL_GetTick();
 8000614:	f7ff fe36 	bl	8000284 <HAL_GetTick>
 8000618:	0007      	movs	r7, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800061a:	6823      	ldr	r3, [r4, #0]
 800061c:	4233      	tst	r3, r6
 800061e:	d1e9      	bne.n	80005f4 <HAL_RCC_OscConfig+0x13c>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8000620:	f7ff fe30 	bl	8000284 <HAL_GetTick>
 8000624:	1bc0      	subs	r0, r0, r7
 8000626:	2802      	cmp	r0, #2
 8000628:	d9f7      	bls.n	800061a <HAL_RCC_OscConfig+0x162>
 800062a:	e7a6      	b.n	800057a <HAL_RCC_OscConfig+0xc2>
        __HAL_RCC_HSI_DISABLE();
 800062c:	6822      	ldr	r2, [r4, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800062e:	2602      	movs	r6, #2
        __HAL_RCC_HSI_DISABLE();
 8000630:	439a      	bics	r2, r3
 8000632:	6022      	str	r2, [r4, #0]
        tickstart = HAL_GetTick();
 8000634:	f7ff fe26 	bl	8000284 <HAL_GetTick>
 8000638:	0007      	movs	r7, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800063a:	6823      	ldr	r3, [r4, #0]
 800063c:	4233      	tst	r3, r6
 800063e:	d100      	bne.n	8000642 <HAL_RCC_OscConfig+0x18a>
 8000640:	e744      	b.n	80004cc <HAL_RCC_OscConfig+0x14>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8000642:	f7ff fe1f 	bl	8000284 <HAL_GetTick>
 8000646:	1bc0      	subs	r0, r0, r7
 8000648:	2802      	cmp	r0, #2
 800064a:	d9f6      	bls.n	800063a <HAL_RCC_OscConfig+0x182>
 800064c:	e795      	b.n	800057a <HAL_RCC_OscConfig+0xc2>
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800064e:	69ea      	ldr	r2, [r5, #28]
 8000650:	2301      	movs	r3, #1
 8000652:	4c5a      	ldr	r4, [pc, #360]	; (80007bc <HAL_RCC_OscConfig+0x304>)
 8000654:	2a00      	cmp	r2, #0
 8000656:	d010      	beq.n	800067a <HAL_RCC_OscConfig+0x1c2>
      __HAL_RCC_LSI_ENABLE();
 8000658:	6a62      	ldr	r2, [r4, #36]	; 0x24
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800065a:	2602      	movs	r6, #2
      __HAL_RCC_LSI_ENABLE();
 800065c:	4313      	orrs	r3, r2
 800065e:	6263      	str	r3, [r4, #36]	; 0x24
      tickstart = HAL_GetTick();
 8000660:	f7ff fe10 	bl	8000284 <HAL_GetTick>
 8000664:	0007      	movs	r7, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8000666:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8000668:	4233      	tst	r3, r6
 800066a:	d000      	beq.n	800066e <HAL_RCC_OscConfig+0x1b6>
 800066c:	e732      	b.n	80004d4 <HAL_RCC_OscConfig+0x1c>
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800066e:	f7ff fe09 	bl	8000284 <HAL_GetTick>
 8000672:	1bc0      	subs	r0, r0, r7
 8000674:	2802      	cmp	r0, #2
 8000676:	d9f6      	bls.n	8000666 <HAL_RCC_OscConfig+0x1ae>
 8000678:	e77f      	b.n	800057a <HAL_RCC_OscConfig+0xc2>
      __HAL_RCC_LSI_DISABLE();
 800067a:	6a62      	ldr	r2, [r4, #36]	; 0x24
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800067c:	2602      	movs	r6, #2
      __HAL_RCC_LSI_DISABLE();
 800067e:	439a      	bics	r2, r3
 8000680:	6262      	str	r2, [r4, #36]	; 0x24
      tickstart = HAL_GetTick();
 8000682:	f7ff fdff 	bl	8000284 <HAL_GetTick>
 8000686:	0007      	movs	r7, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8000688:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800068a:	4233      	tst	r3, r6
 800068c:	d100      	bne.n	8000690 <HAL_RCC_OscConfig+0x1d8>
 800068e:	e721      	b.n	80004d4 <HAL_RCC_OscConfig+0x1c>
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8000690:	f7ff fdf8 	bl	8000284 <HAL_GetTick>
 8000694:	1bc0      	subs	r0, r0, r7
 8000696:	2802      	cmp	r0, #2
 8000698:	d9f6      	bls.n	8000688 <HAL_RCC_OscConfig+0x1d0>
 800069a:	e76e      	b.n	800057a <HAL_RCC_OscConfig+0xc2>
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800069c:	2280      	movs	r2, #128	; 0x80
    FlagStatus       pwrclkchanged = RESET;
 800069e:	2100      	movs	r1, #0
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80006a0:	4c46      	ldr	r4, [pc, #280]	; (80007bc <HAL_RCC_OscConfig+0x304>)
 80006a2:	0552      	lsls	r2, r2, #21
 80006a4:	69e3      	ldr	r3, [r4, #28]
    FlagStatus       pwrclkchanged = RESET;
 80006a6:	9100      	str	r1, [sp, #0]
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80006a8:	4213      	tst	r3, r2
 80006aa:	d108      	bne.n	80006be <HAL_RCC_OscConfig+0x206>
      __HAL_RCC_PWR_CLK_ENABLE();
 80006ac:	69e3      	ldr	r3, [r4, #28]
 80006ae:	4313      	orrs	r3, r2
 80006b0:	61e3      	str	r3, [r4, #28]
 80006b2:	69e3      	ldr	r3, [r4, #28]
 80006b4:	4013      	ands	r3, r2
 80006b6:	9303      	str	r3, [sp, #12]
 80006b8:	9b03      	ldr	r3, [sp, #12]
      pwrclkchanged = SET;
 80006ba:	2301      	movs	r3, #1
 80006bc:	9300      	str	r3, [sp, #0]
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80006be:	2780      	movs	r7, #128	; 0x80
 80006c0:	4e41      	ldr	r6, [pc, #260]	; (80007c8 <HAL_RCC_OscConfig+0x310>)
 80006c2:	007f      	lsls	r7, r7, #1
 80006c4:	6833      	ldr	r3, [r6, #0]
 80006c6:	423b      	tst	r3, r7
 80006c8:	d006      	beq.n	80006d8 <HAL_RCC_OscConfig+0x220>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80006ca:	68ab      	ldr	r3, [r5, #8]
 80006cc:	2b01      	cmp	r3, #1
 80006ce:	d113      	bne.n	80006f8 <HAL_RCC_OscConfig+0x240>
 80006d0:	6a22      	ldr	r2, [r4, #32]
 80006d2:	4313      	orrs	r3, r2
 80006d4:	6223      	str	r3, [r4, #32]
 80006d6:	e030      	b.n	800073a <HAL_RCC_OscConfig+0x282>
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80006d8:	6833      	ldr	r3, [r6, #0]
 80006da:	433b      	orrs	r3, r7
 80006dc:	6033      	str	r3, [r6, #0]
      tickstart = HAL_GetTick();
 80006de:	f7ff fdd1 	bl	8000284 <HAL_GetTick>
 80006e2:	9001      	str	r0, [sp, #4]
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80006e4:	6833      	ldr	r3, [r6, #0]
 80006e6:	423b      	tst	r3, r7
 80006e8:	d1ef      	bne.n	80006ca <HAL_RCC_OscConfig+0x212>
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80006ea:	f7ff fdcb 	bl	8000284 <HAL_GetTick>
 80006ee:	9b01      	ldr	r3, [sp, #4]
 80006f0:	1ac0      	subs	r0, r0, r3
 80006f2:	2864      	cmp	r0, #100	; 0x64
 80006f4:	d9f6      	bls.n	80006e4 <HAL_RCC_OscConfig+0x22c>
 80006f6:	e740      	b.n	800057a <HAL_RCC_OscConfig+0xc2>
 80006f8:	2201      	movs	r2, #1
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80006fa:	2b00      	cmp	r3, #0
 80006fc:	d114      	bne.n	8000728 <HAL_RCC_OscConfig+0x270>
 80006fe:	6a23      	ldr	r3, [r4, #32]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8000700:	2702      	movs	r7, #2
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8000702:	4393      	bics	r3, r2
 8000704:	6223      	str	r3, [r4, #32]
 8000706:	6a23      	ldr	r3, [r4, #32]
 8000708:	3203      	adds	r2, #3
 800070a:	4393      	bics	r3, r2
 800070c:	6223      	str	r3, [r4, #32]
      tickstart = HAL_GetTick();
 800070e:	f7ff fdb9 	bl	8000284 <HAL_GetTick>
 8000712:	0006      	movs	r6, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8000714:	6a23      	ldr	r3, [r4, #32]
 8000716:	423b      	tst	r3, r7
 8000718:	d025      	beq.n	8000766 <HAL_RCC_OscConfig+0x2ae>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800071a:	f7ff fdb3 	bl	8000284 <HAL_GetTick>
 800071e:	4b2b      	ldr	r3, [pc, #172]	; (80007cc <HAL_RCC_OscConfig+0x314>)
 8000720:	1b80      	subs	r0, r0, r6
 8000722:	4298      	cmp	r0, r3
 8000724:	d9f6      	bls.n	8000714 <HAL_RCC_OscConfig+0x25c>
 8000726:	e728      	b.n	800057a <HAL_RCC_OscConfig+0xc2>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8000728:	2b05      	cmp	r3, #5
 800072a:	d10b      	bne.n	8000744 <HAL_RCC_OscConfig+0x28c>
 800072c:	6a21      	ldr	r1, [r4, #32]
 800072e:	3b01      	subs	r3, #1
 8000730:	430b      	orrs	r3, r1
 8000732:	6223      	str	r3, [r4, #32]
 8000734:	6a23      	ldr	r3, [r4, #32]
 8000736:	431a      	orrs	r2, r3
 8000738:	6222      	str	r2, [r4, #32]
      tickstart = HAL_GetTick();
 800073a:	f7ff fda3 	bl	8000284 <HAL_GetTick>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800073e:	2702      	movs	r7, #2
      tickstart = HAL_GetTick();
 8000740:	0006      	movs	r6, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8000742:	e00d      	b.n	8000760 <HAL_RCC_OscConfig+0x2a8>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8000744:	6a23      	ldr	r3, [r4, #32]
 8000746:	4393      	bics	r3, r2
 8000748:	2204      	movs	r2, #4
 800074a:	6223      	str	r3, [r4, #32]
 800074c:	6a23      	ldr	r3, [r4, #32]
 800074e:	4393      	bics	r3, r2
 8000750:	e7c0      	b.n	80006d4 <HAL_RCC_OscConfig+0x21c>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8000752:	f7ff fd97 	bl	8000284 <HAL_GetTick>
 8000756:	4b1d      	ldr	r3, [pc, #116]	; (80007cc <HAL_RCC_OscConfig+0x314>)
 8000758:	1b80      	subs	r0, r0, r6
 800075a:	4298      	cmp	r0, r3
 800075c:	d900      	bls.n	8000760 <HAL_RCC_OscConfig+0x2a8>
 800075e:	e70c      	b.n	800057a <HAL_RCC_OscConfig+0xc2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8000760:	6a23      	ldr	r3, [r4, #32]
 8000762:	423b      	tst	r3, r7
 8000764:	d0f5      	beq.n	8000752 <HAL_RCC_OscConfig+0x29a>
    if(pwrclkchanged == SET)
 8000766:	9b00      	ldr	r3, [sp, #0]
 8000768:	2b01      	cmp	r3, #1
 800076a:	d000      	beq.n	800076e <HAL_RCC_OscConfig+0x2b6>
 800076c:	e6b6      	b.n	80004dc <HAL_RCC_OscConfig+0x24>
      __HAL_RCC_PWR_CLK_DISABLE();
 800076e:	69e3      	ldr	r3, [r4, #28]
 8000770:	4a17      	ldr	r2, [pc, #92]	; (80007d0 <HAL_RCC_OscConfig+0x318>)
 8000772:	4013      	ands	r3, r2
 8000774:	61e3      	str	r3, [r4, #28]
 8000776:	e6b1      	b.n	80004dc <HAL_RCC_OscConfig+0x24>
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 8000778:	f7ff fd84 	bl	8000284 <HAL_GetTick>
 800077c:	1bc0      	subs	r0, r0, r7
 800077e:	2802      	cmp	r0, #2
 8000780:	d800      	bhi.n	8000784 <HAL_RCC_OscConfig+0x2cc>
 8000782:	e6be      	b.n	8000502 <HAL_RCC_OscConfig+0x4a>
 8000784:	e6f9      	b.n	800057a <HAL_RCC_OscConfig+0xc2>
    else if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ADC_CONTROL)
 8000786:	3205      	adds	r2, #5
 8000788:	d103      	bne.n	8000792 <HAL_RCC_OscConfig+0x2da>
      __HAL_RCC_HSI14ADC_ENABLE();
 800078a:	6b62      	ldr	r2, [r4, #52]	; 0x34
 800078c:	439a      	bics	r2, r3
 800078e:	6362      	str	r2, [r4, #52]	; 0x34
 8000790:	e6bb      	b.n	800050a <HAL_RCC_OscConfig+0x52>
      __HAL_RCC_HSI14ADC_DISABLE();
 8000792:	6b62      	ldr	r2, [r4, #52]	; 0x34
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 8000794:	2602      	movs	r6, #2
      __HAL_RCC_HSI14ADC_DISABLE();
 8000796:	4313      	orrs	r3, r2
      __HAL_RCC_HSI14_DISABLE();
 8000798:	2201      	movs	r2, #1
      __HAL_RCC_HSI14ADC_DISABLE();
 800079a:	6363      	str	r3, [r4, #52]	; 0x34
      __HAL_RCC_HSI14_DISABLE();
 800079c:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800079e:	4393      	bics	r3, r2
 80007a0:	6363      	str	r3, [r4, #52]	; 0x34
      tickstart = HAL_GetTick();
 80007a2:	f7ff fd6f 	bl	8000284 <HAL_GetTick>
 80007a6:	0007      	movs	r7, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 80007a8:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80007aa:	4233      	tst	r3, r6
 80007ac:	d100      	bne.n	80007b0 <HAL_RCC_OscConfig+0x2f8>
 80007ae:	e6b3      	b.n	8000518 <HAL_RCC_OscConfig+0x60>
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 80007b0:	f7ff fd68 	bl	8000284 <HAL_GetTick>
 80007b4:	1bc0      	subs	r0, r0, r7
 80007b6:	2802      	cmp	r0, #2
 80007b8:	d9f6      	bls.n	80007a8 <HAL_RCC_OscConfig+0x2f0>
 80007ba:	e6de      	b.n	800057a <HAL_RCC_OscConfig+0xc2>
 80007bc:	40021000 	.word	0x40021000
 80007c0:	fffeffff 	.word	0xfffeffff
 80007c4:	fffbffff 	.word	0xfffbffff
 80007c8:	40007000 	.word	0x40007000
 80007cc:	00001388 	.word	0x00001388
 80007d0:	efffffff 	.word	0xefffffff
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80007d4:	220c      	movs	r2, #12
 80007d6:	4c26      	ldr	r4, [pc, #152]	; (8000870 <HAL_RCC_OscConfig+0x3b8>)
      return HAL_ERROR;
 80007d8:	2001      	movs	r0, #1
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80007da:	6863      	ldr	r3, [r4, #4]
 80007dc:	4013      	ands	r3, r2
 80007de:	2b08      	cmp	r3, #8
 80007e0:	d100      	bne.n	80007e4 <HAL_RCC_OscConfig+0x32c>
 80007e2:	e6b3      	b.n	800054c <HAL_RCC_OscConfig+0x94>
        __HAL_RCC_PLL_DISABLE();
 80007e4:	6823      	ldr	r3, [r4, #0]
 80007e6:	4a23      	ldr	r2, [pc, #140]	; (8000874 <HAL_RCC_OscConfig+0x3bc>)
 80007e8:	4013      	ands	r3, r2
 80007ea:	6023      	str	r3, [r4, #0]
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80007ec:	2902      	cmp	r1, #2
 80007ee:	d12f      	bne.n	8000850 <HAL_RCC_OscConfig+0x398>
        tickstart = HAL_GetTick();
 80007f0:	f7ff fd48 	bl	8000284 <HAL_GetTick>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80007f4:	2680      	movs	r6, #128	; 0x80
        tickstart = HAL_GetTick();
 80007f6:	0007      	movs	r7, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80007f8:	04b6      	lsls	r6, r6, #18
 80007fa:	6823      	ldr	r3, [r4, #0]
 80007fc:	4233      	tst	r3, r6
 80007fe:	d121      	bne.n	8000844 <HAL_RCC_OscConfig+0x38c>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8000800:	220f      	movs	r2, #15
 8000802:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8000804:	4393      	bics	r3, r2
 8000806:	6aea      	ldr	r2, [r5, #44]	; 0x2c
 8000808:	4313      	orrs	r3, r2
 800080a:	62e3      	str	r3, [r4, #44]	; 0x2c
 800080c:	6a69      	ldr	r1, [r5, #36]	; 0x24
 800080e:	6aab      	ldr	r3, [r5, #40]	; 0x28
 8000810:	6862      	ldr	r2, [r4, #4]
 8000812:	430b      	orrs	r3, r1
 8000814:	4918      	ldr	r1, [pc, #96]	; (8000878 <HAL_RCC_OscConfig+0x3c0>)
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8000816:	2580      	movs	r5, #128	; 0x80
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8000818:	400a      	ands	r2, r1
 800081a:	4313      	orrs	r3, r2
 800081c:	6063      	str	r3, [r4, #4]
        __HAL_RCC_PLL_ENABLE();
 800081e:	2380      	movs	r3, #128	; 0x80
 8000820:	6822      	ldr	r2, [r4, #0]
 8000822:	045b      	lsls	r3, r3, #17
 8000824:	4313      	orrs	r3, r2
 8000826:	6023      	str	r3, [r4, #0]
        tickstart = HAL_GetTick();
 8000828:	f7ff fd2c 	bl	8000284 <HAL_GetTick>
 800082c:	0006      	movs	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800082e:	04ad      	lsls	r5, r5, #18
 8000830:	6823      	ldr	r3, [r4, #0]
 8000832:	422b      	tst	r3, r5
 8000834:	d000      	beq.n	8000838 <HAL_RCC_OscConfig+0x380>
 8000836:	e673      	b.n	8000520 <HAL_RCC_OscConfig+0x68>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8000838:	f7ff fd24 	bl	8000284 <HAL_GetTick>
 800083c:	1b80      	subs	r0, r0, r6
 800083e:	2802      	cmp	r0, #2
 8000840:	d9f6      	bls.n	8000830 <HAL_RCC_OscConfig+0x378>
 8000842:	e69a      	b.n	800057a <HAL_RCC_OscConfig+0xc2>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8000844:	f7ff fd1e 	bl	8000284 <HAL_GetTick>
 8000848:	1bc0      	subs	r0, r0, r7
 800084a:	2802      	cmp	r0, #2
 800084c:	d9d5      	bls.n	80007fa <HAL_RCC_OscConfig+0x342>
 800084e:	e694      	b.n	800057a <HAL_RCC_OscConfig+0xc2>
        tickstart = HAL_GetTick();
 8000850:	f7ff fd18 	bl	8000284 <HAL_GetTick>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8000854:	2580      	movs	r5, #128	; 0x80
        tickstart = HAL_GetTick();
 8000856:	0006      	movs	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8000858:	04ad      	lsls	r5, r5, #18
 800085a:	6823      	ldr	r3, [r4, #0]
 800085c:	422b      	tst	r3, r5
 800085e:	d100      	bne.n	8000862 <HAL_RCC_OscConfig+0x3aa>
 8000860:	e65e      	b.n	8000520 <HAL_RCC_OscConfig+0x68>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8000862:	f7ff fd0f 	bl	8000284 <HAL_GetTick>
 8000866:	1b80      	subs	r0, r0, r6
 8000868:	2802      	cmp	r0, #2
 800086a:	d9f6      	bls.n	800085a <HAL_RCC_OscConfig+0x3a2>
 800086c:	e685      	b.n	800057a <HAL_RCC_OscConfig+0xc2>
 800086e:	46c0      	nop			; (mov r8, r8)
 8000870:	40021000 	.word	0x40021000
 8000874:	feffffff 	.word	0xfeffffff
 8000878:	ffc2ffff 	.word	0xffc2ffff

0800087c <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800087c:	b570      	push	{r4, r5, r6, lr}
  const uint8_t aPLLMULFactorTable[16] = { 2U,  3U,  4U,  5U,  6U,  7U,  8U,  9U,
 800087e:	4c14      	ldr	r4, [pc, #80]	; (80008d0 <HAL_RCC_GetSysClockFreq+0x54>)
{
 8000880:	b088      	sub	sp, #32
  const uint8_t aPLLMULFactorTable[16] = { 2U,  3U,  4U,  5U,  6U,  7U,  8U,  9U,
 8000882:	2210      	movs	r2, #16
 8000884:	0021      	movs	r1, r4
 8000886:	4668      	mov	r0, sp
 8000888:	f001 fad6 	bl	8001e38 <memcpy>
                                         10U, 11U, 12U, 13U, 14U, 15U, 16U, 16U};
  const uint8_t aPredivFactorTable[16] = { 1U, 2U,  3U,  4U,  5U,  6U,  7U,  8U,
 800088c:	0021      	movs	r1, r4
 800088e:	ad04      	add	r5, sp, #16
 8000890:	2210      	movs	r2, #16
 8000892:	3110      	adds	r1, #16
 8000894:	0028      	movs	r0, r5
 8000896:	f001 facf 	bl	8001e38 <memcpy>
  uint32_t sysclockfreq = 0U;
  
  tmpreg = RCC->CFGR;
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 800089a:	220c      	movs	r2, #12
  tmpreg = RCC->CFGR;
 800089c:	4e0d      	ldr	r6, [pc, #52]	; (80008d4 <HAL_RCC_GetSysClockFreq+0x58>)
 800089e:	6873      	ldr	r3, [r6, #4]
  switch (tmpreg & RCC_CFGR_SWS)
 80008a0:	401a      	ands	r2, r3
 80008a2:	2a08      	cmp	r2, #8
 80008a4:	d111      	bne.n	80008ca <HAL_RCC_GetSysClockFreq+0x4e>
      sysclockfreq = HSE_VALUE;
      break;
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_BITNUMBER];
 80008a6:	200f      	movs	r0, #15
 80008a8:	466a      	mov	r2, sp
 80008aa:	0c99      	lsrs	r1, r3, #18
 80008ac:	4001      	ands	r1, r0
 80008ae:	5c54      	ldrb	r4, [r2, r1]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> RCC_CFGR2_PREDIV_BITNUMBER];
 80008b0:	6af2      	ldr	r2, [r6, #44]	; 0x2c
 80008b2:	4002      	ands	r2, r0
 80008b4:	5ca9      	ldrb	r1, [r5, r2]
      if ((tmpreg & RCC_CFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 80008b6:	03db      	lsls	r3, r3, #15
 80008b8:	d505      	bpl.n	80008c6 <HAL_RCC_GetSysClockFreq+0x4a>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (HSE_VALUE / prediv) * pllmul;
 80008ba:	4807      	ldr	r0, [pc, #28]	; (80008d8 <HAL_RCC_GetSysClockFreq+0x5c>)
 80008bc:	f7ff fc2c 	bl	8000118 <__udivsi3>
#if  (defined(STM32F042x6) || defined(STM32F048xx) || defined(STM32F070x6) || defined(STM32F071xB) || defined(STM32F072xB) || defined(STM32F078xx) || defined(STM32F070xB) || defined(STM32F091xC) || defined(STM32F098xx) || defined(STM32F030xC))
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (HSI_VALUE / prediv) * pllmul;
#else
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1U) * pllmul);
 80008c0:	4360      	muls	r0, r4
      sysclockfreq = HSI_VALUE;
      break;
    }
  }
  return sysclockfreq;
}
 80008c2:	b008      	add	sp, #32
 80008c4:	bd70      	pop	{r4, r5, r6, pc}
        pllclk = (uint32_t)((HSI_VALUE >> 1U) * pllmul);
 80008c6:	4805      	ldr	r0, [pc, #20]	; (80008dc <HAL_RCC_GetSysClockFreq+0x60>)
 80008c8:	e7fa      	b.n	80008c0 <HAL_RCC_GetSysClockFreq+0x44>
      sysclockfreq = HSE_VALUE;
 80008ca:	4803      	ldr	r0, [pc, #12]	; (80008d8 <HAL_RCC_GetSysClockFreq+0x5c>)
  return sysclockfreq;
 80008cc:	e7f9      	b.n	80008c2 <HAL_RCC_GetSysClockFreq+0x46>
 80008ce:	46c0      	nop			; (mov r8, r8)
 80008d0:	080026cc 	.word	0x080026cc
 80008d4:	40021000 	.word	0x40021000
 80008d8:	007a1200 	.word	0x007a1200
 80008dc:	003d0900 	.word	0x003d0900

080008e0 <HAL_RCC_ClockConfig>:
{
 80008e0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
  if(FLatency > (FLASH->ACR & FLASH_ACR_LATENCY))
 80008e2:	2201      	movs	r2, #1
 80008e4:	4c43      	ldr	r4, [pc, #268]	; (80009f4 <HAL_RCC_ClockConfig+0x114>)
{
 80008e6:	0006      	movs	r6, r0
  if(FLatency > (FLASH->ACR & FLASH_ACR_LATENCY))
 80008e8:	6823      	ldr	r3, [r4, #0]
{
 80008ea:	000f      	movs	r7, r1
  if(FLatency > (FLASH->ACR & FLASH_ACR_LATENCY))
 80008ec:	4013      	ands	r3, r2
 80008ee:	428b      	cmp	r3, r1
 80008f0:	d31c      	bcc.n	800092c <HAL_RCC_ClockConfig+0x4c>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80008f2:	6832      	ldr	r2, [r6, #0]
 80008f4:	0793      	lsls	r3, r2, #30
 80008f6:	d423      	bmi.n	8000940 <HAL_RCC_ClockConfig+0x60>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80008f8:	07d3      	lsls	r3, r2, #31
 80008fa:	d429      	bmi.n	8000950 <HAL_RCC_ClockConfig+0x70>
  if(FLatency < (FLASH->ACR & FLASH_ACR_LATENCY))
 80008fc:	2301      	movs	r3, #1
 80008fe:	6822      	ldr	r2, [r4, #0]
 8000900:	401a      	ands	r2, r3
 8000902:	4297      	cmp	r7, r2
 8000904:	d367      	bcc.n	80009d6 <HAL_RCC_ClockConfig+0xf6>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8000906:	6833      	ldr	r3, [r6, #0]
 8000908:	4c3b      	ldr	r4, [pc, #236]	; (80009f8 <HAL_RCC_ClockConfig+0x118>)
 800090a:	075b      	lsls	r3, r3, #29
 800090c:	d46a      	bmi.n	80009e4 <HAL_RCC_ClockConfig+0x104>
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 800090e:	f7ff ffb5 	bl	800087c <HAL_RCC_GetSysClockFreq>
 8000912:	6863      	ldr	r3, [r4, #4]
 8000914:	4a39      	ldr	r2, [pc, #228]	; (80009fc <HAL_RCC_ClockConfig+0x11c>)
 8000916:	061b      	lsls	r3, r3, #24
 8000918:	0f1b      	lsrs	r3, r3, #28
 800091a:	5cd3      	ldrb	r3, [r2, r3]
 800091c:	40d8      	lsrs	r0, r3
 800091e:	4b38      	ldr	r3, [pc, #224]	; (8000a00 <HAL_RCC_ClockConfig+0x120>)
 8000920:	6018      	str	r0, [r3, #0]
  HAL_InitTick (TICK_INT_PRIORITY);
 8000922:	2000      	movs	r0, #0
 8000924:	f7ff fc84 	bl	8000230 <HAL_InitTick>
  return HAL_OK;
 8000928:	2000      	movs	r0, #0
 800092a:	e008      	b.n	800093e <HAL_RCC_ClockConfig+0x5e>
    __HAL_FLASH_SET_LATENCY(FLatency);
 800092c:	6823      	ldr	r3, [r4, #0]
 800092e:	4393      	bics	r3, r2
 8000930:	430b      	orrs	r3, r1
 8000932:	6023      	str	r3, [r4, #0]
    if((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8000934:	6823      	ldr	r3, [r4, #0]
 8000936:	4013      	ands	r3, r2
 8000938:	4299      	cmp	r1, r3
 800093a:	d0da      	beq.n	80008f2 <HAL_RCC_ClockConfig+0x12>
      return HAL_ERROR;
 800093c:	2001      	movs	r0, #1
}
 800093e:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8000940:	20f0      	movs	r0, #240	; 0xf0
 8000942:	492d      	ldr	r1, [pc, #180]	; (80009f8 <HAL_RCC_ClockConfig+0x118>)
 8000944:	684b      	ldr	r3, [r1, #4]
 8000946:	4383      	bics	r3, r0
 8000948:	68b0      	ldr	r0, [r6, #8]
 800094a:	4303      	orrs	r3, r0
 800094c:	604b      	str	r3, [r1, #4]
 800094e:	e7d3      	b.n	80008f8 <HAL_RCC_ClockConfig+0x18>
 8000950:	4d29      	ldr	r5, [pc, #164]	; (80009f8 <HAL_RCC_ClockConfig+0x118>)
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8000952:	6872      	ldr	r2, [r6, #4]
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000954:	682b      	ldr	r3, [r5, #0]
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8000956:	2a01      	cmp	r2, #1
 8000958:	d11a      	bne.n	8000990 <HAL_RCC_ClockConfig+0xb0>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800095a:	039b      	lsls	r3, r3, #14
 800095c:	d5ee      	bpl.n	800093c <HAL_RCC_ClockConfig+0x5c>
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800095e:	2103      	movs	r1, #3
 8000960:	686b      	ldr	r3, [r5, #4]
 8000962:	438b      	bics	r3, r1
 8000964:	4313      	orrs	r3, r2
 8000966:	606b      	str	r3, [r5, #4]
    tickstart = HAL_GetTick();
 8000968:	f7ff fc8c 	bl	8000284 <HAL_GetTick>
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800096c:	6873      	ldr	r3, [r6, #4]
    tickstart = HAL_GetTick();
 800096e:	9001      	str	r0, [sp, #4]
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8000970:	2b01      	cmp	r3, #1
 8000972:	d115      	bne.n	80009a0 <HAL_RCC_ClockConfig+0xc0>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8000974:	220c      	movs	r2, #12
 8000976:	686b      	ldr	r3, [r5, #4]
 8000978:	4013      	ands	r3, r2
 800097a:	2b04      	cmp	r3, #4
 800097c:	d0be      	beq.n	80008fc <HAL_RCC_ClockConfig+0x1c>
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 800097e:	f7ff fc81 	bl	8000284 <HAL_GetTick>
 8000982:	9b01      	ldr	r3, [sp, #4]
 8000984:	1ac0      	subs	r0, r0, r3
 8000986:	4b1f      	ldr	r3, [pc, #124]	; (8000a04 <HAL_RCC_ClockConfig+0x124>)
 8000988:	4298      	cmp	r0, r3
 800098a:	d9f3      	bls.n	8000974 <HAL_RCC_ClockConfig+0x94>
          return HAL_TIMEOUT;
 800098c:	2003      	movs	r0, #3
 800098e:	e7d6      	b.n	800093e <HAL_RCC_ClockConfig+0x5e>
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8000990:	2a02      	cmp	r2, #2
 8000992:	d102      	bne.n	800099a <HAL_RCC_ClockConfig+0xba>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8000994:	019b      	lsls	r3, r3, #6
 8000996:	d4e2      	bmi.n	800095e <HAL_RCC_ClockConfig+0x7e>
 8000998:	e7d0      	b.n	800093c <HAL_RCC_ClockConfig+0x5c>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800099a:	079b      	lsls	r3, r3, #30
 800099c:	d4df      	bmi.n	800095e <HAL_RCC_ClockConfig+0x7e>
 800099e:	e7cd      	b.n	800093c <HAL_RCC_ClockConfig+0x5c>
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80009a0:	2b02      	cmp	r3, #2
 80009a2:	d012      	beq.n	80009ca <HAL_RCC_ClockConfig+0xea>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 80009a4:	220c      	movs	r2, #12
 80009a6:	686b      	ldr	r3, [r5, #4]
 80009a8:	4213      	tst	r3, r2
 80009aa:	d0a7      	beq.n	80008fc <HAL_RCC_ClockConfig+0x1c>
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 80009ac:	f7ff fc6a 	bl	8000284 <HAL_GetTick>
 80009b0:	9b01      	ldr	r3, [sp, #4]
 80009b2:	1ac0      	subs	r0, r0, r3
 80009b4:	4b13      	ldr	r3, [pc, #76]	; (8000a04 <HAL_RCC_ClockConfig+0x124>)
 80009b6:	4298      	cmp	r0, r3
 80009b8:	d9f4      	bls.n	80009a4 <HAL_RCC_ClockConfig+0xc4>
 80009ba:	e7e7      	b.n	800098c <HAL_RCC_ClockConfig+0xac>
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 80009bc:	f7ff fc62 	bl	8000284 <HAL_GetTick>
 80009c0:	9b01      	ldr	r3, [sp, #4]
 80009c2:	1ac0      	subs	r0, r0, r3
 80009c4:	4b0f      	ldr	r3, [pc, #60]	; (8000a04 <HAL_RCC_ClockConfig+0x124>)
 80009c6:	4298      	cmp	r0, r3
 80009c8:	d8e0      	bhi.n	800098c <HAL_RCC_ClockConfig+0xac>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80009ca:	220c      	movs	r2, #12
 80009cc:	686b      	ldr	r3, [r5, #4]
 80009ce:	4013      	ands	r3, r2
 80009d0:	2b08      	cmp	r3, #8
 80009d2:	d1f3      	bne.n	80009bc <HAL_RCC_ClockConfig+0xdc>
 80009d4:	e792      	b.n	80008fc <HAL_RCC_ClockConfig+0x1c>
    __HAL_FLASH_SET_LATENCY(FLatency);
 80009d6:	6822      	ldr	r2, [r4, #0]
 80009d8:	439a      	bics	r2, r3
 80009da:	6022      	str	r2, [r4, #0]
    if((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 80009dc:	6822      	ldr	r2, [r4, #0]
 80009de:	421a      	tst	r2, r3
 80009e0:	d1ac      	bne.n	800093c <HAL_RCC_ClockConfig+0x5c>
 80009e2:	e790      	b.n	8000906 <HAL_RCC_ClockConfig+0x26>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 80009e4:	6863      	ldr	r3, [r4, #4]
 80009e6:	4a08      	ldr	r2, [pc, #32]	; (8000a08 <HAL_RCC_ClockConfig+0x128>)
 80009e8:	4013      	ands	r3, r2
 80009ea:	68f2      	ldr	r2, [r6, #12]
 80009ec:	4313      	orrs	r3, r2
 80009ee:	6063      	str	r3, [r4, #4]
 80009f0:	e78d      	b.n	800090e <HAL_RCC_ClockConfig+0x2e>
 80009f2:	46c0      	nop			; (mov r8, r8)
 80009f4:	40022000 	.word	0x40022000
 80009f8:	40021000 	.word	0x40021000
 80009fc:	08002757 	.word	0x08002757
 8000a00:	2000003c 	.word	0x2000003c
 8000a04:	00001388 	.word	0x00001388
 8000a08:	fffff8ff 	.word	0xfffff8ff

08000a0c <HAL_RCC_GetHCLKFreq>:
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
  return SystemCoreClock;
 8000a0c:	4b01      	ldr	r3, [pc, #4]	; (8000a14 <HAL_RCC_GetHCLKFreq+0x8>)
 8000a0e:	6818      	ldr	r0, [r3, #0]
}
 8000a10:	4770      	bx	lr
 8000a12:	46c0      	nop			; (mov r8, r8)
 8000a14:	2000003c 	.word	0x2000003c

08000a18 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) and RCC_BDCR register are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8000a18:	b5f0      	push	{r4, r5, r6, r7, lr}

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8000a1a:	6803      	ldr	r3, [r0, #0]
{
 8000a1c:	b085      	sub	sp, #20
 8000a1e:	0005      	movs	r5, r0
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8000a20:	03db      	lsls	r3, r3, #15
 8000a22:	d528      	bpl.n	8000a76 <HAL_RCCEx_PeriphCLKConfig+0x5e>
    FlagStatus       pwrclkchanged = RESET;

    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8000a24:	2280      	movs	r2, #128	; 0x80
    FlagStatus       pwrclkchanged = RESET;
 8000a26:	2100      	movs	r1, #0
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8000a28:	4c37      	ldr	r4, [pc, #220]	; (8000b08 <HAL_RCCEx_PeriphCLKConfig+0xf0>)
 8000a2a:	0552      	lsls	r2, r2, #21
 8000a2c:	69e3      	ldr	r3, [r4, #28]
    FlagStatus       pwrclkchanged = RESET;
 8000a2e:	9100      	str	r1, [sp, #0]
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8000a30:	4213      	tst	r3, r2
 8000a32:	d108      	bne.n	8000a46 <HAL_RCCEx_PeriphCLKConfig+0x2e>
    {
    __HAL_RCC_PWR_CLK_ENABLE();
 8000a34:	69e3      	ldr	r3, [r4, #28]
 8000a36:	4313      	orrs	r3, r2
 8000a38:	61e3      	str	r3, [r4, #28]
 8000a3a:	69e3      	ldr	r3, [r4, #28]
 8000a3c:	4013      	ands	r3, r2
 8000a3e:	9303      	str	r3, [sp, #12]
 8000a40:	9b03      	ldr	r3, [sp, #12]
      pwrclkchanged = SET;
 8000a42:	2301      	movs	r3, #1
 8000a44:	9300      	str	r3, [sp, #0]
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8000a46:	2780      	movs	r7, #128	; 0x80
 8000a48:	4e30      	ldr	r6, [pc, #192]	; (8000b0c <HAL_RCCEx_PeriphCLKConfig+0xf4>)
 8000a4a:	007f      	lsls	r7, r7, #1
 8000a4c:	6833      	ldr	r3, [r6, #0]
 8000a4e:	423b      	tst	r3, r7
 8000a50:	d026      	beq.n	8000aa0 <HAL_RCCEx_PeriphCLKConfig+0x88>
        }
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8000a52:	22c0      	movs	r2, #192	; 0xc0
 8000a54:	6a23      	ldr	r3, [r4, #32]
 8000a56:	0092      	lsls	r2, r2, #2
 8000a58:	4013      	ands	r3, r2
 8000a5a:	4e2d      	ldr	r6, [pc, #180]	; (8000b10 <HAL_RCCEx_PeriphCLKConfig+0xf8>)
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8000a5c:	d132      	bne.n	8000ac4 <HAL_RCCEx_PeriphCLKConfig+0xac>
            return HAL_TIMEOUT;
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8000a5e:	6a23      	ldr	r3, [r4, #32]
 8000a60:	401e      	ands	r6, r3
 8000a62:	686b      	ldr	r3, [r5, #4]
 8000a64:	431e      	orrs	r6, r3

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8000a66:	9b00      	ldr	r3, [sp, #0]
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8000a68:	6226      	str	r6, [r4, #32]
    if(pwrclkchanged == SET)
 8000a6a:	2b01      	cmp	r3, #1
 8000a6c:	d103      	bne.n	8000a76 <HAL_RCCEx_PeriphCLKConfig+0x5e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8000a6e:	69e3      	ldr	r3, [r4, #28]
 8000a70:	4a28      	ldr	r2, [pc, #160]	; (8000b14 <HAL_RCCEx_PeriphCLKConfig+0xfc>)
 8000a72:	4013      	ands	r3, r2
 8000a74:	61e3      	str	r3, [r4, #28]
    }
  }

  /*------------------------------- USART1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8000a76:	682a      	ldr	r2, [r5, #0]
 8000a78:	07d3      	lsls	r3, r2, #31
 8000a7a:	d506      	bpl.n	8000a8a <HAL_RCCEx_PeriphCLKConfig+0x72>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8000a7c:	2003      	movs	r0, #3
 8000a7e:	4922      	ldr	r1, [pc, #136]	; (8000b08 <HAL_RCCEx_PeriphCLKConfig+0xf0>)
 8000a80:	6b0b      	ldr	r3, [r1, #48]	; 0x30
 8000a82:	4383      	bics	r3, r0
 8000a84:	68a8      	ldr	r0, [r5, #8]
 8000a86:	4303      	orrs	r3, r0
 8000a88:	630b      	str	r3, [r1, #48]	; 0x30
#endif /* STM32F042x6 || STM32F048xx ||                */
       /* STM32F051x8 || STM32F058xx ||                */
       /* STM32F071xB || STM32F072xB || STM32F078xx || */
       /* STM32F091xC || STM32F098xx */
  
  return HAL_OK;
 8000a8a:	2000      	movs	r0, #0
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8000a8c:	0693      	lsls	r3, r2, #26
 8000a8e:	d517      	bpl.n	8000ac0 <HAL_RCCEx_PeriphCLKConfig+0xa8>
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8000a90:	2110      	movs	r1, #16
 8000a92:	4a1d      	ldr	r2, [pc, #116]	; (8000b08 <HAL_RCCEx_PeriphCLKConfig+0xf0>)
 8000a94:	6b13      	ldr	r3, [r2, #48]	; 0x30
 8000a96:	438b      	bics	r3, r1
 8000a98:	68e9      	ldr	r1, [r5, #12]
 8000a9a:	430b      	orrs	r3, r1
 8000a9c:	6313      	str	r3, [r2, #48]	; 0x30
 8000a9e:	e00f      	b.n	8000ac0 <HAL_RCCEx_PeriphCLKConfig+0xa8>
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8000aa0:	6833      	ldr	r3, [r6, #0]
 8000aa2:	433b      	orrs	r3, r7
 8000aa4:	6033      	str	r3, [r6, #0]
      tickstart = HAL_GetTick();
 8000aa6:	f7ff fbed 	bl	8000284 <HAL_GetTick>
 8000aaa:	9001      	str	r0, [sp, #4]
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8000aac:	6833      	ldr	r3, [r6, #0]
 8000aae:	423b      	tst	r3, r7
 8000ab0:	d1cf      	bne.n	8000a52 <HAL_RCCEx_PeriphCLKConfig+0x3a>
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8000ab2:	f7ff fbe7 	bl	8000284 <HAL_GetTick>
 8000ab6:	9b01      	ldr	r3, [sp, #4]
 8000ab8:	1ac0      	subs	r0, r0, r3
 8000aba:	2864      	cmp	r0, #100	; 0x64
 8000abc:	d9f6      	bls.n	8000aac <HAL_RCCEx_PeriphCLKConfig+0x94>
          return HAL_TIMEOUT;
 8000abe:	2003      	movs	r0, #3
}
 8000ac0:	b005      	add	sp, #20
 8000ac2:	bdf0      	pop	{r4, r5, r6, r7, pc}
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8000ac4:	6869      	ldr	r1, [r5, #4]
 8000ac6:	400a      	ands	r2, r1
 8000ac8:	4293      	cmp	r3, r2
 8000aca:	d0c8      	beq.n	8000a5e <HAL_RCCEx_PeriphCLKConfig+0x46>
      __HAL_RCC_BACKUPRESET_FORCE();
 8000acc:	2380      	movs	r3, #128	; 0x80
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8000ace:	6a22      	ldr	r2, [r4, #32]
      __HAL_RCC_BACKUPRESET_FORCE();
 8000ad0:	6a20      	ldr	r0, [r4, #32]
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8000ad2:	0011      	movs	r1, r2
      __HAL_RCC_BACKUPRESET_FORCE();
 8000ad4:	025b      	lsls	r3, r3, #9
 8000ad6:	4303      	orrs	r3, r0
 8000ad8:	6223      	str	r3, [r4, #32]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8000ada:	6a23      	ldr	r3, [r4, #32]
 8000adc:	480e      	ldr	r0, [pc, #56]	; (8000b18 <HAL_RCCEx_PeriphCLKConfig+0x100>)
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8000ade:	4031      	ands	r1, r6
      __HAL_RCC_BACKUPRESET_RELEASE();
 8000ae0:	4003      	ands	r3, r0
 8000ae2:	6223      	str	r3, [r4, #32]
      RCC->BDCR = temp_reg;
 8000ae4:	6221      	str	r1, [r4, #32]
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8000ae6:	07d3      	lsls	r3, r2, #31
 8000ae8:	d5b9      	bpl.n	8000a5e <HAL_RCCEx_PeriphCLKConfig+0x46>
        tickstart = HAL_GetTick();
 8000aea:	f7ff fbcb 	bl	8000284 <HAL_GetTick>
 8000aee:	0007      	movs	r7, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8000af0:	2202      	movs	r2, #2
 8000af2:	6a23      	ldr	r3, [r4, #32]
 8000af4:	4213      	tst	r3, r2
 8000af6:	d1b2      	bne.n	8000a5e <HAL_RCCEx_PeriphCLKConfig+0x46>
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8000af8:	f7ff fbc4 	bl	8000284 <HAL_GetTick>
 8000afc:	4b07      	ldr	r3, [pc, #28]	; (8000b1c <HAL_RCCEx_PeriphCLKConfig+0x104>)
 8000afe:	1bc0      	subs	r0, r0, r7
 8000b00:	4298      	cmp	r0, r3
 8000b02:	d9f5      	bls.n	8000af0 <HAL_RCCEx_PeriphCLKConfig+0xd8>
 8000b04:	e7db      	b.n	8000abe <HAL_RCCEx_PeriphCLKConfig+0xa6>
 8000b06:	46c0      	nop			; (mov r8, r8)
 8000b08:	40021000 	.word	0x40021000
 8000b0c:	40007000 	.word	0x40007000
 8000b10:	fffffcff 	.word	0xfffffcff
 8000b14:	efffffff 	.word	0xefffffff
 8000b18:	fffeffff 	.word	0xfffeffff
 8000b1c:	00001388 	.word	0x00001388

08000b20 <SPI_WaitFifoStateUntilTimeout.part.1>:
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8000b20:	21e0      	movs	r1, #224	; 0xe0
 8000b22:	6803      	ldr	r3, [r0, #0]
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
 8000b24:	b510      	push	{r4, lr}
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8000b26:	685a      	ldr	r2, [r3, #4]
 8000b28:	438a      	bics	r2, r1
 8000b2a:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8000b2c:	2282      	movs	r2, #130	; 0x82
 8000b2e:	6841      	ldr	r1, [r0, #4]
 8000b30:	0052      	lsls	r2, r2, #1
 8000b32:	4291      	cmp	r1, r2
 8000b34:	d10c      	bne.n	8000b50 <SPI_WaitFifoStateUntilTimeout.part.1+0x30>
 8000b36:	2180      	movs	r1, #128	; 0x80
 8000b38:	6882      	ldr	r2, [r0, #8]
 8000b3a:	0209      	lsls	r1, r1, #8
 8000b3c:	428a      	cmp	r2, r1
 8000b3e:	d003      	beq.n	8000b48 <SPI_WaitFifoStateUntilTimeout.part.1+0x28>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8000b40:	2180      	movs	r1, #128	; 0x80
 8000b42:	00c9      	lsls	r1, r1, #3
 8000b44:	428a      	cmp	r2, r1
 8000b46:	d103      	bne.n	8000b50 <SPI_WaitFifoStateUntilTimeout.part.1+0x30>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8000b48:	2140      	movs	r1, #64	; 0x40
 8000b4a:	681a      	ldr	r2, [r3, #0]
 8000b4c:	438a      	bics	r2, r1
 8000b4e:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8000b50:	2180      	movs	r1, #128	; 0x80
 8000b52:	6a82      	ldr	r2, [r0, #40]	; 0x28
 8000b54:	0189      	lsls	r1, r1, #6
 8000b56:	428a      	cmp	r2, r1
 8000b58:	d106      	bne.n	8000b68 <SPI_WaitFifoStateUntilTimeout.part.1+0x48>
        {
          SPI_RESET_CRC(hspi);
 8000b5a:	6819      	ldr	r1, [r3, #0]
 8000b5c:	4c07      	ldr	r4, [pc, #28]	; (8000b7c <SPI_WaitFifoStateUntilTimeout.part.1+0x5c>)
 8000b5e:	4021      	ands	r1, r4
 8000b60:	6019      	str	r1, [r3, #0]
 8000b62:	6819      	ldr	r1, [r3, #0]
 8000b64:	430a      	orrs	r2, r1
 8000b66:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8000b68:	0003      	movs	r3, r0
 8000b6a:	2201      	movs	r2, #1
 8000b6c:	335d      	adds	r3, #93	; 0x5d
 8000b6e:	701a      	strb	r2, [r3, #0]

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8000b70:	2300      	movs	r3, #0
 8000b72:	305c      	adds	r0, #92	; 0x5c
 8000b74:	7003      	strb	r3, [r0, #0]
      }
    }
  }

  return HAL_OK;
}
 8000b76:	2003      	movs	r0, #3
 8000b78:	bd10      	pop	{r4, pc}
 8000b7a:	46c0      	nop			; (mov r8, r8)
 8000b7c:	ffffdfff 	.word	0xffffdfff

08000b80 <SPI_WaitFlagStateUntilTimeout.constprop.9>:
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, uint32_t State,
 8000b80:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000b82:	0005      	movs	r5, r0
 8000b84:	000c      	movs	r4, r1
 8000b86:	0016      	movs	r6, r2
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8000b88:	2780      	movs	r7, #128	; 0x80
 8000b8a:	682b      	ldr	r3, [r5, #0]
 8000b8c:	6898      	ldr	r0, [r3, #8]
 8000b8e:	4038      	ands	r0, r7
 8000b90:	d006      	beq.n	8000ba0 <SPI_WaitFlagStateUntilTimeout.constprop.9+0x20>
    if (Timeout != HAL_MAX_DELAY)
 8000b92:	1c62      	adds	r2, r4, #1
 8000b94:	d0fa      	beq.n	8000b8c <SPI_WaitFlagStateUntilTimeout.constprop.9+0xc>
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) >= Timeout))
 8000b96:	2c00      	cmp	r4, #0
 8000b98:	d103      	bne.n	8000ba2 <SPI_WaitFlagStateUntilTimeout.constprop.9+0x22>
 8000b9a:	0028      	movs	r0, r5
 8000b9c:	f7ff ffc0 	bl	8000b20 <SPI_WaitFifoStateUntilTimeout.part.1>
}
 8000ba0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) >= Timeout))
 8000ba2:	f7ff fb6f 	bl	8000284 <HAL_GetTick>
 8000ba6:	1b80      	subs	r0, r0, r6
 8000ba8:	4284      	cmp	r4, r0
 8000baa:	d8ee      	bhi.n	8000b8a <SPI_WaitFlagStateUntilTimeout.constprop.9+0xa>
 8000bac:	e7f5      	b.n	8000b9a <SPI_WaitFlagStateUntilTimeout.constprop.9+0x1a>

08000bae <SPI_WaitFifoStateUntilTimeout.constprop.10>:
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
 8000bae:	b5f0      	push	{r4, r5, r6, r7, lr}
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 8000bb0:	27c0      	movs	r7, #192	; 0xc0
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
 8000bb2:	0006      	movs	r6, r0
 8000bb4:	000d      	movs	r5, r1
 8000bb6:	0014      	movs	r4, r2
 8000bb8:	b085      	sub	sp, #20
 8000bba:	9301      	str	r3, [sp, #4]
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 8000bbc:	00ff      	lsls	r7, r7, #3
      tmpreg = *((__IO uint8_t *)&hspi->Instance->DR);
 8000bbe:	ab02      	add	r3, sp, #8
  while ((hspi->Instance->SR & Fifo) != State)
 8000bc0:	6831      	ldr	r1, [r6, #0]
      tmpreg = *((__IO uint8_t *)&hspi->Instance->DR);
 8000bc2:	1dda      	adds	r2, r3, #7
  while ((hspi->Instance->SR & Fifo) != State)
 8000bc4:	6888      	ldr	r0, [r1, #8]
 8000bc6:	4028      	ands	r0, r5
 8000bc8:	d00c      	beq.n	8000be4 <SPI_WaitFifoStateUntilTimeout.constprop.10+0x36>
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 8000bca:	42bd      	cmp	r5, r7
 8000bcc:	d103      	bne.n	8000bd6 <SPI_WaitFifoStateUntilTimeout.constprop.10+0x28>
      tmpreg = *((__IO uint8_t *)&hspi->Instance->DR);
 8000bce:	7b0b      	ldrb	r3, [r1, #12]
 8000bd0:	b2db      	uxtb	r3, r3
 8000bd2:	7013      	strb	r3, [r2, #0]
      UNUSED(tmpreg);
 8000bd4:	7813      	ldrb	r3, [r2, #0]
    if (Timeout != HAL_MAX_DELAY)
 8000bd6:	1c63      	adds	r3, r4, #1
 8000bd8:	d0f4      	beq.n	8000bc4 <SPI_WaitFifoStateUntilTimeout.constprop.10+0x16>
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) >= Timeout))
 8000bda:	2c00      	cmp	r4, #0
 8000bdc:	d104      	bne.n	8000be8 <SPI_WaitFifoStateUntilTimeout.constprop.10+0x3a>
 8000bde:	0030      	movs	r0, r6
 8000be0:	f7ff ff9e 	bl	8000b20 <SPI_WaitFifoStateUntilTimeout.part.1>
}
 8000be4:	b005      	add	sp, #20
 8000be6:	bdf0      	pop	{r4, r5, r6, r7, pc}
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) >= Timeout))
 8000be8:	f7ff fb4c 	bl	8000284 <HAL_GetTick>
 8000bec:	9b01      	ldr	r3, [sp, #4]
 8000bee:	1ac0      	subs	r0, r0, r3
 8000bf0:	4284      	cmp	r4, r0
 8000bf2:	d8e4      	bhi.n	8000bbe <SPI_WaitFifoStateUntilTimeout.constprop.10+0x10>
 8000bf4:	e7f3      	b.n	8000bde <SPI_WaitFifoStateUntilTimeout.constprop.10+0x30>

08000bf6 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8000bf6:	b570      	push	{r4, r5, r6, lr}
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8000bf8:	0013      	movs	r3, r2
{
 8000bfa:	000d      	movs	r5, r1
 8000bfc:	0016      	movs	r6, r2
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8000bfe:	000a      	movs	r2, r1
 8000c00:	21c0      	movs	r1, #192	; 0xc0
 8000c02:	0149      	lsls	r1, r1, #5
{
 8000c04:	0004      	movs	r4, r0
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8000c06:	f7ff ffd2 	bl	8000bae <SPI_WaitFifoStateUntilTimeout.constprop.10>
 8000c0a:	2800      	cmp	r0, #0
 8000c0c:	d005      	beq.n	8000c1a <SPI_EndRxTxTransaction+0x24>
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8000c0e:	2320      	movs	r3, #32
 8000c10:	6e22      	ldr	r2, [r4, #96]	; 0x60
      return HAL_TIMEOUT;
 8000c12:	2003      	movs	r0, #3
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8000c14:	4313      	orrs	r3, r2
 8000c16:	6623      	str	r3, [r4, #96]	; 0x60
 8000c18:	e00f      	b.n	8000c3a <SPI_EndRxTxTransaction+0x44>
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
    return HAL_TIMEOUT;
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8000c1a:	0032      	movs	r2, r6
 8000c1c:	0029      	movs	r1, r5
 8000c1e:	0020      	movs	r0, r4
 8000c20:	f7ff ffae 	bl	8000b80 <SPI_WaitFlagStateUntilTimeout.constprop.9>
 8000c24:	2800      	cmp	r0, #0
 8000c26:	d1f2      	bne.n	8000c0e <SPI_EndRxTxTransaction+0x18>
    if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8000c28:	21c0      	movs	r1, #192	; 0xc0
 8000c2a:	0033      	movs	r3, r6
 8000c2c:	002a      	movs	r2, r5
 8000c2e:	00c9      	lsls	r1, r1, #3
 8000c30:	0020      	movs	r0, r4
 8000c32:	f7ff ffbc 	bl	8000bae <SPI_WaitFifoStateUntilTimeout.constprop.10>
 8000c36:	2800      	cmp	r0, #0
 8000c38:	d1e9      	bne.n	8000c0e <SPI_EndRxTxTransaction+0x18>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
    return HAL_TIMEOUT;
  }
  return HAL_OK;
}
 8000c3a:	bd70      	pop	{r4, r5, r6, pc}

08000c3c <SPI_EndRxTransaction>:
{
 8000c3c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8000c3e:	2382      	movs	r3, #130	; 0x82
{
 8000c40:	0017      	movs	r7, r2
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8000c42:	6842      	ldr	r2, [r0, #4]
{
 8000c44:	0004      	movs	r4, r0
 8000c46:	000e      	movs	r6, r1
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8000c48:	005b      	lsls	r3, r3, #1
 8000c4a:	429a      	cmp	r2, r3
 8000c4c:	d10d      	bne.n	8000c6a <SPI_EndRxTransaction+0x2e>
 8000c4e:	2280      	movs	r2, #128	; 0x80
 8000c50:	6883      	ldr	r3, [r0, #8]
 8000c52:	0212      	lsls	r2, r2, #8
 8000c54:	4293      	cmp	r3, r2
 8000c56:	d003      	beq.n	8000c60 <SPI_EndRxTransaction+0x24>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8000c58:	2280      	movs	r2, #128	; 0x80
 8000c5a:	00d2      	lsls	r2, r2, #3
 8000c5c:	4293      	cmp	r3, r2
 8000c5e:	d104      	bne.n	8000c6a <SPI_EndRxTransaction+0x2e>
    __HAL_SPI_DISABLE(hspi);
 8000c60:	2140      	movs	r1, #64	; 0x40
 8000c62:	6822      	ldr	r2, [r4, #0]
 8000c64:	6813      	ldr	r3, [r2, #0]
 8000c66:	438b      	bics	r3, r1
 8000c68:	6013      	str	r3, [r2, #0]
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8000c6a:	003a      	movs	r2, r7
 8000c6c:	0031      	movs	r1, r6
 8000c6e:	0020      	movs	r0, r4
 8000c70:	f7ff ff86 	bl	8000b80 <SPI_WaitFlagStateUntilTimeout.constprop.9>
 8000c74:	1e05      	subs	r5, r0, #0
 8000c76:	d005      	beq.n	8000c84 <SPI_EndRxTransaction+0x48>
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8000c78:	2320      	movs	r3, #32
 8000c7a:	6e22      	ldr	r2, [r4, #96]	; 0x60
      return HAL_TIMEOUT;
 8000c7c:	2503      	movs	r5, #3
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8000c7e:	4313      	orrs	r3, r2
 8000c80:	6623      	str	r3, [r4, #96]	; 0x60
 8000c82:	e016      	b.n	8000cb2 <SPI_EndRxTransaction+0x76>
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8000c84:	2382      	movs	r3, #130	; 0x82
 8000c86:	6862      	ldr	r2, [r4, #4]
 8000c88:	005b      	lsls	r3, r3, #1
 8000c8a:	429a      	cmp	r2, r3
 8000c8c:	d111      	bne.n	8000cb2 <SPI_EndRxTransaction+0x76>
 8000c8e:	2280      	movs	r2, #128	; 0x80
 8000c90:	68a3      	ldr	r3, [r4, #8]
 8000c92:	0212      	lsls	r2, r2, #8
 8000c94:	4293      	cmp	r3, r2
 8000c96:	d003      	beq.n	8000ca0 <SPI_EndRxTransaction+0x64>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8000c98:	2280      	movs	r2, #128	; 0x80
 8000c9a:	00d2      	lsls	r2, r2, #3
 8000c9c:	4293      	cmp	r3, r2
 8000c9e:	d108      	bne.n	8000cb2 <SPI_EndRxTransaction+0x76>
    if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8000ca0:	21c0      	movs	r1, #192	; 0xc0
 8000ca2:	003b      	movs	r3, r7
 8000ca4:	0032      	movs	r2, r6
 8000ca6:	00c9      	lsls	r1, r1, #3
 8000ca8:	0020      	movs	r0, r4
 8000caa:	f7ff ff80 	bl	8000bae <SPI_WaitFifoStateUntilTimeout.constprop.10>
 8000cae:	2800      	cmp	r0, #0
 8000cb0:	d1e2      	bne.n	8000c78 <SPI_EndRxTransaction+0x3c>
}
 8000cb2:	0028      	movs	r0, r5
 8000cb4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08000cb6 <HAL_SPI_Transmit>:
{
 8000cb6:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000cb8:	001f      	movs	r7, r3
  __HAL_LOCK(hspi);
 8000cba:	0003      	movs	r3, r0
{
 8000cbc:	b087      	sub	sp, #28
  __HAL_LOCK(hspi);
 8000cbe:	335c      	adds	r3, #92	; 0x5c
{
 8000cc0:	9201      	str	r2, [sp, #4]
  __HAL_LOCK(hspi);
 8000cc2:	9302      	str	r3, [sp, #8]
 8000cc4:	781b      	ldrb	r3, [r3, #0]
{
 8000cc6:	0004      	movs	r4, r0
 8000cc8:	000d      	movs	r5, r1
  __HAL_LOCK(hspi);
 8000cca:	2602      	movs	r6, #2
 8000ccc:	2b01      	cmp	r3, #1
 8000cce:	d100      	bne.n	8000cd2 <HAL_SPI_Transmit+0x1c>
 8000cd0:	e07a      	b.n	8000dc8 <HAL_SPI_Transmit+0x112>
 8000cd2:	2301      	movs	r3, #1
 8000cd4:	9a02      	ldr	r2, [sp, #8]
 8000cd6:	7013      	strb	r3, [r2, #0]
  tickstart = HAL_GetTick();
 8000cd8:	f7ff fad4 	bl	8000284 <HAL_GetTick>
  if (hspi->State != HAL_SPI_STATE_READY)
 8000cdc:	0023      	movs	r3, r4
 8000cde:	335d      	adds	r3, #93	; 0x5d
  tickstart = HAL_GetTick();
 8000ce0:	9000      	str	r0, [sp, #0]
  if (hspi->State != HAL_SPI_STATE_READY)
 8000ce2:	9303      	str	r3, [sp, #12]
 8000ce4:	781b      	ldrb	r3, [r3, #0]
 8000ce6:	b2db      	uxtb	r3, r3
 8000ce8:	2b01      	cmp	r3, #1
 8000cea:	d167      	bne.n	8000dbc <HAL_SPI_Transmit+0x106>
    errorcode = HAL_ERROR;
 8000cec:	001e      	movs	r6, r3
  if ((pData == NULL) || (Size == 0U))
 8000cee:	2d00      	cmp	r5, #0
 8000cf0:	d064      	beq.n	8000dbc <HAL_SPI_Transmit+0x106>
 8000cf2:	9b01      	ldr	r3, [sp, #4]
 8000cf4:	2b00      	cmp	r3, #0
 8000cf6:	d061      	beq.n	8000dbc <HAL_SPI_Transmit+0x106>
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8000cf8:	2303      	movs	r3, #3
 8000cfa:	9a03      	ldr	r2, [sp, #12]
 8000cfc:	7013      	strb	r3, [r2, #0]
  hspi->TxXferSize  = Size;
 8000cfe:	466a      	mov	r2, sp
 8000d00:	8892      	ldrh	r2, [r2, #4]
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8000d02:	2300      	movs	r3, #0
  hspi->TxXferSize  = Size;
 8000d04:	87a2      	strh	r2, [r4, #60]	; 0x3c
  hspi->TxXferCount = Size;
 8000d06:	466a      	mov	r2, sp
 8000d08:	8892      	ldrh	r2, [r2, #4]
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8000d0a:	6623      	str	r3, [r4, #96]	; 0x60
  hspi->TxXferCount = Size;
 8000d0c:	87e2      	strh	r2, [r4, #62]	; 0x3e
  hspi->RxXferSize  = 0U;
 8000d0e:	1da2      	adds	r2, r4, #6
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8000d10:	6423      	str	r3, [r4, #64]	; 0x40
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8000d12:	63a5      	str	r5, [r4, #56]	; 0x38
  hspi->RxXferCount = 0U;
 8000d14:	3202      	adds	r2, #2
  hspi->RxXferSize  = 0U;
 8000d16:	8793      	strh	r3, [r2, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 8000d18:	87d3      	strh	r3, [r2, #62]	; 0x3e
  hspi->TxISR       = NULL;
 8000d1a:	6523      	str	r3, [r4, #80]	; 0x50
  hspi->RxISR       = NULL;
 8000d1c:	64e3      	str	r3, [r4, #76]	; 0x4c
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8000d1e:	2380      	movs	r3, #128	; 0x80
 8000d20:	68a2      	ldr	r2, [r4, #8]
 8000d22:	021b      	lsls	r3, r3, #8
 8000d24:	429a      	cmp	r2, r3
 8000d26:	d105      	bne.n	8000d34 <HAL_SPI_Transmit+0x7e>
    SPI_1LINE_TX(hspi);
 8000d28:	2380      	movs	r3, #128	; 0x80
 8000d2a:	6822      	ldr	r2, [r4, #0]
 8000d2c:	01db      	lsls	r3, r3, #7
 8000d2e:	6811      	ldr	r1, [r2, #0]
 8000d30:	430b      	orrs	r3, r1
 8000d32:	6013      	str	r3, [r2, #0]
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8000d34:	2240      	movs	r2, #64	; 0x40
 8000d36:	6823      	ldr	r3, [r4, #0]
 8000d38:	6819      	ldr	r1, [r3, #0]
 8000d3a:	4211      	tst	r1, r2
 8000d3c:	d102      	bne.n	8000d44 <HAL_SPI_Transmit+0x8e>
    __HAL_SPI_ENABLE(hspi);
 8000d3e:	6819      	ldr	r1, [r3, #0]
 8000d40:	430a      	orrs	r2, r1
 8000d42:	601a      	str	r2, [r3, #0]
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8000d44:	21e0      	movs	r1, #224	; 0xe0
 8000d46:	68e0      	ldr	r0, [r4, #12]
 8000d48:	00c9      	lsls	r1, r1, #3
 8000d4a:	6862      	ldr	r2, [r4, #4]
 8000d4c:	4288      	cmp	r0, r1
 8000d4e:	d947      	bls.n	8000de0 <HAL_SPI_Transmit+0x12a>
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (hspi->TxXferCount == 0x01U))
 8000d50:	2a00      	cmp	r2, #0
 8000d52:	d002      	beq.n	8000d5a <HAL_SPI_Transmit+0xa4>
 8000d54:	8fe2      	ldrh	r2, [r4, #62]	; 0x3e
 8000d56:	2a01      	cmp	r2, #1
 8000d58:	d106      	bne.n	8000d68 <HAL_SPI_Transmit+0xb2>
      hspi->Instance->DR = *((uint16_t *)pData);
 8000d5a:	882a      	ldrh	r2, [r5, #0]
      pData += sizeof(uint16_t);
 8000d5c:	3502      	adds	r5, #2
      hspi->Instance->DR = *((uint16_t *)pData);
 8000d5e:	60da      	str	r2, [r3, #12]
      hspi->TxXferCount--;
 8000d60:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 8000d62:	3b01      	subs	r3, #1
 8000d64:	b29b      	uxth	r3, r3
 8000d66:	87e3      	strh	r3, [r4, #62]	; 0x3e
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8000d68:	2602      	movs	r6, #2
    while (hspi->TxXferCount > 0U)
 8000d6a:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 8000d6c:	2b00      	cmp	r3, #0
 8000d6e:	d116      	bne.n	8000d9e <HAL_SPI_Transmit+0xe8>
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8000d70:	9a00      	ldr	r2, [sp, #0]
 8000d72:	0039      	movs	r1, r7
 8000d74:	0020      	movs	r0, r4
 8000d76:	f7ff ff3e 	bl	8000bf6 <SPI_EndRxTxTransaction>
 8000d7a:	2800      	cmp	r0, #0
 8000d7c:	d000      	beq.n	8000d80 <HAL_SPI_Transmit+0xca>
 8000d7e:	e06c      	b.n	8000e5a <HAL_SPI_Transmit+0x1a4>
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8000d80:	68a3      	ldr	r3, [r4, #8]
 8000d82:	2b00      	cmp	r3, #0
 8000d84:	d106      	bne.n	8000d94 <HAL_SPI_Transmit+0xde>
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8000d86:	9305      	str	r3, [sp, #20]
 8000d88:	6823      	ldr	r3, [r4, #0]
 8000d8a:	68da      	ldr	r2, [r3, #12]
 8000d8c:	9205      	str	r2, [sp, #20]
 8000d8e:	689b      	ldr	r3, [r3, #8]
 8000d90:	9305      	str	r3, [sp, #20]
 8000d92:	9b05      	ldr	r3, [sp, #20]
  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8000d94:	6e26      	ldr	r6, [r4, #96]	; 0x60
 8000d96:	1e73      	subs	r3, r6, #1
 8000d98:	419e      	sbcs	r6, r3
    errorcode = HAL_BUSY;
 8000d9a:	b2f6      	uxtb	r6, r6
 8000d9c:	e00e      	b.n	8000dbc <HAL_SPI_Transmit+0x106>
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8000d9e:	6823      	ldr	r3, [r4, #0]
 8000da0:	689a      	ldr	r2, [r3, #8]
 8000da2:	4232      	tst	r2, r6
 8000da4:	d007      	beq.n	8000db6 <HAL_SPI_Transmit+0x100>
        hspi->Instance->DR = *((uint16_t *)pData);
 8000da6:	882a      	ldrh	r2, [r5, #0]
        pData += sizeof(uint16_t);
 8000da8:	3502      	adds	r5, #2
        hspi->Instance->DR = *((uint16_t *)pData);
 8000daa:	60da      	str	r2, [r3, #12]
        hspi->TxXferCount--;
 8000dac:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 8000dae:	3b01      	subs	r3, #1
 8000db0:	b29b      	uxth	r3, r3
 8000db2:	87e3      	strh	r3, [r4, #62]	; 0x3e
 8000db4:	e7d9      	b.n	8000d6a <HAL_SPI_Transmit+0xb4>
        if ((Timeout == 0U) || ((Timeout != HAL_MAX_DELAY) && ((HAL_GetTick() - tickstart) >=  Timeout)))
 8000db6:	2f00      	cmp	r7, #0
 8000db8:	d109      	bne.n	8000dce <HAL_SPI_Transmit+0x118>
          errorcode = HAL_TIMEOUT;
 8000dba:	2603      	movs	r6, #3
  hspi->State = HAL_SPI_STATE_READY;
 8000dbc:	2301      	movs	r3, #1
 8000dbe:	9a03      	ldr	r2, [sp, #12]
 8000dc0:	7013      	strb	r3, [r2, #0]
  __HAL_UNLOCK(hspi);
 8000dc2:	2300      	movs	r3, #0
 8000dc4:	9a02      	ldr	r2, [sp, #8]
 8000dc6:	7013      	strb	r3, [r2, #0]
}
 8000dc8:	0030      	movs	r0, r6
 8000dca:	b007      	add	sp, #28
 8000dcc:	bdf0      	pop	{r4, r5, r6, r7, pc}
        if ((Timeout == 0U) || ((Timeout != HAL_MAX_DELAY) && ((HAL_GetTick() - tickstart) >=  Timeout)))
 8000dce:	1c7b      	adds	r3, r7, #1
 8000dd0:	d0cb      	beq.n	8000d6a <HAL_SPI_Transmit+0xb4>
 8000dd2:	f7ff fa57 	bl	8000284 <HAL_GetTick>
 8000dd6:	9b00      	ldr	r3, [sp, #0]
 8000dd8:	1ac0      	subs	r0, r0, r3
 8000dda:	4287      	cmp	r7, r0
 8000ddc:	d8c5      	bhi.n	8000d6a <HAL_SPI_Transmit+0xb4>
 8000dde:	e7ec      	b.n	8000dba <HAL_SPI_Transmit+0x104>
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (hspi->TxXferCount == 0x01U))
 8000de0:	2a00      	cmp	r2, #0
 8000de2:	d002      	beq.n	8000dea <HAL_SPI_Transmit+0x134>
 8000de4:	8fe2      	ldrh	r2, [r4, #62]	; 0x3e
 8000de6:	2a01      	cmp	r2, #1
 8000de8:	d109      	bne.n	8000dfe <HAL_SPI_Transmit+0x148>
      if (hspi->TxXferCount > 1U)
 8000dea:	8fe2      	ldrh	r2, [r4, #62]	; 0x3e
 8000dec:	2a01      	cmp	r2, #1
 8000dee:	d919      	bls.n	8000e24 <HAL_SPI_Transmit+0x16e>
        hspi->Instance->DR = *((uint16_t *)pData);
 8000df0:	882a      	ldrh	r2, [r5, #0]
        pData += sizeof(uint16_t);
 8000df2:	3502      	adds	r5, #2
        hspi->Instance->DR = *((uint16_t *)pData);
 8000df4:	60da      	str	r2, [r3, #12]
        hspi->TxXferCount -= 2U;
 8000df6:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 8000df8:	3b02      	subs	r3, #2
 8000dfa:	b29b      	uxth	r3, r3
 8000dfc:	87e3      	strh	r3, [r4, #62]	; 0x3e
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8000dfe:	2602      	movs	r6, #2
    while (hspi->TxXferCount > 0U)
 8000e00:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 8000e02:	2b00      	cmp	r3, #0
 8000e04:	d0b4      	beq.n	8000d70 <HAL_SPI_Transmit+0xba>
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8000e06:	6823      	ldr	r3, [r4, #0]
 8000e08:	689a      	ldr	r2, [r3, #8]
 8000e0a:	4232      	tst	r2, r6
 8000e0c:	d01a      	beq.n	8000e44 <HAL_SPI_Transmit+0x18e>
        if (hspi->TxXferCount > 1U)
 8000e0e:	8fe2      	ldrh	r2, [r4, #62]	; 0x3e
 8000e10:	2a01      	cmp	r2, #1
 8000e12:	d90f      	bls.n	8000e34 <HAL_SPI_Transmit+0x17e>
          hspi->Instance->DR = *((uint16_t *)pData);
 8000e14:	882a      	ldrh	r2, [r5, #0]
          pData += sizeof(uint16_t);
 8000e16:	3502      	adds	r5, #2
          hspi->Instance->DR = *((uint16_t *)pData);
 8000e18:	60da      	str	r2, [r3, #12]
          hspi->TxXferCount -= 2U;
 8000e1a:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 8000e1c:	3b02      	subs	r3, #2
 8000e1e:	b29b      	uxth	r3, r3
 8000e20:	87e3      	strh	r3, [r4, #62]	; 0x3e
 8000e22:	e7ed      	b.n	8000e00 <HAL_SPI_Transmit+0x14a>
        *((__IO uint8_t *)&hspi->Instance->DR) = (*pData++);
 8000e24:	782a      	ldrb	r2, [r5, #0]
 8000e26:	3501      	adds	r5, #1
 8000e28:	731a      	strb	r2, [r3, #12]
        hspi->TxXferCount--;
 8000e2a:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 8000e2c:	3b01      	subs	r3, #1
 8000e2e:	b29b      	uxth	r3, r3
 8000e30:	87e3      	strh	r3, [r4, #62]	; 0x3e
 8000e32:	e7e4      	b.n	8000dfe <HAL_SPI_Transmit+0x148>
          *((__IO uint8_t *)&hspi->Instance->DR) = (*pData++);
 8000e34:	782a      	ldrb	r2, [r5, #0]
 8000e36:	3501      	adds	r5, #1
 8000e38:	731a      	strb	r2, [r3, #12]
          hspi->TxXferCount--;
 8000e3a:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 8000e3c:	3b01      	subs	r3, #1
 8000e3e:	b29b      	uxth	r3, r3
 8000e40:	87e3      	strh	r3, [r4, #62]	; 0x3e
 8000e42:	e7dd      	b.n	8000e00 <HAL_SPI_Transmit+0x14a>
        if ((Timeout == 0U) || ((Timeout != HAL_MAX_DELAY) && ((HAL_GetTick() - tickstart) >=  Timeout)))
 8000e44:	2f00      	cmp	r7, #0
 8000e46:	d0b8      	beq.n	8000dba <HAL_SPI_Transmit+0x104>
 8000e48:	1c7b      	adds	r3, r7, #1
 8000e4a:	d0d9      	beq.n	8000e00 <HAL_SPI_Transmit+0x14a>
 8000e4c:	f7ff fa1a 	bl	8000284 <HAL_GetTick>
 8000e50:	9b00      	ldr	r3, [sp, #0]
 8000e52:	1ac0      	subs	r0, r0, r3
 8000e54:	4287      	cmp	r7, r0
 8000e56:	d8d3      	bhi.n	8000e00 <HAL_SPI_Transmit+0x14a>
 8000e58:	e7af      	b.n	8000dba <HAL_SPI_Transmit+0x104>
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8000e5a:	2320      	movs	r3, #32
 8000e5c:	6623      	str	r3, [r4, #96]	; 0x60
 8000e5e:	e78f      	b.n	8000d80 <HAL_SPI_Transmit+0xca>

08000e60 <HAL_SPI_TransmitReceive>:
{
 8000e60:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8000e62:	001f      	movs	r7, r3
  __HAL_LOCK(hspi);
 8000e64:	0003      	movs	r3, r0
{
 8000e66:	9200      	str	r2, [sp, #0]
  __HAL_LOCK(hspi);
 8000e68:	335c      	adds	r3, #92	; 0x5c
 8000e6a:	781a      	ldrb	r2, [r3, #0]
{
 8000e6c:	0004      	movs	r4, r0
 8000e6e:	000d      	movs	r5, r1
  __HAL_LOCK(hspi);
 8000e70:	2602      	movs	r6, #2
 8000e72:	2a01      	cmp	r2, #1
 8000e74:	d100      	bne.n	8000e78 <HAL_SPI_TransmitReceive+0x18>
 8000e76:	e0ae      	b.n	8000fd6 <HAL_SPI_TransmitReceive+0x176>
 8000e78:	2201      	movs	r2, #1
 8000e7a:	701a      	strb	r2, [r3, #0]
  tickstart = HAL_GetTick();
 8000e7c:	f7ff fa02 	bl	8000284 <HAL_GetTick>
  tmp  = hspi->State;
 8000e80:	0023      	movs	r3, r4
  tickstart = HAL_GetTick();
 8000e82:	9001      	str	r0, [sp, #4]
  tmp  = hspi->State;
 8000e84:	335d      	adds	r3, #93	; 0x5d
 8000e86:	781b      	ldrb	r3, [r3, #0]
  tmp1 = hspi->Init.Mode;
 8000e88:	6861      	ldr	r1, [r4, #4]
  tmp  = hspi->State;
 8000e8a:	b2db      	uxtb	r3, r3
  if (!((tmp == HAL_SPI_STATE_READY) || \
 8000e8c:	2b01      	cmp	r3, #1
 8000e8e:	d00b      	beq.n	8000ea8 <HAL_SPI_TransmitReceive+0x48>
 8000e90:	2282      	movs	r2, #130	; 0x82
 8000e92:	0052      	lsls	r2, r2, #1
 8000e94:	4291      	cmp	r1, r2
 8000e96:	d000      	beq.n	8000e9a <HAL_SPI_TransmitReceive+0x3a>
 8000e98:	e096      	b.n	8000fc8 <HAL_SPI_TransmitReceive+0x168>
        ((tmp1 == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp == HAL_SPI_STATE_BUSY_RX))))
 8000e9a:	68a2      	ldr	r2, [r4, #8]
 8000e9c:	2a00      	cmp	r2, #0
 8000e9e:	d000      	beq.n	8000ea2 <HAL_SPI_TransmitReceive+0x42>
 8000ea0:	e092      	b.n	8000fc8 <HAL_SPI_TransmitReceive+0x168>
 8000ea2:	2b04      	cmp	r3, #4
 8000ea4:	d000      	beq.n	8000ea8 <HAL_SPI_TransmitReceive+0x48>
 8000ea6:	e08f      	b.n	8000fc8 <HAL_SPI_TransmitReceive+0x168>
    errorcode = HAL_ERROR;
 8000ea8:	2601      	movs	r6, #1
  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8000eaa:	2d00      	cmp	r5, #0
 8000eac:	d100      	bne.n	8000eb0 <HAL_SPI_TransmitReceive+0x50>
 8000eae:	e08b      	b.n	8000fc8 <HAL_SPI_TransmitReceive+0x168>
 8000eb0:	9b00      	ldr	r3, [sp, #0]
 8000eb2:	2b00      	cmp	r3, #0
 8000eb4:	d100      	bne.n	8000eb8 <HAL_SPI_TransmitReceive+0x58>
 8000eb6:	e087      	b.n	8000fc8 <HAL_SPI_TransmitReceive+0x168>
 8000eb8:	2f00      	cmp	r7, #0
 8000eba:	d100      	bne.n	8000ebe <HAL_SPI_TransmitReceive+0x5e>
 8000ebc:	e084      	b.n	8000fc8 <HAL_SPI_TransmitReceive+0x168>
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8000ebe:	0023      	movs	r3, r4
 8000ec0:	335d      	adds	r3, #93	; 0x5d
 8000ec2:	781a      	ldrb	r2, [r3, #0]
 8000ec4:	2a04      	cmp	r2, #4
 8000ec6:	d001      	beq.n	8000ecc <HAL_SPI_TransmitReceive+0x6c>
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8000ec8:	2205      	movs	r2, #5
 8000eca:	701a      	strb	r2, [r3, #0]
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8000ecc:	9a00      	ldr	r2, [sp, #0]
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8000ece:	2300      	movs	r3, #0
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8000ed0:	6422      	str	r2, [r4, #64]	; 0x40
  hspi->RxXferCount = Size;
 8000ed2:	0022      	movs	r2, r4
  if ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) || (hspi->RxXferCount > 1U))
 8000ed4:	26e0      	movs	r6, #224	; 0xe0
  hspi->RxXferSize  = Size;
 8000ed6:	1da0      	adds	r0, r4, #6
  hspi->RxXferCount = Size;
 8000ed8:	3208      	adds	r2, #8
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8000eda:	6623      	str	r3, [r4, #96]	; 0x60
  hspi->RxXferCount = Size;
 8000edc:	87d7      	strh	r7, [r2, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 8000ede:	87c7      	strh	r7, [r0, #62]	; 0x3e
  if ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) || (hspi->RxXferCount > 1U))
 8000ee0:	68e0      	ldr	r0, [r4, #12]
  hspi->RxISR       = NULL;
 8000ee2:	64e3      	str	r3, [r4, #76]	; 0x4c
  hspi->TxISR       = NULL;
 8000ee4:	6523      	str	r3, [r4, #80]	; 0x50
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8000ee6:	63a5      	str	r5, [r4, #56]	; 0x38
  hspi->TxXferCount = Size;
 8000ee8:	87e7      	strh	r7, [r4, #62]	; 0x3e
  hspi->TxXferSize  = Size;
 8000eea:	87a7      	strh	r7, [r4, #60]	; 0x3c
  if ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) || (hspi->RxXferCount > 1U))
 8000eec:	00f6      	lsls	r6, r6, #3
 8000eee:	6823      	ldr	r3, [r4, #0]
 8000ef0:	42b0      	cmp	r0, r6
 8000ef2:	d802      	bhi.n	8000efa <HAL_SPI_TransmitReceive+0x9a>
 8000ef4:	8fd2      	ldrh	r2, [r2, #62]	; 0x3e
 8000ef6:	2a01      	cmp	r2, #1
 8000ef8:	d931      	bls.n	8000f5e <HAL_SPI_TransmitReceive+0xfe>
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8000efa:	685a      	ldr	r2, [r3, #4]
 8000efc:	4e71      	ldr	r6, [pc, #452]	; (80010c4 <HAL_SPI_TransmitReceive+0x264>)
 8000efe:	4032      	ands	r2, r6
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8000f00:	605a      	str	r2, [r3, #4]
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8000f02:	2240      	movs	r2, #64	; 0x40
 8000f04:	6823      	ldr	r3, [r4, #0]
 8000f06:	681e      	ldr	r6, [r3, #0]
 8000f08:	4216      	tst	r6, r2
 8000f0a:	d102      	bne.n	8000f12 <HAL_SPI_TransmitReceive+0xb2>
    __HAL_SPI_ENABLE(hspi);
 8000f0c:	681e      	ldr	r6, [r3, #0]
 8000f0e:	4332      	orrs	r2, r6
 8000f10:	601a      	str	r2, [r3, #0]
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8000f12:	22e0      	movs	r2, #224	; 0xe0
 8000f14:	0026      	movs	r6, r4
 8000f16:	00d2      	lsls	r2, r2, #3
 8000f18:	3608      	adds	r6, #8
 8000f1a:	4290      	cmp	r0, r2
 8000f1c:	d95d      	bls.n	8000fda <HAL_SPI_TransmitReceive+0x17a>
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (hspi->TxXferCount == 0x01U))
 8000f1e:	2900      	cmp	r1, #0
 8000f20:	d002      	beq.n	8000f28 <HAL_SPI_TransmitReceive+0xc8>
 8000f22:	8fe2      	ldrh	r2, [r4, #62]	; 0x3e
 8000f24:	2a01      	cmp	r2, #1
 8000f26:	d106      	bne.n	8000f36 <HAL_SPI_TransmitReceive+0xd6>
      hspi->Instance->DR = *((uint16_t *)pTxData);
 8000f28:	882a      	ldrh	r2, [r5, #0]
      pTxData += sizeof(uint16_t);
 8000f2a:	3502      	adds	r5, #2
      hspi->Instance->DR = *((uint16_t *)pTxData);
 8000f2c:	60da      	str	r2, [r3, #12]
      hspi->TxXferCount--;
 8000f2e:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 8000f30:	3b01      	subs	r3, #1
 8000f32:	b29b      	uxth	r3, r3
 8000f34:	87e3      	strh	r3, [r4, #62]	; 0x3e
        txallowed = 1U;
 8000f36:	2701      	movs	r7, #1
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8000f38:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 8000f3a:	2b00      	cmp	r3, #0
 8000f3c:	d114      	bne.n	8000f68 <HAL_SPI_TransmitReceive+0x108>
 8000f3e:	8ff3      	ldrh	r3, [r6, #62]	; 0x3e
 8000f40:	2b00      	cmp	r3, #0
 8000f42:	d111      	bne.n	8000f68 <HAL_SPI_TransmitReceive+0x108>
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8000f44:	9a01      	ldr	r2, [sp, #4]
 8000f46:	9908      	ldr	r1, [sp, #32]
 8000f48:	0020      	movs	r0, r4
 8000f4a:	f7ff fe54 	bl	8000bf6 <SPI_EndRxTxTransaction>
 8000f4e:	2800      	cmp	r0, #0
 8000f50:	d000      	beq.n	8000f54 <HAL_SPI_TransmitReceive+0xf4>
 8000f52:	e0b3      	b.n	80010bc <HAL_SPI_TransmitReceive+0x25c>
  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8000f54:	6e26      	ldr	r6, [r4, #96]	; 0x60
 8000f56:	1e73      	subs	r3, r6, #1
 8000f58:	419e      	sbcs	r6, r3
    errorcode = HAL_BUSY;
 8000f5a:	b2f6      	uxtb	r6, r6
 8000f5c:	e034      	b.n	8000fc8 <HAL_SPI_TransmitReceive+0x168>
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8000f5e:	2280      	movs	r2, #128	; 0x80
 8000f60:	685e      	ldr	r6, [r3, #4]
 8000f62:	0152      	lsls	r2, r2, #5
 8000f64:	4332      	orrs	r2, r6
 8000f66:	e7cb      	b.n	8000f00 <HAL_SPI_TransmitReceive+0xa0>
      if (txallowed && (hspi->TxXferCount > 0U) && (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)))
 8000f68:	2f00      	cmp	r7, #0
 8000f6a:	d00f      	beq.n	8000f8c <HAL_SPI_TransmitReceive+0x12c>
 8000f6c:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 8000f6e:	2b00      	cmp	r3, #0
 8000f70:	d00c      	beq.n	8000f8c <HAL_SPI_TransmitReceive+0x12c>
 8000f72:	2102      	movs	r1, #2
 8000f74:	6823      	ldr	r3, [r4, #0]
 8000f76:	689a      	ldr	r2, [r3, #8]
 8000f78:	420a      	tst	r2, r1
 8000f7a:	d007      	beq.n	8000f8c <HAL_SPI_TransmitReceive+0x12c>
        txallowed = 0U;
 8000f7c:	2700      	movs	r7, #0
        hspi->Instance->DR = *((uint16_t *)pTxData);
 8000f7e:	882a      	ldrh	r2, [r5, #0]
        pTxData += sizeof(uint16_t);
 8000f80:	186d      	adds	r5, r5, r1
        hspi->Instance->DR = *((uint16_t *)pTxData);
 8000f82:	60da      	str	r2, [r3, #12]
        hspi->TxXferCount--;
 8000f84:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 8000f86:	3b01      	subs	r3, #1
 8000f88:	b29b      	uxth	r3, r3
 8000f8a:	87e3      	strh	r3, [r4, #62]	; 0x3e
      if ((hspi->RxXferCount > 0U) && (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)))
 8000f8c:	8ff3      	ldrh	r3, [r6, #62]	; 0x3e
 8000f8e:	2b00      	cmp	r3, #0
 8000f90:	d00f      	beq.n	8000fb2 <HAL_SPI_TransmitReceive+0x152>
 8000f92:	2101      	movs	r1, #1
 8000f94:	6823      	ldr	r3, [r4, #0]
 8000f96:	689a      	ldr	r2, [r3, #8]
 8000f98:	420a      	tst	r2, r1
 8000f9a:	d00a      	beq.n	8000fb2 <HAL_SPI_TransmitReceive+0x152>
        *((uint16_t *)pRxData) = hspi->Instance->DR;
 8000f9c:	68db      	ldr	r3, [r3, #12]
 8000f9e:	9a00      	ldr	r2, [sp, #0]
        txallowed = 1U;
 8000fa0:	000f      	movs	r7, r1
        *((uint16_t *)pRxData) = hspi->Instance->DR;
 8000fa2:	8013      	strh	r3, [r2, #0]
        pRxData += sizeof(uint16_t);
 8000fa4:	0013      	movs	r3, r2
 8000fa6:	3302      	adds	r3, #2
 8000fa8:	9300      	str	r3, [sp, #0]
        hspi->RxXferCount--;
 8000faa:	8ff3      	ldrh	r3, [r6, #62]	; 0x3e
 8000fac:	3b01      	subs	r3, #1
 8000fae:	b29b      	uxth	r3, r3
 8000fb0:	87f3      	strh	r3, [r6, #62]	; 0x3e
      if ((Timeout != HAL_MAX_DELAY) && ((HAL_GetTick() - tickstart) >=  Timeout))
 8000fb2:	9b08      	ldr	r3, [sp, #32]
 8000fb4:	3301      	adds	r3, #1
 8000fb6:	d0bf      	beq.n	8000f38 <HAL_SPI_TransmitReceive+0xd8>
 8000fb8:	f7ff f964 	bl	8000284 <HAL_GetTick>
 8000fbc:	9b01      	ldr	r3, [sp, #4]
 8000fbe:	1ac0      	subs	r0, r0, r3
 8000fc0:	9b08      	ldr	r3, [sp, #32]
 8000fc2:	4283      	cmp	r3, r0
 8000fc4:	d8b8      	bhi.n	8000f38 <HAL_SPI_TransmitReceive+0xd8>
        errorcode = HAL_TIMEOUT;
 8000fc6:	2603      	movs	r6, #3
  hspi->State = HAL_SPI_STATE_READY;
 8000fc8:	0023      	movs	r3, r4
 8000fca:	2201      	movs	r2, #1
 8000fcc:	335d      	adds	r3, #93	; 0x5d
 8000fce:	701a      	strb	r2, [r3, #0]
  __HAL_UNLOCK(hspi);
 8000fd0:	2300      	movs	r3, #0
 8000fd2:	345c      	adds	r4, #92	; 0x5c
 8000fd4:	7023      	strb	r3, [r4, #0]
}
 8000fd6:	0030      	movs	r0, r6
 8000fd8:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (hspi->TxXferCount == 0x01U))
 8000fda:	2900      	cmp	r1, #0
 8000fdc:	d002      	beq.n	8000fe4 <HAL_SPI_TransmitReceive+0x184>
 8000fde:	8fe2      	ldrh	r2, [r4, #62]	; 0x3e
 8000fe0:	2a01      	cmp	r2, #1
 8000fe2:	d109      	bne.n	8000ff8 <HAL_SPI_TransmitReceive+0x198>
      if (hspi->TxXferCount > 1U)
 8000fe4:	8fe2      	ldrh	r2, [r4, #62]	; 0x3e
 8000fe6:	2a01      	cmp	r2, #1
 8000fe8:	d94c      	bls.n	8001084 <HAL_SPI_TransmitReceive+0x224>
        hspi->Instance->DR = *((uint16_t *)pTxData);
 8000fea:	882a      	ldrh	r2, [r5, #0]
        pTxData += sizeof(uint16_t);
 8000fec:	3502      	adds	r5, #2
        hspi->Instance->DR = *((uint16_t *)pTxData);
 8000fee:	60da      	str	r2, [r3, #12]
        hspi->TxXferCount -= 2U;
 8000ff0:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 8000ff2:	3b02      	subs	r3, #2
 8000ff4:	b29b      	uxth	r3, r3
 8000ff6:	87e3      	strh	r3, [r4, #62]	; 0x3e
        txallowed = 1U;
 8000ff8:	2701      	movs	r7, #1
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8000ffa:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 8000ffc:	2b00      	cmp	r3, #0
 8000ffe:	d103      	bne.n	8001008 <HAL_SPI_TransmitReceive+0x1a8>
 8001000:	8ff3      	ldrh	r3, [r6, #62]	; 0x3e
 8001002:	2b00      	cmp	r3, #0
 8001004:	d100      	bne.n	8001008 <HAL_SPI_TransmitReceive+0x1a8>
 8001006:	e79d      	b.n	8000f44 <HAL_SPI_TransmitReceive+0xe4>
      if (txallowed && (hspi->TxXferCount > 0U) && (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)))
 8001008:	2f00      	cmp	r7, #0
 800100a:	d012      	beq.n	8001032 <HAL_SPI_TransmitReceive+0x1d2>
 800100c:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 800100e:	2b00      	cmp	r3, #0
 8001010:	d00f      	beq.n	8001032 <HAL_SPI_TransmitReceive+0x1d2>
 8001012:	2102      	movs	r1, #2
 8001014:	6823      	ldr	r3, [r4, #0]
 8001016:	689a      	ldr	r2, [r3, #8]
 8001018:	420a      	tst	r2, r1
 800101a:	d00a      	beq.n	8001032 <HAL_SPI_TransmitReceive+0x1d2>
        if (hspi->TxXferCount > 1U)
 800101c:	8fe2      	ldrh	r2, [r4, #62]	; 0x3e
 800101e:	2a01      	cmp	r2, #1
 8001020:	d938      	bls.n	8001094 <HAL_SPI_TransmitReceive+0x234>
          hspi->Instance->DR = *((uint16_t *)pTxData);
 8001022:	882a      	ldrh	r2, [r5, #0]
          pTxData += sizeof(uint16_t);
 8001024:	186d      	adds	r5, r5, r1
          hspi->Instance->DR = *((uint16_t *)pTxData);
 8001026:	60da      	str	r2, [r3, #12]
          hspi->TxXferCount -= 2U;
 8001028:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 800102a:	3b02      	subs	r3, #2
 800102c:	b29b      	uxth	r3, r3
 800102e:	87e3      	strh	r3, [r4, #62]	; 0x3e
        txallowed = 0U;
 8001030:	2700      	movs	r7, #0
      if ((hspi->RxXferCount > 0U) && (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)))
 8001032:	8ff3      	ldrh	r3, [r6, #62]	; 0x3e
 8001034:	2b00      	cmp	r3, #0
 8001036:	d01a      	beq.n	800106e <HAL_SPI_TransmitReceive+0x20e>
 8001038:	2101      	movs	r1, #1
 800103a:	6823      	ldr	r3, [r4, #0]
 800103c:	689a      	ldr	r2, [r3, #8]
 800103e:	420a      	tst	r2, r1
 8001040:	d015      	beq.n	800106e <HAL_SPI_TransmitReceive+0x20e>
        if (hspi->RxXferCount > 1U)
 8001042:	8ff2      	ldrh	r2, [r6, #62]	; 0x3e
 8001044:	428a      	cmp	r2, r1
 8001046:	d92d      	bls.n	80010a4 <HAL_SPI_TransmitReceive+0x244>
          *((uint16_t *)pRxData) = hspi->Instance->DR;
 8001048:	68da      	ldr	r2, [r3, #12]
 800104a:	9900      	ldr	r1, [sp, #0]
        txallowed = 1U;
 800104c:	2701      	movs	r7, #1
          *((uint16_t *)pRxData) = hspi->Instance->DR;
 800104e:	800a      	strh	r2, [r1, #0]
          pRxData += sizeof(uint16_t);
 8001050:	000a      	movs	r2, r1
 8001052:	3202      	adds	r2, #2
 8001054:	9200      	str	r2, [sp, #0]
          hspi->RxXferCount -= 2U;
 8001056:	8ff2      	ldrh	r2, [r6, #62]	; 0x3e
 8001058:	3a02      	subs	r2, #2
 800105a:	b292      	uxth	r2, r2
 800105c:	87f2      	strh	r2, [r6, #62]	; 0x3e
          if (hspi->RxXferCount <= 1U)
 800105e:	8ff2      	ldrh	r2, [r6, #62]	; 0x3e
 8001060:	42ba      	cmp	r2, r7
 8001062:	d804      	bhi.n	800106e <HAL_SPI_TransmitReceive+0x20e>
            SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8001064:	2280      	movs	r2, #128	; 0x80
 8001066:	6859      	ldr	r1, [r3, #4]
 8001068:	0152      	lsls	r2, r2, #5
 800106a:	430a      	orrs	r2, r1
 800106c:	605a      	str	r2, [r3, #4]
      if ((Timeout != HAL_MAX_DELAY) && ((HAL_GetTick() - tickstart) >=  Timeout))
 800106e:	9b08      	ldr	r3, [sp, #32]
 8001070:	3301      	adds	r3, #1
 8001072:	d0c2      	beq.n	8000ffa <HAL_SPI_TransmitReceive+0x19a>
 8001074:	f7ff f906 	bl	8000284 <HAL_GetTick>
 8001078:	9b01      	ldr	r3, [sp, #4]
 800107a:	1ac0      	subs	r0, r0, r3
 800107c:	9b08      	ldr	r3, [sp, #32]
 800107e:	4283      	cmp	r3, r0
 8001080:	d8bb      	bhi.n	8000ffa <HAL_SPI_TransmitReceive+0x19a>
 8001082:	e7a0      	b.n	8000fc6 <HAL_SPI_TransmitReceive+0x166>
        *(__IO uint8_t *)&hspi->Instance->DR = (*pTxData++);
 8001084:	782a      	ldrb	r2, [r5, #0]
 8001086:	3501      	adds	r5, #1
 8001088:	731a      	strb	r2, [r3, #12]
        hspi->TxXferCount--;
 800108a:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 800108c:	3b01      	subs	r3, #1
 800108e:	b29b      	uxth	r3, r3
 8001090:	87e3      	strh	r3, [r4, #62]	; 0x3e
 8001092:	e7b1      	b.n	8000ff8 <HAL_SPI_TransmitReceive+0x198>
          *(__IO uint8_t *)&hspi->Instance->DR = (*pTxData++);
 8001094:	782a      	ldrb	r2, [r5, #0]
 8001096:	3501      	adds	r5, #1
 8001098:	731a      	strb	r2, [r3, #12]
          hspi->TxXferCount--;
 800109a:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 800109c:	3b01      	subs	r3, #1
 800109e:	b29b      	uxth	r3, r3
 80010a0:	87e3      	strh	r3, [r4, #62]	; 0x3e
 80010a2:	e7c5      	b.n	8001030 <HAL_SPI_TransmitReceive+0x1d0>
          (*(uint8_t *)pRxData++) = *(__IO uint8_t *)&hspi->Instance->DR;
 80010a4:	7b1b      	ldrb	r3, [r3, #12]
 80010a6:	9a00      	ldr	r2, [sp, #0]
        txallowed = 1U;
 80010a8:	2701      	movs	r7, #1
          (*(uint8_t *)pRxData++) = *(__IO uint8_t *)&hspi->Instance->DR;
 80010aa:	7013      	strb	r3, [r2, #0]
          hspi->RxXferCount--;
 80010ac:	8ff3      	ldrh	r3, [r6, #62]	; 0x3e
 80010ae:	3b01      	subs	r3, #1
 80010b0:	b29b      	uxth	r3, r3
 80010b2:	87f3      	strh	r3, [r6, #62]	; 0x3e
          (*(uint8_t *)pRxData++) = *(__IO uint8_t *)&hspi->Instance->DR;
 80010b4:	0013      	movs	r3, r2
 80010b6:	3301      	adds	r3, #1
 80010b8:	9300      	str	r3, [sp, #0]
 80010ba:	e7d8      	b.n	800106e <HAL_SPI_TransmitReceive+0x20e>
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80010bc:	2320      	movs	r3, #32
 80010be:	6623      	str	r3, [r4, #96]	; 0x60
 80010c0:	e748      	b.n	8000f54 <HAL_SPI_TransmitReceive+0xf4>
 80010c2:	46c0      	nop			; (mov r8, r8)
 80010c4:	ffffefff 	.word	0xffffefff

080010c8 <HAL_SPI_Receive>:
{
 80010c8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80010ca:	001f      	movs	r7, r3
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 80010cc:	2382      	movs	r3, #130	; 0x82
{
 80010ce:	b087      	sub	sp, #28
 80010d0:	9203      	str	r2, [sp, #12]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 80010d2:	6842      	ldr	r2, [r0, #4]
{
 80010d4:	0004      	movs	r4, r0
 80010d6:	000e      	movs	r6, r1
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 80010d8:	005b      	lsls	r3, r3, #1
 80010da:	429a      	cmp	r2, r3
 80010dc:	d10f      	bne.n	80010fe <HAL_SPI_Receive+0x36>
 80010de:	6883      	ldr	r3, [r0, #8]
 80010e0:	2b00      	cmp	r3, #0
 80010e2:	d10c      	bne.n	80010fe <HAL_SPI_Receive+0x36>
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 80010e4:	0003      	movs	r3, r0
 80010e6:	2204      	movs	r2, #4
 80010e8:	335d      	adds	r3, #93	; 0x5d
 80010ea:	701a      	strb	r2, [r3, #0]
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 80010ec:	9700      	str	r7, [sp, #0]
 80010ee:	9b03      	ldr	r3, [sp, #12]
 80010f0:	000a      	movs	r2, r1
 80010f2:	f7ff feb5 	bl	8000e60 <HAL_SPI_TransmitReceive>
 80010f6:	0005      	movs	r5, r0
}
 80010f8:	0028      	movs	r0, r5
 80010fa:	b007      	add	sp, #28
 80010fc:	bdf0      	pop	{r4, r5, r6, r7, pc}
  __HAL_LOCK(hspi);
 80010fe:	0023      	movs	r3, r4
 8001100:	335c      	adds	r3, #92	; 0x5c
 8001102:	9305      	str	r3, [sp, #20]
 8001104:	781b      	ldrb	r3, [r3, #0]
 8001106:	2502      	movs	r5, #2
 8001108:	2b01      	cmp	r3, #1
 800110a:	d0f5      	beq.n	80010f8 <HAL_SPI_Receive+0x30>
 800110c:	2301      	movs	r3, #1
 800110e:	9a05      	ldr	r2, [sp, #20]
 8001110:	7013      	strb	r3, [r2, #0]
  tickstart = HAL_GetTick();
 8001112:	f7ff f8b7 	bl	8000284 <HAL_GetTick>
  if (hspi->State != HAL_SPI_STATE_READY)
 8001116:	0022      	movs	r2, r4
  tickstart = HAL_GetTick();
 8001118:	9004      	str	r0, [sp, #16]
  if (hspi->State != HAL_SPI_STATE_READY)
 800111a:	325d      	adds	r2, #93	; 0x5d
 800111c:	7813      	ldrb	r3, [r2, #0]
 800111e:	b2db      	uxtb	r3, r3
 8001120:	2b01      	cmp	r3, #1
 8001122:	d15d      	bne.n	80011e0 <HAL_SPI_Receive+0x118>
    errorcode = HAL_ERROR;
 8001124:	001d      	movs	r5, r3
  if ((pData == NULL) || (Size == 0U))
 8001126:	2e00      	cmp	r6, #0
 8001128:	d05a      	beq.n	80011e0 <HAL_SPI_Receive+0x118>
 800112a:	9b03      	ldr	r3, [sp, #12]
 800112c:	2b00      	cmp	r3, #0
 800112e:	d057      	beq.n	80011e0 <HAL_SPI_Receive+0x118>
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 8001130:	2304      	movs	r3, #4
  hspi->RxXferSize  = Size;
 8001132:	4669      	mov	r1, sp
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 8001134:	7013      	strb	r3, [r2, #0]
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8001136:	2300      	movs	r3, #0
  hspi->RxXferSize  = Size;
 8001138:	8989      	ldrh	r1, [r1, #12]
 800113a:	1da2      	adds	r2, r4, #6
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800113c:	6623      	str	r3, [r4, #96]	; 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 800113e:	6426      	str	r6, [r4, #64]	; 0x40
  hspi->RxXferSize  = Size;
 8001140:	87d1      	strh	r1, [r2, #62]	; 0x3e
  hspi->RxXferCount = Size;
 8001142:	4669      	mov	r1, sp
 8001144:	8989      	ldrh	r1, [r1, #12]
 8001146:	3202      	adds	r2, #2
 8001148:	87d1      	strh	r1, [r2, #62]	; 0x3e
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800114a:	22e0      	movs	r2, #224	; 0xe0
 800114c:	68e1      	ldr	r1, [r4, #12]
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 800114e:	63a3      	str	r3, [r4, #56]	; 0x38
  hspi->TxXferSize  = 0U;
 8001150:	87a3      	strh	r3, [r4, #60]	; 0x3c
  hspi->TxXferCount = 0U;
 8001152:	87e3      	strh	r3, [r4, #62]	; 0x3e
  hspi->RxISR       = NULL;
 8001154:	64e3      	str	r3, [r4, #76]	; 0x4c
  hspi->TxISR       = NULL;
 8001156:	6523      	str	r3, [r4, #80]	; 0x50
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8001158:	00d2      	lsls	r2, r2, #3
 800115a:	6823      	ldr	r3, [r4, #0]
 800115c:	4291      	cmp	r1, r2
 800115e:	d92a      	bls.n	80011b6 <HAL_SPI_Receive+0xee>
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8001160:	685a      	ldr	r2, [r3, #4]
 8001162:	4836      	ldr	r0, [pc, #216]	; (800123c <HAL_SPI_Receive+0x174>)
 8001164:	4002      	ands	r2, r0
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8001166:	605a      	str	r2, [r3, #4]
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8001168:	2380      	movs	r3, #128	; 0x80
 800116a:	68a2      	ldr	r2, [r4, #8]
 800116c:	021b      	lsls	r3, r3, #8
 800116e:	429a      	cmp	r2, r3
 8001170:	d104      	bne.n	800117c <HAL_SPI_Receive+0xb4>
    SPI_1LINE_RX(hspi);
 8001172:	6822      	ldr	r2, [r4, #0]
 8001174:	4832      	ldr	r0, [pc, #200]	; (8001240 <HAL_SPI_Receive+0x178>)
 8001176:	6813      	ldr	r3, [r2, #0]
 8001178:	4003      	ands	r3, r0
 800117a:	6013      	str	r3, [r2, #0]
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800117c:	2340      	movs	r3, #64	; 0x40
 800117e:	6822      	ldr	r2, [r4, #0]
 8001180:	6810      	ldr	r0, [r2, #0]
 8001182:	4218      	tst	r0, r3
 8001184:	d102      	bne.n	800118c <HAL_SPI_Receive+0xc4>
    __HAL_SPI_ENABLE(hspi);
 8001186:	6810      	ldr	r0, [r2, #0]
 8001188:	4303      	orrs	r3, r0
 800118a:	6013      	str	r3, [r2, #0]
  if (hspi->Init.DataSize <= SPI_DATASIZE_8BIT)
 800118c:	23e0      	movs	r3, #224	; 0xe0
 800118e:	0025      	movs	r5, r4
 8001190:	00db      	lsls	r3, r3, #3
 8001192:	3508      	adds	r5, #8
 8001194:	4299      	cmp	r1, r3
 8001196:	d83f      	bhi.n	8001218 <HAL_SPI_Receive+0x150>
    while (hspi->RxXferCount > 0U)
 8001198:	8feb      	ldrh	r3, [r5, #62]	; 0x3e
 800119a:	2b00      	cmp	r3, #0
 800119c:	d110      	bne.n	80011c0 <HAL_SPI_Receive+0xf8>
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800119e:	9a04      	ldr	r2, [sp, #16]
 80011a0:	0039      	movs	r1, r7
 80011a2:	0020      	movs	r0, r4
 80011a4:	f7ff fd4a 	bl	8000c3c <SPI_EndRxTransaction>
 80011a8:	2800      	cmp	r0, #0
 80011aa:	d144      	bne.n	8001236 <HAL_SPI_Receive+0x16e>
  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80011ac:	6e25      	ldr	r5, [r4, #96]	; 0x60
 80011ae:	1e6b      	subs	r3, r5, #1
 80011b0:	419d      	sbcs	r5, r3
    errorcode = HAL_BUSY;
 80011b2:	b2ed      	uxtb	r5, r5
 80011b4:	e014      	b.n	80011e0 <HAL_SPI_Receive+0x118>
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 80011b6:	2280      	movs	r2, #128	; 0x80
 80011b8:	6858      	ldr	r0, [r3, #4]
 80011ba:	0152      	lsls	r2, r2, #5
 80011bc:	4302      	orrs	r2, r0
 80011be:	e7d2      	b.n	8001166 <HAL_SPI_Receive+0x9e>
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 80011c0:	2101      	movs	r1, #1
 80011c2:	6823      	ldr	r3, [r4, #0]
 80011c4:	689a      	ldr	r2, [r3, #8]
 80011c6:	420a      	tst	r2, r1
 80011c8:	d007      	beq.n	80011da <HAL_SPI_Receive+0x112>
        (* (uint8_t *)pData) = *(__IO uint8_t *)&hspi->Instance->DR;
 80011ca:	7b1b      	ldrb	r3, [r3, #12]
 80011cc:	7033      	strb	r3, [r6, #0]
        hspi->RxXferCount--;
 80011ce:	8feb      	ldrh	r3, [r5, #62]	; 0x3e
        pData += sizeof(uint8_t);
 80011d0:	1876      	adds	r6, r6, r1
        hspi->RxXferCount--;
 80011d2:	3b01      	subs	r3, #1
 80011d4:	b29b      	uxth	r3, r3
 80011d6:	87eb      	strh	r3, [r5, #62]	; 0x3e
 80011d8:	e7de      	b.n	8001198 <HAL_SPI_Receive+0xd0>
        if ((Timeout == 0U) || ((Timeout != HAL_MAX_DELAY) && ((HAL_GetTick() - tickstart) >=  Timeout)))
 80011da:	2f00      	cmp	r7, #0
 80011dc:	d107      	bne.n	80011ee <HAL_SPI_Receive+0x126>
          errorcode = HAL_TIMEOUT;
 80011de:	2503      	movs	r5, #3
  hspi->State = HAL_SPI_STATE_READY;
 80011e0:	2301      	movs	r3, #1
 80011e2:	345d      	adds	r4, #93	; 0x5d
 80011e4:	7023      	strb	r3, [r4, #0]
  __HAL_UNLOCK(hspi);
 80011e6:	2300      	movs	r3, #0
 80011e8:	9a05      	ldr	r2, [sp, #20]
 80011ea:	7013      	strb	r3, [r2, #0]
  return errorcode;
 80011ec:	e784      	b.n	80010f8 <HAL_SPI_Receive+0x30>
        if ((Timeout == 0U) || ((Timeout != HAL_MAX_DELAY) && ((HAL_GetTick() - tickstart) >=  Timeout)))
 80011ee:	1c7b      	adds	r3, r7, #1
 80011f0:	d0d2      	beq.n	8001198 <HAL_SPI_Receive+0xd0>
 80011f2:	f7ff f847 	bl	8000284 <HAL_GetTick>
 80011f6:	9b04      	ldr	r3, [sp, #16]
 80011f8:	1ac0      	subs	r0, r0, r3
 80011fa:	4287      	cmp	r7, r0
 80011fc:	d8cc      	bhi.n	8001198 <HAL_SPI_Receive+0xd0>
 80011fe:	e7ee      	b.n	80011de <HAL_SPI_Receive+0x116>
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8001200:	2101      	movs	r1, #1
 8001202:	6823      	ldr	r3, [r4, #0]
 8001204:	689a      	ldr	r2, [r3, #8]
 8001206:	420a      	tst	r2, r1
 8001208:	d00a      	beq.n	8001220 <HAL_SPI_Receive+0x158>
        *((uint16_t *)pData) = hspi->Instance->DR;
 800120a:	68db      	ldr	r3, [r3, #12]
 800120c:	8033      	strh	r3, [r6, #0]
        hspi->RxXferCount--;
 800120e:	8feb      	ldrh	r3, [r5, #62]	; 0x3e
        pData += sizeof(uint16_t);
 8001210:	3602      	adds	r6, #2
        hspi->RxXferCount--;
 8001212:	3b01      	subs	r3, #1
 8001214:	b29b      	uxth	r3, r3
 8001216:	87eb      	strh	r3, [r5, #62]	; 0x3e
    while (hspi->RxXferCount > 0U)
 8001218:	8feb      	ldrh	r3, [r5, #62]	; 0x3e
 800121a:	2b00      	cmp	r3, #0
 800121c:	d1f0      	bne.n	8001200 <HAL_SPI_Receive+0x138>
 800121e:	e7be      	b.n	800119e <HAL_SPI_Receive+0xd6>
        if ((Timeout == 0U) || ((Timeout != HAL_MAX_DELAY) && ((HAL_GetTick() - tickstart) >=  Timeout)))
 8001220:	2f00      	cmp	r7, #0
 8001222:	d0dc      	beq.n	80011de <HAL_SPI_Receive+0x116>
 8001224:	1c7b      	adds	r3, r7, #1
 8001226:	d0f7      	beq.n	8001218 <HAL_SPI_Receive+0x150>
 8001228:	f7ff f82c 	bl	8000284 <HAL_GetTick>
 800122c:	9b04      	ldr	r3, [sp, #16]
 800122e:	1ac0      	subs	r0, r0, r3
 8001230:	4287      	cmp	r7, r0
 8001232:	d8f1      	bhi.n	8001218 <HAL_SPI_Receive+0x150>
 8001234:	e7d3      	b.n	80011de <HAL_SPI_Receive+0x116>
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8001236:	2320      	movs	r3, #32
 8001238:	6623      	str	r3, [r4, #96]	; 0x60
 800123a:	e7b7      	b.n	80011ac <HAL_SPI_Receive+0xe4>
 800123c:	ffffefff 	.word	0xffffefff
 8001240:	ffffbfff 	.word	0xffffbfff

08001244 <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 8001244:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001246:	0004      	movs	r4, r0
 8001248:	000e      	movs	r6, r1
 800124a:	0015      	movs	r5, r2
 800124c:	001f      	movs	r7, r3
  /* Wait until flag is set */
  while((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800124e:	6822      	ldr	r2, [r4, #0]
 8001250:	69d3      	ldr	r3, [r2, #28]
 8001252:	4033      	ands	r3, r6
 8001254:	1b9b      	subs	r3, r3, r6
 8001256:	4259      	negs	r1, r3
 8001258:	414b      	adcs	r3, r1
 800125a:	42ab      	cmp	r3, r5
 800125c:	d001      	beq.n	8001262 <UART_WaitOnFlagUntilTimeout+0x1e>
        __HAL_UNLOCK(huart);
        return HAL_TIMEOUT;
      }
    }
  }
  return HAL_OK;
 800125e:	2000      	movs	r0, #0
 8001260:	e018      	b.n	8001294 <UART_WaitOnFlagUntilTimeout+0x50>
    if(Timeout != HAL_MAX_DELAY)
 8001262:	9b06      	ldr	r3, [sp, #24]
 8001264:	3301      	adds	r3, #1
 8001266:	d0f3      	beq.n	8001250 <UART_WaitOnFlagUntilTimeout+0xc>
      if((Timeout == 0U) || ((HAL_GetTick()-Tickstart) > Timeout))
 8001268:	9b06      	ldr	r3, [sp, #24]
 800126a:	2b00      	cmp	r3, #0
 800126c:	d113      	bne.n	8001296 <UART_WaitOnFlagUntilTimeout+0x52>
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800126e:	6823      	ldr	r3, [r4, #0]
 8001270:	490c      	ldr	r1, [pc, #48]	; (80012a4 <UART_WaitOnFlagUntilTimeout+0x60>)
 8001272:	681a      	ldr	r2, [r3, #0]
        __HAL_UNLOCK(huart);
 8001274:	2003      	movs	r0, #3
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8001276:	400a      	ands	r2, r1
 8001278:	601a      	str	r2, [r3, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800127a:	689a      	ldr	r2, [r3, #8]
 800127c:	31a3      	adds	r1, #163	; 0xa3
 800127e:	31ff      	adds	r1, #255	; 0xff
 8001280:	438a      	bics	r2, r1
 8001282:	609a      	str	r2, [r3, #8]
        huart->gState  = HAL_UART_STATE_READY;
 8001284:	0022      	movs	r2, r4
 8001286:	2320      	movs	r3, #32
 8001288:	3269      	adds	r2, #105	; 0x69
 800128a:	7013      	strb	r3, [r2, #0]
        huart->RxState = HAL_UART_STATE_READY;
 800128c:	7053      	strb	r3, [r2, #1]
        __HAL_UNLOCK(huart);
 800128e:	2300      	movs	r3, #0
 8001290:	3468      	adds	r4, #104	; 0x68
 8001292:	7023      	strb	r3, [r4, #0]
}
 8001294:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      if((Timeout == 0U) || ((HAL_GetTick()-Tickstart) > Timeout))
 8001296:	f7fe fff5 	bl	8000284 <HAL_GetTick>
 800129a:	9b06      	ldr	r3, [sp, #24]
 800129c:	1bc0      	subs	r0, r0, r7
 800129e:	4283      	cmp	r3, r0
 80012a0:	d2d5      	bcs.n	800124e <UART_WaitOnFlagUntilTimeout+0xa>
 80012a2:	e7e4      	b.n	800126e <UART_WaitOnFlagUntilTimeout+0x2a>
 80012a4:	fffffe5f 	.word	0xfffffe5f

080012a8 <HAL_UART_Transmit>:
{
 80012a8:	b5f0      	push	{r4, r5, r6, r7, lr}
  if(huart->gState == HAL_UART_STATE_READY)
 80012aa:	0007      	movs	r7, r0
{
 80012ac:	b085      	sub	sp, #20
 80012ae:	9303      	str	r3, [sp, #12]
  if(huart->gState == HAL_UART_STATE_READY)
 80012b0:	3769      	adds	r7, #105	; 0x69
 80012b2:	783b      	ldrb	r3, [r7, #0]
{
 80012b4:	0004      	movs	r4, r0
 80012b6:	000d      	movs	r5, r1
 80012b8:	0016      	movs	r6, r2
    return HAL_BUSY;
 80012ba:	2002      	movs	r0, #2
  if(huart->gState == HAL_UART_STATE_READY)
 80012bc:	2b20      	cmp	r3, #32
 80012be:	d146      	bne.n	800134e <HAL_UART_Transmit+0xa6>
      return  HAL_ERROR;
 80012c0:	3801      	subs	r0, #1
    if((pData == NULL ) || (Size == 0U))
 80012c2:	2900      	cmp	r1, #0
 80012c4:	d043      	beq.n	800134e <HAL_UART_Transmit+0xa6>
 80012c6:	2a00      	cmp	r2, #0
 80012c8:	d041      	beq.n	800134e <HAL_UART_Transmit+0xa6>
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80012ca:	2380      	movs	r3, #128	; 0x80
 80012cc:	68a2      	ldr	r2, [r4, #8]
 80012ce:	015b      	lsls	r3, r3, #5
 80012d0:	429a      	cmp	r2, r3
 80012d2:	d104      	bne.n	80012de <HAL_UART_Transmit+0x36>
 80012d4:	6923      	ldr	r3, [r4, #16]
 80012d6:	2b00      	cmp	r3, #0
 80012d8:	d101      	bne.n	80012de <HAL_UART_Transmit+0x36>
      if((((uint32_t)pData)&1U) != 0U)
 80012da:	4201      	tst	r1, r0
 80012dc:	d137      	bne.n	800134e <HAL_UART_Transmit+0xa6>
    __HAL_LOCK(huart);
 80012de:	0023      	movs	r3, r4
 80012e0:	3368      	adds	r3, #104	; 0x68
 80012e2:	781a      	ldrb	r2, [r3, #0]
    return HAL_BUSY;
 80012e4:	2002      	movs	r0, #2
    __HAL_LOCK(huart);
 80012e6:	2a01      	cmp	r2, #1
 80012e8:	d031      	beq.n	800134e <HAL_UART_Transmit+0xa6>
 80012ea:	2201      	movs	r2, #1
 80012ec:	701a      	strb	r2, [r3, #0]
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80012ee:	2300      	movs	r3, #0
 80012f0:	66e3      	str	r3, [r4, #108]	; 0x6c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80012f2:	3321      	adds	r3, #33	; 0x21
 80012f4:	703b      	strb	r3, [r7, #0]
    tickstart = HAL_GetTick();
 80012f6:	f7fe ffc5 	bl	8000284 <HAL_GetTick>
    huart->TxXferSize = Size;
 80012fa:	0023      	movs	r3, r4
 80012fc:	3350      	adds	r3, #80	; 0x50
 80012fe:	801e      	strh	r6, [r3, #0]
    huart->TxXferCount = Size;
 8001300:	805e      	strh	r6, [r3, #2]
      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8001302:	2680      	movs	r6, #128	; 0x80
    tickstart = HAL_GetTick();
 8001304:	9002      	str	r0, [sp, #8]
      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8001306:	0176      	lsls	r6, r6, #5
    while(huart->TxXferCount > 0)
 8001308:	0021      	movs	r1, r4
 800130a:	3152      	adds	r1, #82	; 0x52
 800130c:	880a      	ldrh	r2, [r1, #0]
 800130e:	b292      	uxth	r2, r2
 8001310:	2a00      	cmp	r2, #0
 8001312:	d10d      	bne.n	8001330 <HAL_UART_Transmit+0x88>
    if(UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8001314:	9b03      	ldr	r3, [sp, #12]
 8001316:	2140      	movs	r1, #64	; 0x40
 8001318:	9300      	str	r3, [sp, #0]
 800131a:	0020      	movs	r0, r4
 800131c:	9b02      	ldr	r3, [sp, #8]
 800131e:	f7ff ff91 	bl	8001244 <UART_WaitOnFlagUntilTimeout>
 8001322:	2800      	cmp	r0, #0
 8001324:	d112      	bne.n	800134c <HAL_UART_Transmit+0xa4>
    huart->gState = HAL_UART_STATE_READY;
 8001326:	2320      	movs	r3, #32
    __HAL_UNLOCK(huart);
 8001328:	3468      	adds	r4, #104	; 0x68
    huart->gState = HAL_UART_STATE_READY;
 800132a:	703b      	strb	r3, [r7, #0]
    __HAL_UNLOCK(huart);
 800132c:	7020      	strb	r0, [r4, #0]
    return HAL_OK;
 800132e:	e00e      	b.n	800134e <HAL_UART_Transmit+0xa6>
      huart->TxXferCount--;
 8001330:	880b      	ldrh	r3, [r1, #0]
      if(UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8001332:	2200      	movs	r2, #0
      huart->TxXferCount--;
 8001334:	3b01      	subs	r3, #1
 8001336:	b29b      	uxth	r3, r3
 8001338:	800b      	strh	r3, [r1, #0]
      if(UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800133a:	9b03      	ldr	r3, [sp, #12]
 800133c:	2180      	movs	r1, #128	; 0x80
 800133e:	9300      	str	r3, [sp, #0]
 8001340:	0020      	movs	r0, r4
 8001342:	9b02      	ldr	r3, [sp, #8]
 8001344:	f7ff ff7e 	bl	8001244 <UART_WaitOnFlagUntilTimeout>
 8001348:	2800      	cmp	r0, #0
 800134a:	d002      	beq.n	8001352 <HAL_UART_Transmit+0xaa>
        return HAL_TIMEOUT;
 800134c:	2003      	movs	r0, #3
}
 800134e:	b005      	add	sp, #20
 8001350:	bdf0      	pop	{r4, r5, r6, r7, pc}
      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8001352:	68a3      	ldr	r3, [r4, #8]
 8001354:	6822      	ldr	r2, [r4, #0]
 8001356:	42b3      	cmp	r3, r6
 8001358:	d108      	bne.n	800136c <HAL_UART_Transmit+0xc4>
 800135a:	6923      	ldr	r3, [r4, #16]
 800135c:	2b00      	cmp	r3, #0
 800135e:	d105      	bne.n	800136c <HAL_UART_Transmit+0xc4>
        huart->Instance->TDR = (*tmp & (uint16_t)0x01FFU);
 8001360:	882b      	ldrh	r3, [r5, #0]
        pData += 2;
 8001362:	3502      	adds	r5, #2
        huart->Instance->TDR = (*tmp & (uint16_t)0x01FFU);
 8001364:	05db      	lsls	r3, r3, #23
 8001366:	0ddb      	lsrs	r3, r3, #23
 8001368:	8513      	strh	r3, [r2, #40]	; 0x28
        pData += 2;
 800136a:	e7cd      	b.n	8001308 <HAL_UART_Transmit+0x60>
        huart->Instance->TDR = (*pData++ & (uint8_t)0xFFU);
 800136c:	782b      	ldrb	r3, [r5, #0]
 800136e:	3501      	adds	r5, #1
 8001370:	8513      	strh	r3, [r2, #40]	; 0x28
 8001372:	e7c9      	b.n	8001308 <HAL_UART_Transmit+0x60>

08001374 <WIZCHIP_READ>:

#if   (_WIZCHIP_ == 5500)
////////////////////////////////////////////////////

uint8_t  WIZCHIP_READ(uint32_t AddrSel)
{
 8001374:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8001376:	0005      	movs	r5, r0
   uint8_t ret;
   uint8_t spi_data[3];

   WIZCHIP_CRITICAL_ENTER();
 8001378:	4c12      	ldr	r4, [pc, #72]	; (80013c4 <WIZCHIP_READ+0x50>)
 800137a:	0a2e      	lsrs	r6, r5, #8
 800137c:	68a3      	ldr	r3, [r4, #8]
 800137e:	4798      	blx	r3
   WIZCHIP.CS._select();
 8001380:	6923      	ldr	r3, [r4, #16]
 8001382:	4798      	blx	r3

   AddrSel |= (_W5500_SPI_READ_ | _W5500_SPI_VDM_OP_);

   if(!WIZCHIP.IF.SPI._read_burst || !WIZCHIP.IF.SPI._write_burst) 	// byte operation
 8001384:	6a22      	ldr	r2, [r4, #32]
 8001386:	0c2b      	lsrs	r3, r5, #16
 8001388:	2a00      	cmp	r2, #0
 800138a:	d002      	beq.n	8001392 <WIZCHIP_READ+0x1e>
 800138c:	6a62      	ldr	r2, [r4, #36]	; 0x24
 800138e:	2a00      	cmp	r2, #0
 8001390:	d111      	bne.n	80013b6 <WIZCHIP_READ+0x42>
   {
	   WIZCHIP.IF.SPI._write_byte((AddrSel & 0x00FF0000) >> 16);
 8001392:	b2d8      	uxtb	r0, r3
 8001394:	69e3      	ldr	r3, [r4, #28]
 8001396:	4798      	blx	r3
		WIZCHIP.IF.SPI._write_byte((AddrSel & 0x0000FF00) >>  8);
 8001398:	b2f0      	uxtb	r0, r6
 800139a:	69e3      	ldr	r3, [r4, #28]
 800139c:	4798      	blx	r3
		WIZCHIP.IF.SPI._write_byte((AddrSel & 0x000000FF) >>  0);
 800139e:	b2e8      	uxtb	r0, r5
 80013a0:	69e3      	ldr	r3, [r4, #28]
 80013a2:	4798      	blx	r3
		spi_data[0] = (AddrSel & 0x00FF0000) >> 16;
		spi_data[1] = (AddrSel & 0x0000FF00) >> 8;
		spi_data[2] = (AddrSel & 0x000000FF) >> 0;
		WIZCHIP.IF.SPI._write_burst(spi_data, 3);
   }
   ret = WIZCHIP.IF.SPI._read_byte();
 80013a4:	69a3      	ldr	r3, [r4, #24]
 80013a6:	4798      	blx	r3
 80013a8:	0005      	movs	r5, r0

   WIZCHIP.CS._deselect();
 80013aa:	6963      	ldr	r3, [r4, #20]
 80013ac:	4798      	blx	r3
   WIZCHIP_CRITICAL_EXIT();
 80013ae:	68e3      	ldr	r3, [r4, #12]
 80013b0:	4798      	blx	r3
   return ret;
}
 80013b2:	0028      	movs	r0, r5
 80013b4:	bd76      	pop	{r1, r2, r4, r5, r6, pc}
		spi_data[0] = (AddrSel & 0x00FF0000) >> 16;
 80013b6:	a801      	add	r0, sp, #4
 80013b8:	7003      	strb	r3, [r0, #0]
		spi_data[1] = (AddrSel & 0x0000FF00) >> 8;
 80013ba:	7046      	strb	r6, [r0, #1]
		spi_data[2] = (AddrSel & 0x000000FF) >> 0;
 80013bc:	7085      	strb	r5, [r0, #2]
		WIZCHIP.IF.SPI._write_burst(spi_data, 3);
 80013be:	2103      	movs	r1, #3
 80013c0:	4790      	blx	r2
 80013c2:	e7ef      	b.n	80013a4 <WIZCHIP_READ+0x30>
 80013c4:	20000004 	.word	0x20000004

080013c8 <WIZCHIP_WRITE>:

void     WIZCHIP_WRITE(uint32_t AddrSel, uint8_t wb )
{
 80013c8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   uint8_t spi_data[4];

   WIZCHIP_CRITICAL_ENTER();
 80013ca:	4c13      	ldr	r4, [pc, #76]	; (8001418 <WIZCHIP_WRITE+0x50>)
{
 80013cc:	0005      	movs	r5, r0
   WIZCHIP_CRITICAL_ENTER();
 80013ce:	68a3      	ldr	r3, [r4, #8]
{
 80013d0:	000f      	movs	r7, r1
   WIZCHIP_CRITICAL_ENTER();
 80013d2:	4798      	blx	r3
   WIZCHIP.CS._select();
 80013d4:	6923      	ldr	r3, [r4, #16]
 80013d6:	4798      	blx	r3

   AddrSel |= (_W5500_SPI_WRITE_ | _W5500_SPI_VDM_OP_);
 80013d8:	2104      	movs	r1, #4

   //if(!WIZCHIP.IF.SPI._read_burst || !WIZCHIP.IF.SPI._write_burst) 	// byte operation
   if(!WIZCHIP.IF.SPI._write_burst) 	// byte operation
 80013da:	6a63      	ldr	r3, [r4, #36]	; 0x24
   AddrSel |= (_W5500_SPI_WRITE_ | _W5500_SPI_VDM_OP_);
 80013dc:	430d      	orrs	r5, r1
 80013de:	0c2a      	lsrs	r2, r5, #16
 80013e0:	0a2e      	lsrs	r6, r5, #8
   if(!WIZCHIP.IF.SPI._write_burst) 	// byte operation
 80013e2:	2b00      	cmp	r3, #0
 80013e4:	d110      	bne.n	8001408 <WIZCHIP_WRITE+0x40>
   {
		WIZCHIP.IF.SPI._write_byte((AddrSel & 0x00FF0000) >> 16);
 80013e6:	b2d0      	uxtb	r0, r2
 80013e8:	69e3      	ldr	r3, [r4, #28]
 80013ea:	4798      	blx	r3
		WIZCHIP.IF.SPI._write_byte((AddrSel & 0x0000FF00) >>  8);
 80013ec:	b2f0      	uxtb	r0, r6
 80013ee:	69e3      	ldr	r3, [r4, #28]
 80013f0:	4798      	blx	r3
		WIZCHIP.IF.SPI._write_byte((AddrSel & 0x000000FF) >>  0);
 80013f2:	b2e8      	uxtb	r0, r5
 80013f4:	69e3      	ldr	r3, [r4, #28]
 80013f6:	4798      	blx	r3
		WIZCHIP.IF.SPI._write_byte(wb);
 80013f8:	0038      	movs	r0, r7
 80013fa:	69e3      	ldr	r3, [r4, #28]
 80013fc:	4798      	blx	r3
		spi_data[2] = (AddrSel & 0x000000FF) >> 0;
		spi_data[3] = wb;
		WIZCHIP.IF.SPI._write_burst(spi_data, 4);
   }

   WIZCHIP.CS._deselect();
 80013fe:	6963      	ldr	r3, [r4, #20]
 8001400:	4798      	blx	r3
   WIZCHIP_CRITICAL_EXIT();
 8001402:	68e3      	ldr	r3, [r4, #12]
 8001404:	4798      	blx	r3
}
 8001406:	bdf7      	pop	{r0, r1, r2, r4, r5, r6, r7, pc}
		spi_data[0] = (AddrSel & 0x00FF0000) >> 16;
 8001408:	a801      	add	r0, sp, #4
 800140a:	7002      	strb	r2, [r0, #0]
		spi_data[1] = (AddrSel & 0x0000FF00) >> 8;
 800140c:	7046      	strb	r6, [r0, #1]
		spi_data[2] = (AddrSel & 0x000000FF) >> 0;
 800140e:	7085      	strb	r5, [r0, #2]
		spi_data[3] = wb;
 8001410:	70c7      	strb	r7, [r0, #3]
		WIZCHIP.IF.SPI._write_burst(spi_data, 4);
 8001412:	4798      	blx	r3
 8001414:	e7f3      	b.n	80013fe <WIZCHIP_WRITE+0x36>
 8001416:	46c0      	nop			; (mov r8, r8)
 8001418:	20000004 	.word	0x20000004

0800141c <WIZCHIP_READ_BUF>:
         
void     WIZCHIP_READ_BUF (uint32_t AddrSel, uint8_t* pBuf, uint16_t len)
{
 800141c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800141e:	0006      	movs	r6, r0
   uint8_t spi_data[3];
   uint16_t i;

   WIZCHIP_CRITICAL_ENTER();
 8001420:	4c1a      	ldr	r4, [pc, #104]	; (800148c <WIZCHIP_READ_BUF+0x70>)
{
 8001422:	b085      	sub	sp, #20
   WIZCHIP_CRITICAL_ENTER();
 8001424:	68a3      	ldr	r3, [r4, #8]
{
 8001426:	0017      	movs	r7, r2
 8001428:	000d      	movs	r5, r1
   WIZCHIP_CRITICAL_ENTER();
 800142a:	4798      	blx	r3
   WIZCHIP.CS._select();
 800142c:	6923      	ldr	r3, [r4, #16]
 800142e:	4798      	blx	r3
 8001430:	0a33      	lsrs	r3, r6, #8
 8001432:	9301      	str	r3, [sp, #4]

   AddrSel |= (_W5500_SPI_READ_ | _W5500_SPI_VDM_OP_);

   if(!WIZCHIP.IF.SPI._read_burst || !WIZCHIP.IF.SPI._write_burst) 	// byte operation
 8001434:	6a23      	ldr	r3, [r4, #32]
 8001436:	0c32      	lsrs	r2, r6, #16
 8001438:	2b00      	cmp	r3, #0
 800143a:	d002      	beq.n	8001442 <WIZCHIP_READ_BUF+0x26>
 800143c:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800143e:	2b00      	cmp	r3, #0
 8001440:	d117      	bne.n	8001472 <WIZCHIP_READ_BUF+0x56>
   {
		WIZCHIP.IF.SPI._write_byte((AddrSel & 0x00FF0000) >> 16);
 8001442:	b2d0      	uxtb	r0, r2
 8001444:	69e3      	ldr	r3, [r4, #28]
 8001446:	4798      	blx	r3
		WIZCHIP.IF.SPI._write_byte((AddrSel & 0x0000FF00) >>  8);
 8001448:	466b      	mov	r3, sp
 800144a:	7918      	ldrb	r0, [r3, #4]
 800144c:	69e3      	ldr	r3, [r4, #28]
 800144e:	4798      	blx	r3
		WIZCHIP.IF.SPI._write_byte((AddrSel & 0x000000FF) >>  0);
 8001450:	b2f0      	uxtb	r0, r6
 8001452:	69e3      	ldr	r3, [r4, #28]
 8001454:	4798      	blx	r3
 8001456:	19ef      	adds	r7, r5, r7
		for(i = 0; i < len; i++)
 8001458:	42bd      	cmp	r5, r7
 800145a:	d105      	bne.n	8001468 <WIZCHIP_READ_BUF+0x4c>
		spi_data[2] = (AddrSel & 0x000000FF) >> 0;
		WIZCHIP.IF.SPI._write_burst(spi_data, 3);
		WIZCHIP.IF.SPI._read_burst(pBuf, len);
   }

   WIZCHIP.CS._deselect();
 800145c:	6963      	ldr	r3, [r4, #20]
 800145e:	4798      	blx	r3
   WIZCHIP_CRITICAL_EXIT();
 8001460:	68e3      	ldr	r3, [r4, #12]
 8001462:	4798      	blx	r3
}
 8001464:	b005      	add	sp, #20
 8001466:	bdf0      	pop	{r4, r5, r6, r7, pc}
		   pBuf[i] = WIZCHIP.IF.SPI._read_byte();
 8001468:	69a3      	ldr	r3, [r4, #24]
 800146a:	4798      	blx	r3
 800146c:	7028      	strb	r0, [r5, #0]
 800146e:	3501      	adds	r5, #1
 8001470:	e7f2      	b.n	8001458 <WIZCHIP_READ_BUF+0x3c>
		spi_data[0] = (AddrSel & 0x00FF0000) >> 16;
 8001472:	a803      	add	r0, sp, #12
 8001474:	7002      	strb	r2, [r0, #0]
		spi_data[1] = (AddrSel & 0x0000FF00) >> 8;
 8001476:	466a      	mov	r2, sp
 8001478:	7912      	ldrb	r2, [r2, #4]
		spi_data[2] = (AddrSel & 0x000000FF) >> 0;
 800147a:	7086      	strb	r6, [r0, #2]
		spi_data[1] = (AddrSel & 0x0000FF00) >> 8;
 800147c:	7042      	strb	r2, [r0, #1]
		WIZCHIP.IF.SPI._write_burst(spi_data, 3);
 800147e:	2103      	movs	r1, #3
 8001480:	4798      	blx	r3
		WIZCHIP.IF.SPI._read_burst(pBuf, len);
 8001482:	0039      	movs	r1, r7
 8001484:	0028      	movs	r0, r5
 8001486:	6a23      	ldr	r3, [r4, #32]
 8001488:	4798      	blx	r3
 800148a:	e7e7      	b.n	800145c <WIZCHIP_READ_BUF+0x40>
 800148c:	20000004 	.word	0x20000004

08001490 <WIZCHIP_WRITE_BUF>:

void     WIZCHIP_WRITE_BUF(uint32_t AddrSel, uint8_t* pBuf, uint16_t len)
{
 8001490:	b5f0      	push	{r4, r5, r6, r7, lr}
   uint8_t spi_data[3];
   uint16_t i;

   WIZCHIP_CRITICAL_ENTER();
 8001492:	4c1b      	ldr	r4, [pc, #108]	; (8001500 <WIZCHIP_WRITE_BUF+0x70>)
{
 8001494:	b085      	sub	sp, #20
   WIZCHIP_CRITICAL_ENTER();
 8001496:	68a3      	ldr	r3, [r4, #8]
{
 8001498:	0006      	movs	r6, r0
 800149a:	000d      	movs	r5, r1
 800149c:	0017      	movs	r7, r2
   WIZCHIP_CRITICAL_ENTER();
 800149e:	4798      	blx	r3
   WIZCHIP.CS._select();
 80014a0:	6923      	ldr	r3, [r4, #16]
 80014a2:	4798      	blx	r3

   AddrSel |= (_W5500_SPI_WRITE_ | _W5500_SPI_VDM_OP_);
 80014a4:	2004      	movs	r0, #4

   if(!WIZCHIP.IF.SPI._write_burst) 	// byte operation
 80014a6:	6a63      	ldr	r3, [r4, #36]	; 0x24
   AddrSel |= (_W5500_SPI_WRITE_ | _W5500_SPI_VDM_OP_);
 80014a8:	4306      	orrs	r6, r0
 80014aa:	0a31      	lsrs	r1, r6, #8
 80014ac:	0c32      	lsrs	r2, r6, #16
 80014ae:	9101      	str	r1, [sp, #4]
   if(!WIZCHIP.IF.SPI._write_burst) 	// byte operation
 80014b0:	2b00      	cmp	r3, #0
 80014b2:	d117      	bne.n	80014e4 <WIZCHIP_WRITE_BUF+0x54>
   {
		WIZCHIP.IF.SPI._write_byte((AddrSel & 0x00FF0000) >> 16);
 80014b4:	b2d0      	uxtb	r0, r2
 80014b6:	69e3      	ldr	r3, [r4, #28]
 80014b8:	4798      	blx	r3
		WIZCHIP.IF.SPI._write_byte((AddrSel & 0x0000FF00) >>  8);
 80014ba:	466b      	mov	r3, sp
 80014bc:	7918      	ldrb	r0, [r3, #4]
 80014be:	69e3      	ldr	r3, [r4, #28]
 80014c0:	4798      	blx	r3
		WIZCHIP.IF.SPI._write_byte((AddrSel & 0x000000FF) >>  0);
 80014c2:	b2f0      	uxtb	r0, r6
 80014c4:	69e3      	ldr	r3, [r4, #28]
 80014c6:	4798      	blx	r3
 80014c8:	19ef      	adds	r7, r5, r7
		for(i = 0; i < len; i++)
 80014ca:	42bd      	cmp	r5, r7
 80014cc:	d105      	bne.n	80014da <WIZCHIP_WRITE_BUF+0x4a>
		spi_data[2] = (AddrSel & 0x000000FF) >> 0;
		WIZCHIP.IF.SPI._write_burst(spi_data, 3);
		WIZCHIP.IF.SPI._write_burst(pBuf, len);
   }

   WIZCHIP.CS._deselect();
 80014ce:	6963      	ldr	r3, [r4, #20]
 80014d0:	4798      	blx	r3
   WIZCHIP_CRITICAL_EXIT();
 80014d2:	68e3      	ldr	r3, [r4, #12]
 80014d4:	4798      	blx	r3
}
 80014d6:	b005      	add	sp, #20
 80014d8:	bdf0      	pop	{r4, r5, r6, r7, pc}
			WIZCHIP.IF.SPI._write_byte(pBuf[i]);
 80014da:	7828      	ldrb	r0, [r5, #0]
 80014dc:	69e3      	ldr	r3, [r4, #28]
 80014de:	4798      	blx	r3
 80014e0:	3501      	adds	r5, #1
 80014e2:	e7f2      	b.n	80014ca <WIZCHIP_WRITE_BUF+0x3a>
		spi_data[0] = (AddrSel & 0x00FF0000) >> 16;
 80014e4:	a803      	add	r0, sp, #12
 80014e6:	7002      	strb	r2, [r0, #0]
		spi_data[1] = (AddrSel & 0x0000FF00) >> 8;
 80014e8:	466a      	mov	r2, sp
 80014ea:	7912      	ldrb	r2, [r2, #4]
		spi_data[2] = (AddrSel & 0x000000FF) >> 0;
 80014ec:	7086      	strb	r6, [r0, #2]
		spi_data[1] = (AddrSel & 0x0000FF00) >> 8;
 80014ee:	7042      	strb	r2, [r0, #1]
		WIZCHIP.IF.SPI._write_burst(spi_data, 3);
 80014f0:	2103      	movs	r1, #3
 80014f2:	4798      	blx	r3
		WIZCHIP.IF.SPI._write_burst(pBuf, len);
 80014f4:	0039      	movs	r1, r7
 80014f6:	0028      	movs	r0, r5
 80014f8:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80014fa:	4798      	blx	r3
 80014fc:	e7e7      	b.n	80014ce <WIZCHIP_WRITE_BUF+0x3e>
 80014fe:	46c0      	nop			; (mov r8, r8)
 8001500:	20000004 	.word	0x20000004

08001504 <close>:
   while(getSn_SR(sn) == SOCK_CLOSED);
   return (int8_t)sn;
}	   

int8_t close(uint8_t sn)
{
 8001504:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001506:	0005      	movs	r5, r0
	CHECK_SOCKNUM();
 8001508:	2808      	cmp	r0, #8
 800150a:	d82c      	bhi.n	8001566 <close+0x62>
      while(getSn_CR(sn) != 0);
      while(getSn_SR(sn) != SOCK_UDP);
      sendto(sn,destip,1,destip,0x3000); // send the dummy data to an unknown destination(0.0.0.1).
   };   
#endif 
	setSn_CR(sn,Sn_CR_CLOSE);
 800150c:	0144      	lsls	r4, r0, #5
 800150e:	3408      	adds	r4, #8
 8001510:	1c67      	adds	r7, r4, #1
 8001512:	37ff      	adds	r7, #255	; 0xff
 8001514:	2110      	movs	r1, #16
 8001516:	0038      	movs	r0, r7
 8001518:	f7ff ff56 	bl	80013c8 <WIZCHIP_WRITE>
   /* wait to process the command... */
	while( getSn_CR(sn) );
 800151c:	0038      	movs	r0, r7
 800151e:	f7ff ff29 	bl	8001374 <WIZCHIP_READ>
 8001522:	1e06      	subs	r6, r0, #0
 8001524:	d1fa      	bne.n	800151c <close+0x18>
	/* clear all interrupt of the socket. */
	setSn_IR(sn, 0xFF);
 8001526:	2380      	movs	r3, #128	; 0x80
 8001528:	009b      	lsls	r3, r3, #2
 800152a:	211f      	movs	r1, #31
 800152c:	18e0      	adds	r0, r4, r3
 800152e:	f7ff ff4b 	bl	80013c8 <WIZCHIP_WRITE>
	//A20150401 : Release the sock_io_mode of socket n.
	sock_io_mode &= ~(1<<sn);
 8001532:	2301      	movs	r3, #1
 8001534:	40ab      	lsls	r3, r5
 8001536:	43db      	mvns	r3, r3
 8001538:	490c      	ldr	r1, [pc, #48]	; (800156c <close+0x68>)
 800153a:	b21b      	sxth	r3, r3
 800153c:	880a      	ldrh	r2, [r1, #0]
 800153e:	401a      	ands	r2, r3
 8001540:	800a      	strh	r2, [r1, #0]
	//
	sock_is_sending &= ~(1<<sn);
 8001542:	490b      	ldr	r1, [pc, #44]	; (8001570 <close+0x6c>)
 8001544:	880a      	ldrh	r2, [r1, #0]
 8001546:	4013      	ands	r3, r2
 8001548:	800b      	strh	r3, [r1, #0]
	sock_remained_size[sn] = 0;
 800154a:	4b0a      	ldr	r3, [pc, #40]	; (8001574 <close+0x70>)
 800154c:	006a      	lsls	r2, r5, #1
 800154e:	52d6      	strh	r6, [r2, r3]
	sock_pack_info[sn] = 0;
 8001550:	4b09      	ldr	r3, [pc, #36]	; (8001578 <close+0x74>)
 8001552:	555e      	strb	r6, [r3, r5]
	while(getSn_SR(sn) != SOCK_CLOSED);
 8001554:	23c0      	movs	r3, #192	; 0xc0
 8001556:	009b      	lsls	r3, r3, #2
 8001558:	18e0      	adds	r0, r4, r3
 800155a:	f7ff ff0b 	bl	8001374 <WIZCHIP_READ>
 800155e:	2800      	cmp	r0, #0
 8001560:	d1f8      	bne.n	8001554 <close+0x50>
	return SOCK_OK;
 8001562:	3001      	adds	r0, #1
}
 8001564:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	CHECK_SOCKNUM();
 8001566:	2001      	movs	r0, #1
 8001568:	4240      	negs	r0, r0
 800156a:	e7fb      	b.n	8001564 <close+0x60>
 800156c:	200000c0 	.word	0x200000c0
 8001570:	200000c2 	.word	0x200000c2
 8001574:	200000cc 	.word	0x200000cc
 8001578:	200000c4 	.word	0x200000c4

0800157c <socket>:
{
 800157c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800157e:	0004      	movs	r4, r0
 8001580:	b085      	sub	sp, #20
 8001582:	000f      	movs	r7, r1
 8001584:	0016      	movs	r6, r2
 8001586:	001d      	movs	r5, r3
	CHECK_SOCKNUM();
 8001588:	2808      	cmp	r0, #8
 800158a:	d900      	bls.n	800158e <socket+0x12>
 800158c:	e07f      	b.n	800168e <socket+0x112>
	switch(protocol)
 800158e:	2901      	cmp	r1, #1
 8001590:	d005      	beq.n	800159e <socket+0x22>
 8001592:	2900      	cmp	r1, #0
 8001594:	d001      	beq.n	800159a <socket+0x1e>
 8001596:	2904      	cmp	r1, #4
 8001598:	d90c      	bls.n	80015b4 <socket+0x38>
         return SOCKERR_SOCKMODE;
 800159a:	2005      	movs	r0, #5
 800159c:	e078      	b.n	8001690 <socket+0x114>
            getSIPR((uint8_t*)&taddr);
 800159e:	20f0      	movs	r0, #240	; 0xf0
 80015a0:	2204      	movs	r2, #4
 80015a2:	0100      	lsls	r0, r0, #4
 80015a4:	a903      	add	r1, sp, #12
 80015a6:	f7ff ff39 	bl	800141c <WIZCHIP_READ_BUF>
            if(taddr == 0) return SOCKERR_SOCKINIT;
 80015aa:	9b03      	ldr	r3, [sp, #12]
 80015ac:	2003      	movs	r0, #3
 80015ae:	2b00      	cmp	r3, #0
 80015b0:	d100      	bne.n	80015b4 <socket+0x38>
 80015b2:	e06d      	b.n	8001690 <socket+0x114>
	if((flag & 0x04) != 0) return SOCKERR_SOCKFLAG;
 80015b4:	076b      	lsls	r3, r5, #29
 80015b6:	d459      	bmi.n	800166c <socket+0xf0>
	if(flag != 0)
 80015b8:	2d00      	cmp	r5, #0
 80015ba:	d003      	beq.n	80015c4 <socket+0x48>
   	switch(protocol)
 80015bc:	2f01      	cmp	r7, #1
 80015be:	d052      	beq.n	8001666 <socket+0xea>
 80015c0:	2f02      	cmp	r7, #2
 80015c2:	d055      	beq.n	8001670 <socket+0xf4>
	close(sn);
 80015c4:	0020      	movs	r0, r4
 80015c6:	f7ff ff9d 	bl	8001504 <close>
	   setSn_MR(sn, (protocol | (flag & 0xF0)));
 80015ca:	0163      	lsls	r3, r4, #5
 80015cc:	3308      	adds	r3, #8
 80015ce:	9301      	str	r3, [sp, #4]
 80015d0:	0029      	movs	r1, r5
 80015d2:	230f      	movs	r3, #15
 80015d4:	4399      	bics	r1, r3
 80015d6:	4339      	orrs	r1, r7
 80015d8:	9801      	ldr	r0, [sp, #4]
 80015da:	f7ff fef5 	bl	80013c8 <WIZCHIP_WRITE>
	if(!port)
 80015de:	2e00      	cmp	r6, #0
 80015e0:	d107      	bne.n	80015f2 <socket+0x76>
	   port = sock_any_port++;
 80015e2:	4a2c      	ldr	r2, [pc, #176]	; (8001694 <socket+0x118>)
	   if(sock_any_port == 0xFFF0) sock_any_port = SOCK_ANY_PORT_NUM;
 80015e4:	492c      	ldr	r1, [pc, #176]	; (8001698 <socket+0x11c>)
	   port = sock_any_port++;
 80015e6:	8816      	ldrh	r6, [r2, #0]
 80015e8:	1c73      	adds	r3, r6, #1
 80015ea:	b29b      	uxth	r3, r3
	   if(sock_any_port == 0xFFF0) sock_any_port = SOCK_ANY_PORT_NUM;
 80015ec:	428b      	cmp	r3, r1
 80015ee:	d04a      	beq.n	8001686 <socket+0x10a>
	   port = sock_any_port++;
 80015f0:	8013      	strh	r3, [r2, #0]
   setSn_PORT(sn,port);	
 80015f2:	2280      	movs	r2, #128	; 0x80
 80015f4:	9b01      	ldr	r3, [sp, #4]
 80015f6:	00d2      	lsls	r2, r2, #3
 80015f8:	1898      	adds	r0, r3, r2
 80015fa:	0a31      	lsrs	r1, r6, #8
 80015fc:	f7ff fee4 	bl	80013c8 <WIZCHIP_WRITE>
 8001600:	22a0      	movs	r2, #160	; 0xa0
 8001602:	9b01      	ldr	r3, [sp, #4]
 8001604:	00d2      	lsls	r2, r2, #3
 8001606:	b2f1      	uxtb	r1, r6
 8001608:	1898      	adds	r0, r3, r2
 800160a:	f7ff fedd 	bl	80013c8 <WIZCHIP_WRITE>
   setSn_CR(sn,Sn_CR_OPEN);
 800160e:	9b01      	ldr	r3, [sp, #4]
 8001610:	2101      	movs	r1, #1
 8001612:	1c5e      	adds	r6, r3, #1
 8001614:	36ff      	adds	r6, #255	; 0xff
 8001616:	0030      	movs	r0, r6
 8001618:	f7ff fed6 	bl	80013c8 <WIZCHIP_WRITE>
   while(getSn_CR(sn));
 800161c:	0030      	movs	r0, r6
 800161e:	f7ff fea9 	bl	8001374 <WIZCHIP_READ>
 8001622:	2800      	cmp	r0, #0
 8001624:	d1fa      	bne.n	800161c <socket+0xa0>
   sock_io_mode &= ~(1 <<sn);
 8001626:	2601      	movs	r6, #1
 8001628:	0033      	movs	r3, r6
 800162a:	40a3      	lsls	r3, r4
 800162c:	43db      	mvns	r3, r3
	sock_io_mode |= ((flag & SF_IO_NONBLOCK) << sn);   
 800162e:	4035      	ands	r5, r6
 8001630:	40a5      	lsls	r5, r4
 8001632:	4a1a      	ldr	r2, [pc, #104]	; (800169c <socket+0x120>)
   sock_io_mode &= ~(1 <<sn);
 8001634:	b21b      	sxth	r3, r3
 8001636:	8811      	ldrh	r1, [r2, #0]
 8001638:	4019      	ands	r1, r3
	sock_io_mode |= ((flag & SF_IO_NONBLOCK) << sn);   
 800163a:	430d      	orrs	r5, r1
   sock_is_sending &= ~(1<<sn);
 800163c:	4918      	ldr	r1, [pc, #96]	; (80016a0 <socket+0x124>)
	sock_io_mode |= ((flag & SF_IO_NONBLOCK) << sn);   
 800163e:	8015      	strh	r5, [r2, #0]
   sock_is_sending &= ~(1<<sn);
 8001640:	880a      	ldrh	r2, [r1, #0]
 8001642:	4013      	ands	r3, r2
   sock_remained_size[sn] = 0;
 8001644:	4a17      	ldr	r2, [pc, #92]	; (80016a4 <socket+0x128>)
   sock_is_sending &= ~(1<<sn);
 8001646:	800b      	strh	r3, [r1, #0]
   sock_remained_size[sn] = 0;
 8001648:	0063      	lsls	r3, r4, #1
 800164a:	5298      	strh	r0, [r3, r2]
   sock_pack_info[sn] = PACK_COMPLETED;
 800164c:	4b16      	ldr	r3, [pc, #88]	; (80016a8 <socket+0x12c>)
 800164e:	5518      	strb	r0, [r3, r4]
   while(getSn_SR(sn) == SOCK_CLOSED);
 8001650:	22c0      	movs	r2, #192	; 0xc0
 8001652:	9b01      	ldr	r3, [sp, #4]
 8001654:	0092      	lsls	r2, r2, #2
 8001656:	1898      	adds	r0, r3, r2
 8001658:	f7ff fe8c 	bl	8001374 <WIZCHIP_READ>
 800165c:	2800      	cmp	r0, #0
 800165e:	d0f7      	beq.n	8001650 <socket+0xd4>
   return (int8_t)sn;
 8001660:	b260      	sxtb	r0, r4
}	   
 8001662:	b005      	add	sp, #20
 8001664:	bdf0      	pop	{r4, r5, r6, r7, pc}
   		     if((flag & (SF_TCP_NODELAY|SF_IO_NONBLOCK))==0) return SOCKERR_SOCKFLAG;
 8001666:	2321      	movs	r3, #33	; 0x21
 8001668:	421d      	tst	r5, r3
 800166a:	d1ab      	bne.n	80015c4 <socket+0x48>
	if((flag & 0x04) != 0) return SOCKERR_SOCKFLAG;
 800166c:	2006      	movs	r0, #6
 800166e:	e00f      	b.n	8001690 <socket+0x114>
   	      if(flag & SF_IGMP_VER2)
 8001670:	06ab      	lsls	r3, r5, #26
 8001672:	d502      	bpl.n	800167a <socket+0xfe>
   	         if((flag & SF_MULTI_ENABLE)==0) return SOCKERR_SOCKFLAG;
 8001674:	b26b      	sxtb	r3, r5
 8001676:	2b00      	cmp	r3, #0
 8001678:	daf8      	bge.n	800166c <socket+0xf0>
      	      if(flag & SF_UNI_BLOCK)
 800167a:	06eb      	lsls	r3, r5, #27
 800167c:	d5a2      	bpl.n	80015c4 <socket+0x48>
      	         if((flag & SF_MULTI_ENABLE) == 0) return SOCKERR_SOCKFLAG;
 800167e:	b26b      	sxtb	r3, r5
 8001680:	2b00      	cmp	r3, #0
 8001682:	db9f      	blt.n	80015c4 <socket+0x48>
 8001684:	e7f2      	b.n	800166c <socket+0xf0>
	   if(sock_any_port == 0xFFF0) sock_any_port = SOCK_ANY_PORT_NUM;
 8001686:	4b09      	ldr	r3, [pc, #36]	; (80016ac <socket+0x130>)
 8001688:	4e09      	ldr	r6, [pc, #36]	; (80016b0 <socket+0x134>)
 800168a:	8013      	strh	r3, [r2, #0]
 800168c:	e7b1      	b.n	80015f2 <socket+0x76>
	CHECK_SOCKNUM();
 800168e:	2001      	movs	r0, #1
	if((flag & 0x04) != 0) return SOCKERR_SOCKFLAG;
 8001690:	4240      	negs	r0, r0
 8001692:	e7e6      	b.n	8001662 <socket+0xe6>
 8001694:	20000000 	.word	0x20000000
 8001698:	0000fff0 	.word	0x0000fff0
 800169c:	200000c0 	.word	0x200000c0
 80016a0:	200000c2 	.word	0x200000c2
 80016a4:	200000cc 	.word	0x200000cc
 80016a8:	200000c4 	.word	0x200000c4
 80016ac:	ffffc000 	.word	0xffffc000
 80016b0:	0000ffef 	.word	0x0000ffef

080016b4 <wizchip_cs_deselect>:
 * @brief Default function to deselect chip.
 * @note This function help not to access wrong address. If you do not describe this function or register any functions,
 * null function is called.
 */
//void     wizchip_cs_deselect(void)          {};
void wizchip_cs_deselect(void) { }
 80016b4:	4770      	bx	lr

080016b6 <wizchip_bus_readdata>:
 * @note This function help not to access wrong address. If you do not describe this function or register any functions,
 * null function is called.
 */
 //M20150601 : Rename the function for integrating with W5300
//uint8_t wizchip_bus_readbyte(uint32_t AddrSel) { return * ((volatile uint8_t *)((ptrdiff_t) AddrSel)); }
iodata_t wizchip_bus_readdata(uint32_t AddrSel) { return * ((volatile iodata_t *)((ptrdiff_t) AddrSel)); }
 80016b6:	7800      	ldrb	r0, [r0, #0]
 80016b8:	b2c0      	uxtb	r0, r0
 80016ba:	4770      	bx	lr

080016bc <wizchip_bus_writedata>:
 * @note This function help not to access wrong address. If you do not describe this function or register any functions,
 * null function is called.
 */
//M20150601 : Rename the function for integrating with W5300
//void     wizchip_bus_writebyte(uint32_t AddrSel, uint8_t wb)  { *((volatile uint8_t*)((ptrdiff_t)AddrSel)) = wb; }
void     wizchip_bus_writedata(uint32_t AddrSel, iodata_t wb)  { *((volatile iodata_t*)((ptrdiff_t)AddrSel)) = wb; }
 80016bc:	7001      	strb	r1, [r0, #0]
 80016be:	4770      	bx	lr

080016c0 <wizchip_spi_readbyte>:
 * @brief Default function to read in SPI interface.
 * @note This function help not to access wrong address. If you do not describe this function or register any functions,
 * null function is called.
 */
//uint8_t wizchip_spi_readbyte(void)        {return 0;};
uint8_t wizchip_spi_readbyte(void)        {return 0;}
 80016c0:	2000      	movs	r0, #0
 80016c2:	4770      	bx	lr

080016c4 <wizchip_spi_writebyte>:
 * @brief Default function to write in SPI interface.
 * @note This function help not to access wrong address. If you do not describe this function or register any functions,
 * null function is called.
 */
//void     wizchip_spi_writebyte(uint8_t wb) {};
void     wizchip_spi_writebyte(uint8_t wb) {}
 80016c4:	4770      	bx	lr

080016c6 <wizchip_spi_writeburst>:
 * @brief Default function to burst write in SPI interface.
 * @note This function help not to access wrong address. If you do not describe this function or register any functions,
 * null function is called.
 */
//void     wizchip_spi_writeburst(uint8_t* pBuf, uint16_t len) {};
void     wizchip_spi_writeburst(uint8_t* pBuf, uint16_t len) {}
 80016c6:	4770      	bx	lr

080016c8 <wizchip_spi_readburst>:
 80016c8:	4770      	bx	lr

080016ca <wizchip_cris_enter>:
 80016ca:	4770      	bx	lr

080016cc <wizchip_cris_exit>:
 80016cc:	4770      	bx	lr

080016ce <wizchip_cs_select>:
 80016ce:	4770      	bx	lr

080016d0 <reg_wizchip_cs_cbfunc>:
      WIZCHIP.CRIS._exit  = cris_ex;
   }
}

void reg_wizchip_cs_cbfunc(void(*cs_sel)(void), void(*cs_desel)(void))
{
 80016d0:	4b06      	ldr	r3, [pc, #24]	; (80016ec <reg_wizchip_cs_cbfunc+0x1c>)
   if(!cs_sel || !cs_desel)
 80016d2:	2800      	cmp	r0, #0
 80016d4:	d001      	beq.n	80016da <reg_wizchip_cs_cbfunc+0xa>
 80016d6:	2900      	cmp	r1, #0
 80016d8:	d104      	bne.n	80016e4 <reg_wizchip_cs_cbfunc+0x14>
   {
      WIZCHIP.CS._select   = wizchip_cs_select;
 80016da:	4a05      	ldr	r2, [pc, #20]	; (80016f0 <reg_wizchip_cs_cbfunc+0x20>)
 80016dc:	611a      	str	r2, [r3, #16]
      WIZCHIP.CS._deselect = wizchip_cs_deselect;
 80016de:	4a05      	ldr	r2, [pc, #20]	; (80016f4 <reg_wizchip_cs_cbfunc+0x24>)
 80016e0:	615a      	str	r2, [r3, #20]
   else
   {
      WIZCHIP.CS._select   = cs_sel;
      WIZCHIP.CS._deselect = cs_desel;
   }
}
 80016e2:	4770      	bx	lr
      WIZCHIP.CS._select   = cs_sel;
 80016e4:	6118      	str	r0, [r3, #16]
      WIZCHIP.CS._deselect = cs_desel;
 80016e6:	6159      	str	r1, [r3, #20]
}
 80016e8:	e7fb      	b.n	80016e2 <reg_wizchip_cs_cbfunc+0x12>
 80016ea:	46c0      	nop			; (mov r8, r8)
 80016ec:	20000004 	.word	0x20000004
 80016f0:	080016cf 	.word	0x080016cf
 80016f4:	080016b5 	.word	0x080016b5

080016f8 <reg_wizchip_spi_cbfunc>:
   }
}

void reg_wizchip_spi_cbfunc(uint8_t (*spi_rb)(void), void (*spi_wb)(uint8_t wb))
{
   while(!(WIZCHIP.if_mode & _WIZCHIP_IO_MODE_SPI_));
 80016f8:	4b08      	ldr	r3, [pc, #32]	; (800171c <reg_wizchip_spi_cbfunc+0x24>)
 80016fa:	881a      	ldrh	r2, [r3, #0]
 80016fc:	0592      	lsls	r2, r2, #22
 80016fe:	d400      	bmi.n	8001702 <reg_wizchip_spi_cbfunc+0xa>
 8001700:	e7fe      	b.n	8001700 <reg_wizchip_spi_cbfunc+0x8>
   
   if(!spi_rb || !spi_wb)
 8001702:	2800      	cmp	r0, #0
 8001704:	d001      	beq.n	800170a <reg_wizchip_spi_cbfunc+0x12>
 8001706:	2900      	cmp	r1, #0
 8001708:	d104      	bne.n	8001714 <reg_wizchip_spi_cbfunc+0x1c>
   {
      WIZCHIP.IF.SPI._read_byte   = wizchip_spi_readbyte;
 800170a:	4a05      	ldr	r2, [pc, #20]	; (8001720 <reg_wizchip_spi_cbfunc+0x28>)
 800170c:	619a      	str	r2, [r3, #24]
      WIZCHIP.IF.SPI._write_byte  = wizchip_spi_writebyte;
 800170e:	4a05      	ldr	r2, [pc, #20]	; (8001724 <reg_wizchip_spi_cbfunc+0x2c>)
 8001710:	61da      	str	r2, [r3, #28]
   else
   {
      WIZCHIP.IF.SPI._read_byte   = spi_rb;
      WIZCHIP.IF.SPI._write_byte  = spi_wb;
   }
}
 8001712:	4770      	bx	lr
      WIZCHIP.IF.SPI._read_byte   = spi_rb;
 8001714:	6198      	str	r0, [r3, #24]
      WIZCHIP.IF.SPI._write_byte  = spi_wb;
 8001716:	61d9      	str	r1, [r3, #28]
}
 8001718:	e7fb      	b.n	8001712 <reg_wizchip_spi_cbfunc+0x1a>
 800171a:	46c0      	nop			; (mov r8, r8)
 800171c:	20000004 	.word	0x20000004
 8001720:	080016c1 	.word	0x080016c1
 8001724:	080016c5 	.word	0x080016c5

08001728 <reg_wizchip_spiburst_cbfunc>:

// 20140626 Eric Added for SPI burst operations
void reg_wizchip_spiburst_cbfunc(void (*spi_rb)(uint8_t* pBuf, uint16_t len), void (*spi_wb)(uint8_t* pBuf, uint16_t len))
{
   while(!(WIZCHIP.if_mode & _WIZCHIP_IO_MODE_SPI_));
 8001728:	4b08      	ldr	r3, [pc, #32]	; (800174c <reg_wizchip_spiburst_cbfunc+0x24>)
 800172a:	881a      	ldrh	r2, [r3, #0]
 800172c:	0592      	lsls	r2, r2, #22
 800172e:	d400      	bmi.n	8001732 <reg_wizchip_spiburst_cbfunc+0xa>
 8001730:	e7fe      	b.n	8001730 <reg_wizchip_spiburst_cbfunc+0x8>

   if(!spi_rb || !spi_wb)
 8001732:	2800      	cmp	r0, #0
 8001734:	d001      	beq.n	800173a <reg_wizchip_spiburst_cbfunc+0x12>
 8001736:	2900      	cmp	r1, #0
 8001738:	d104      	bne.n	8001744 <reg_wizchip_spiburst_cbfunc+0x1c>
   {
      WIZCHIP.IF.SPI._read_burst   = wizchip_spi_readburst;
 800173a:	4a05      	ldr	r2, [pc, #20]	; (8001750 <reg_wizchip_spiburst_cbfunc+0x28>)
 800173c:	621a      	str	r2, [r3, #32]
      WIZCHIP.IF.SPI._write_burst  = wizchip_spi_writeburst;
 800173e:	4a05      	ldr	r2, [pc, #20]	; (8001754 <reg_wizchip_spiburst_cbfunc+0x2c>)
 8001740:	625a      	str	r2, [r3, #36]	; 0x24
   else
   {
      WIZCHIP.IF.SPI._read_burst   = spi_rb;
      WIZCHIP.IF.SPI._write_burst  = spi_wb;
   }
}
 8001742:	4770      	bx	lr
      WIZCHIP.IF.SPI._read_burst   = spi_rb;
 8001744:	6218      	str	r0, [r3, #32]
      WIZCHIP.IF.SPI._write_burst  = spi_wb;
 8001746:	6259      	str	r1, [r3, #36]	; 0x24
}
 8001748:	e7fb      	b.n	8001742 <reg_wizchip_spiburst_cbfunc+0x1a>
 800174a:	46c0      	nop			; (mov r8, r8)
 800174c:	20000004 	.word	0x20000004
 8001750:	080016c9 	.word	0x080016c9
 8001754:	080016c7 	.word	0x080016c7

08001758 <wizchip_sw_reset>:
   }
   return 0;
}

void wizchip_sw_reset(void)
{
 8001758:	b5f0      	push	{r4, r5, r6, r7, lr}
#if _WIZCHIP_IO_MODE_  == _WIZCHIP_IO_MODE_BUS_INDIR_
   uint16_t mr = (uint16_t)getMR();
   setMR(mr | MR_IND);
#endif
//
   getSHAR(mac);
 800175a:	2790      	movs	r7, #144	; 0x90
   getGAR(gw);  getSUBR(sn);  getSIPR(sip);
 800175c:	2680      	movs	r6, #128	; 0x80
 800175e:	25a0      	movs	r5, #160	; 0xa0
 8001760:	24f0      	movs	r4, #240	; 0xf0
{
 8001762:	b087      	sub	sp, #28
   getSHAR(mac);
 8001764:	013f      	lsls	r7, r7, #4
 8001766:	a904      	add	r1, sp, #16
 8001768:	0038      	movs	r0, r7
   getGAR(gw);  getSUBR(sn);  getSIPR(sip);
 800176a:	0076      	lsls	r6, r6, #1
   getSHAR(mac);
 800176c:	2206      	movs	r2, #6
 800176e:	f7ff fe55 	bl	800141c <WIZCHIP_READ_BUF>
   getGAR(gw);  getSUBR(sn);  getSIPR(sip);
 8001772:	00ed      	lsls	r5, r5, #3
 8001774:	a901      	add	r1, sp, #4
 8001776:	0030      	movs	r0, r6
 8001778:	2204      	movs	r2, #4
 800177a:	f7ff fe4f 	bl	800141c <WIZCHIP_READ_BUF>
 800177e:	0124      	lsls	r4, r4, #4
 8001780:	a902      	add	r1, sp, #8
 8001782:	0028      	movs	r0, r5
 8001784:	2204      	movs	r2, #4
 8001786:	f7ff fe49 	bl	800141c <WIZCHIP_READ_BUF>
 800178a:	2204      	movs	r2, #4
 800178c:	a903      	add	r1, sp, #12
 800178e:	0020      	movs	r0, r4
 8001790:	f7ff fe44 	bl	800141c <WIZCHIP_READ_BUF>
   setMR(MR_RST);
 8001794:	2180      	movs	r1, #128	; 0x80
 8001796:	2000      	movs	r0, #0
 8001798:	f7ff fe16 	bl	80013c8 <WIZCHIP_WRITE>
   getMR(); // for delay
 800179c:	2000      	movs	r0, #0
 800179e:	f7ff fde9 	bl	8001374 <WIZCHIP_READ>
//A2015051 : For indirect bus mode 
#if _WIZCHIP_IO_MODE_  == _WIZCHIP_IO_MODE_BUS_INDIR_
   setMR(mr | MR_IND);
#endif
//
   setSHAR(mac);
 80017a2:	a904      	add	r1, sp, #16
 80017a4:	0038      	movs	r0, r7
 80017a6:	2206      	movs	r2, #6
 80017a8:	f7ff fe72 	bl	8001490 <WIZCHIP_WRITE_BUF>
   setGAR(gw);
 80017ac:	a901      	add	r1, sp, #4
 80017ae:	0030      	movs	r0, r6
 80017b0:	2204      	movs	r2, #4
 80017b2:	f7ff fe6d 	bl	8001490 <WIZCHIP_WRITE_BUF>
   setSUBR(sn);
 80017b6:	a902      	add	r1, sp, #8
 80017b8:	0028      	movs	r0, r5
 80017ba:	2204      	movs	r2, #4
 80017bc:	f7ff fe68 	bl	8001490 <WIZCHIP_WRITE_BUF>
   setSIPR(sip);
 80017c0:	2204      	movs	r2, #4
 80017c2:	a903      	add	r1, sp, #12
 80017c4:	0020      	movs	r0, r4
 80017c6:	f7ff fe63 	bl	8001490 <WIZCHIP_WRITE_BUF>
}
 80017ca:	b007      	add	sp, #28
 80017cc:	bdf0      	pop	{r4, r5, r6, r7, pc}
	...

080017d0 <wizchip_init>:

int8_t wizchip_init(uint8_t* txsize, uint8_t* rxsize)
{
 80017d0:	b570      	push	{r4, r5, r6, lr}
 80017d2:	0005      	movs	r5, r0
 80017d4:	000c      	movs	r4, r1
   int8_t i;
#if _WIZCHIP_ < W5200
   int8_t j;
#endif
   int8_t tmp = 0;
   wizchip_sw_reset();
 80017d6:	f7ff ffbf 	bl	8001758 <wizchip_sw_reset>
   if(txsize)
 80017da:	2d00      	cmp	r5, #0
 80017dc:	d103      	bne.n	80017e6 <wizchip_init+0x16>
        }

    #endif
   }

   if(rxsize)
 80017de:	2c00      	cmp	r4, #0
 80017e0:	d11b      	bne.n	800181a <wizchip_init+0x4a>
            setSn_RXBUF_SIZE(i, rxsize[i]);
        #endif
        }
    #endif
   }
   return 0;
 80017e2:	2000      	movs	r0, #0
 80017e4:	e00a      	b.n	80017fc <wizchip_init+0x2c>
 80017e6:	0029      	movs	r1, r5
   if(txsize)
 80017e8:	002a      	movs	r2, r5
 80017ea:	2300      	movs	r3, #0
 80017ec:	3108      	adds	r1, #8
            tmp += txsize[i];
 80017ee:	7810      	ldrb	r0, [r2, #0]
 80017f0:	18c3      	adds	r3, r0, r3
 80017f2:	b25b      	sxtb	r3, r3
            if(tmp > 16) return -1;
 80017f4:	2b10      	cmp	r3, #16
 80017f6:	dd02      	ble.n	80017fe <wizchip_init+0x2e>
 80017f8:	2001      	movs	r0, #1
 80017fa:	4240      	negs	r0, r0
}
 80017fc:	bd70      	pop	{r4, r5, r6, pc}
 80017fe:	3201      	adds	r2, #1
        for(i = 0 ; i < _WIZCHIP_SOCK_NUM_; i++)
 8001800:	4291      	cmp	r1, r2
 8001802:	d1f4      	bne.n	80017ee <wizchip_init+0x1e>
 8001804:	4e10      	ldr	r6, [pc, #64]	; (8001848 <wizchip_init+0x78>)
            setSn_TXBUF_SIZE(i, txsize[i]);
 8001806:	7829      	ldrb	r1, [r5, #0]
 8001808:	0030      	movs	r0, r6
 800180a:	f7ff fddd 	bl	80013c8 <WIZCHIP_WRITE>
        for(i = 0 ; i < _WIZCHIP_SOCK_NUM_; i++)
 800180e:	4b0f      	ldr	r3, [pc, #60]	; (800184c <wizchip_init+0x7c>)
 8001810:	3620      	adds	r6, #32
 8001812:	3501      	adds	r5, #1
 8001814:	429e      	cmp	r6, r3
 8001816:	d1f6      	bne.n	8001806 <wizchip_init+0x36>
 8001818:	e7e1      	b.n	80017de <wizchip_init+0xe>
 800181a:	0021      	movs	r1, r4
   if(rxsize)
 800181c:	0022      	movs	r2, r4
 800181e:	2300      	movs	r3, #0
 8001820:	3108      	adds	r1, #8
            tmp += rxsize[i];
 8001822:	7810      	ldrb	r0, [r2, #0]
 8001824:	18c3      	adds	r3, r0, r3
 8001826:	b25b      	sxtb	r3, r3
            if(tmp > 16) return -1;
 8001828:	2b10      	cmp	r3, #16
 800182a:	dce5      	bgt.n	80017f8 <wizchip_init+0x28>
 800182c:	3201      	adds	r2, #1
        for(i = 0 ; i < _WIZCHIP_SOCK_NUM_; i++)
 800182e:	4291      	cmp	r1, r2
 8001830:	d1f7      	bne.n	8001822 <wizchip_init+0x52>
 8001832:	4d07      	ldr	r5, [pc, #28]	; (8001850 <wizchip_init+0x80>)
            setSn_RXBUF_SIZE(i, rxsize[i]);
 8001834:	7821      	ldrb	r1, [r4, #0]
 8001836:	0028      	movs	r0, r5
 8001838:	f7ff fdc6 	bl	80013c8 <WIZCHIP_WRITE>
        for(i = 0 ; i < _WIZCHIP_SOCK_NUM_; i++)
 800183c:	4b02      	ldr	r3, [pc, #8]	; (8001848 <wizchip_init+0x78>)
 800183e:	3520      	adds	r5, #32
 8001840:	3401      	adds	r4, #1
 8001842:	429d      	cmp	r5, r3
 8001844:	d1f6      	bne.n	8001834 <wizchip_init+0x64>
 8001846:	e7cc      	b.n	80017e2 <wizchip_init+0x12>
 8001848:	00001f08 	.word	0x00001f08
 800184c:	00002008 	.word	0x00002008
 8001850:	00001e08 	.word	0x00001e08

08001854 <wizchip_setnetinfo>:
}
#endif


void wizchip_setnetinfo(wiz_NetInfo* pnetinfo)
{
 8001854:	b510      	push	{r4, lr}
   setSHAR(pnetinfo->mac);
 8001856:	0001      	movs	r1, r0
{
 8001858:	0004      	movs	r4, r0
   setSHAR(pnetinfo->mac);
 800185a:	2090      	movs	r0, #144	; 0x90
 800185c:	2206      	movs	r2, #6
 800185e:	0100      	lsls	r0, r0, #4
 8001860:	f7ff fe16 	bl	8001490 <WIZCHIP_WRITE_BUF>
   setGAR(pnetinfo->gw);
 8001864:	0021      	movs	r1, r4
 8001866:	2080      	movs	r0, #128	; 0x80
 8001868:	310e      	adds	r1, #14
 800186a:	2204      	movs	r2, #4
 800186c:	0040      	lsls	r0, r0, #1
 800186e:	f7ff fe0f 	bl	8001490 <WIZCHIP_WRITE_BUF>
   setSUBR(pnetinfo->sn);
 8001872:	0021      	movs	r1, r4
 8001874:	20a0      	movs	r0, #160	; 0xa0
 8001876:	310a      	adds	r1, #10
 8001878:	2204      	movs	r2, #4
 800187a:	00c0      	lsls	r0, r0, #3
 800187c:	f7ff fe08 	bl	8001490 <WIZCHIP_WRITE_BUF>
   setSIPR(pnetinfo->ip);
 8001880:	20f0      	movs	r0, #240	; 0xf0
 8001882:	1da1      	adds	r1, r4, #6
 8001884:	2204      	movs	r2, #4
 8001886:	0100      	lsls	r0, r0, #4
 8001888:	f7ff fe02 	bl	8001490 <WIZCHIP_WRITE_BUF>
   _DNS_[0] = pnetinfo->dns[0];
 800188c:	7ca2      	ldrb	r2, [r4, #18]
 800188e:	4b06      	ldr	r3, [pc, #24]	; (80018a8 <wizchip_setnetinfo+0x54>)
 8001890:	701a      	strb	r2, [r3, #0]
   _DNS_[1] = pnetinfo->dns[1];
 8001892:	7ce2      	ldrb	r2, [r4, #19]
 8001894:	705a      	strb	r2, [r3, #1]
   _DNS_[2] = pnetinfo->dns[2];
 8001896:	7d22      	ldrb	r2, [r4, #20]
 8001898:	709a      	strb	r2, [r3, #2]
   _DNS_[3] = pnetinfo->dns[3];
 800189a:	7d62      	ldrb	r2, [r4, #21]
 800189c:	70da      	strb	r2, [r3, #3]
   _DHCP_   = pnetinfo->dhcp;
 800189e:	7da2      	ldrb	r2, [r4, #22]
 80018a0:	4b02      	ldr	r3, [pc, #8]	; (80018ac <wizchip_setnetinfo+0x58>)
 80018a2:	701a      	strb	r2, [r3, #0]
}
 80018a4:	bd10      	pop	{r4, pc}
 80018a6:	46c0      	nop			; (mov r8, r8)
 80018a8:	200000dd 	.word	0x200000dd
 80018ac:	200000dc 	.word	0x200000dc

080018b0 <default_ip_assign>:
int8_t   parseDHCPCMSG(void);

/* The default handler of ip assign first */
void default_ip_assign(void)
{
   setSIPR(DHCP_allocated_ip);
 80018b0:	20f0      	movs	r0, #240	; 0xf0
{
 80018b2:	b510      	push	{r4, lr}
   setSIPR(DHCP_allocated_ip);
 80018b4:	2204      	movs	r2, #4
 80018b6:	4908      	ldr	r1, [pc, #32]	; (80018d8 <default_ip_assign+0x28>)
 80018b8:	0100      	lsls	r0, r0, #4
 80018ba:	f7ff fde9 	bl	8001490 <WIZCHIP_WRITE_BUF>
   setSUBR(DHCP_allocated_sn);
 80018be:	20a0      	movs	r0, #160	; 0xa0
 80018c0:	2204      	movs	r2, #4
 80018c2:	4906      	ldr	r1, [pc, #24]	; (80018dc <default_ip_assign+0x2c>)
 80018c4:	00c0      	lsls	r0, r0, #3
 80018c6:	f7ff fde3 	bl	8001490 <WIZCHIP_WRITE_BUF>
   setGAR (DHCP_allocated_gw);
 80018ca:	2080      	movs	r0, #128	; 0x80
 80018cc:	2204      	movs	r2, #4
 80018ce:	4904      	ldr	r1, [pc, #16]	; (80018e0 <default_ip_assign+0x30>)
 80018d0:	0040      	lsls	r0, r0, #1
 80018d2:	f7ff fddd 	bl	8001490 <WIZCHIP_WRITE_BUF>
}
 80018d6:	bd10      	pop	{r4, pc}
 80018d8:	200000e5 	.word	0x200000e5
 80018dc:	200000e9 	.word	0x200000e9
 80018e0:	200000e1 	.word	0x200000e1

080018e4 <default_ip_update>:

/* The default handler of ip changed */
void default_ip_update(void)
{
 80018e4:	b510      	push	{r4, lr}
	/* WIZchip Software Reset */
   setMR(MR_RST);
 80018e6:	2180      	movs	r1, #128	; 0x80
 80018e8:	2000      	movs	r0, #0
 80018ea:	f7ff fd6d 	bl	80013c8 <WIZCHIP_WRITE>
   getMR(); // for delay
 80018ee:	2000      	movs	r0, #0
 80018f0:	f7ff fd40 	bl	8001374 <WIZCHIP_READ>
   default_ip_assign();
 80018f4:	f7ff ffdc 	bl	80018b0 <default_ip_assign>
   setSHAR(DHCP_CHADDR);
 80018f8:	2090      	movs	r0, #144	; 0x90
 80018fa:	2206      	movs	r2, #6
 80018fc:	4902      	ldr	r1, [pc, #8]	; (8001908 <default_ip_update+0x24>)
 80018fe:	0100      	lsls	r0, r0, #4
 8001900:	f7ff fdc6 	bl	8001490 <WIZCHIP_WRITE_BUF>
}
 8001904:	bd10      	pop	{r4, pc}
 8001906:	46c0      	nop			; (mov r8, r8)
 8001908:	20000100 	.word	0x20000100

0800190c <default_ip_conflict>:

/* The default handler of ip changed */
void default_ip_conflict(void)
{
 800190c:	b510      	push	{r4, lr}
	// WIZchip Software Reset
	setMR(MR_RST);
 800190e:	2180      	movs	r1, #128	; 0x80
 8001910:	2000      	movs	r0, #0
 8001912:	f7ff fd59 	bl	80013c8 <WIZCHIP_WRITE>
	getMR(); // for delay
 8001916:	2000      	movs	r0, #0
 8001918:	f7ff fd2c 	bl	8001374 <WIZCHIP_READ>
	setSHAR(DHCP_CHADDR);
 800191c:	2090      	movs	r0, #144	; 0x90
 800191e:	2206      	movs	r2, #6
 8001920:	4902      	ldr	r1, [pc, #8]	; (800192c <default_ip_conflict+0x20>)
 8001922:	0100      	lsls	r0, r0, #4
 8001924:	f7ff fdb4 	bl	8001490 <WIZCHIP_WRITE_BUF>
}
 8001928:	bd10      	pop	{r4, pc}
 800192a:	46c0      	nop			; (mov r8, r8)
 800192c:	20000100 	.word	0x20000100

08001930 <reg_dhcp_cbfunc>:

/* register the call back func. */
void reg_dhcp_cbfunc(void(*ip_assign)(void), void(*ip_update)(void), void(*ip_conflict)(void))
{
 8001930:	b570      	push	{r4, r5, r6, lr}
   dhcp_ip_assign   = default_ip_assign;
 8001932:	4b09      	ldr	r3, [pc, #36]	; (8001958 <reg_dhcp_cbfunc+0x28>)
 8001934:	4d09      	ldr	r5, [pc, #36]	; (800195c <reg_dhcp_cbfunc+0x2c>)
   dhcp_ip_update   = default_ip_update;
 8001936:	4c0a      	ldr	r4, [pc, #40]	; (8001960 <reg_dhcp_cbfunc+0x30>)
   dhcp_ip_assign   = default_ip_assign;
 8001938:	602b      	str	r3, [r5, #0]
   dhcp_ip_update   = default_ip_update;
 800193a:	4b0a      	ldr	r3, [pc, #40]	; (8001964 <reg_dhcp_cbfunc+0x34>)
   dhcp_ip_conflict = default_ip_conflict;
 800193c:	4e0a      	ldr	r6, [pc, #40]	; (8001968 <reg_dhcp_cbfunc+0x38>)
   dhcp_ip_update   = default_ip_update;
 800193e:	6023      	str	r3, [r4, #0]
   dhcp_ip_conflict = default_ip_conflict;
 8001940:	4b0a      	ldr	r3, [pc, #40]	; (800196c <reg_dhcp_cbfunc+0x3c>)
 8001942:	601e      	str	r6, [r3, #0]
   if(ip_assign)   dhcp_ip_assign = ip_assign;
 8001944:	2800      	cmp	r0, #0
 8001946:	d000      	beq.n	800194a <reg_dhcp_cbfunc+0x1a>
 8001948:	6028      	str	r0, [r5, #0]
   if(ip_update)   dhcp_ip_update = ip_update;
 800194a:	2900      	cmp	r1, #0
 800194c:	d000      	beq.n	8001950 <reg_dhcp_cbfunc+0x20>
 800194e:	6021      	str	r1, [r4, #0]
   if(ip_conflict) dhcp_ip_conflict = ip_conflict;
 8001950:	2a00      	cmp	r2, #0
 8001952:	d000      	beq.n	8001956 <reg_dhcp_cbfunc+0x26>
 8001954:	601a      	str	r2, [r3, #0]
}
 8001956:	bd70      	pop	{r4, r5, r6, pc}
 8001958:	080018b1 	.word	0x080018b1
 800195c:	2000002c 	.word	0x2000002c
 8001960:	20000034 	.word	0x20000034
 8001964:	080018e5 	.word	0x080018e5
 8001968:	0800190d 	.word	0x0800190d
 800196c:	20000030 	.word	0x20000030

08001970 <getDHCPLeasetime>:
   ip[3] = DHCP_allocated_dns[3];         
}

uint32_t getDHCPLeasetime(void)
{
	return dhcp_lease_time;
 8001970:	4b01      	ldr	r3, [pc, #4]	; (8001978 <getDHCPLeasetime+0x8>)
 8001972:	6818      	ldr	r0, [r3, #0]
}
 8001974:	4770      	bx	lr
 8001976:	46c0      	nop			; (mov r8, r8)
 8001978:	20000038 	.word	0x20000038

0800197c <W5500_Select>:
    HAL_UART_Transmit(&huart1, (uint8_t*)buff, strlen(buff),
                      HAL_MAX_DELAY);
    va_end(args);
}

void W5500_Select(void) {
 800197c:	b510      	push	{r4, lr}
    HAL_GPIO_WritePin(W5500_CS_GPIO_Port, W5500_CS_Pin, GPIO_PIN_RESET);
 800197e:	2200      	movs	r2, #0
 8001980:	2102      	movs	r1, #2
 8001982:	4802      	ldr	r0, [pc, #8]	; (800198c <W5500_Select+0x10>)
 8001984:	f7fe fd8e 	bl	80004a4 <HAL_GPIO_WritePin>
}
 8001988:	bd10      	pop	{r4, pc}
 800198a:	46c0      	nop			; (mov r8, r8)
 800198c:	48000400 	.word	0x48000400

08001990 <W5500_Unselect>:

void W5500_Unselect(void) {
 8001990:	b510      	push	{r4, lr}
    HAL_GPIO_WritePin(W5500_CS_GPIO_Port, W5500_CS_Pin, GPIO_PIN_SET);
 8001992:	2201      	movs	r2, #1
 8001994:	2102      	movs	r1, #2
 8001996:	4802      	ldr	r0, [pc, #8]	; (80019a0 <W5500_Unselect+0x10>)
 8001998:	f7fe fd84 	bl	80004a4 <HAL_GPIO_WritePin>
}
 800199c:	bd10      	pop	{r4, pc}
 800199e:	46c0      	nop			; (mov r8, r8)
 80019a0:	48000400 	.word	0x48000400

080019a4 <W5500_ReadBuff>:

void W5500_ReadBuff(uint8_t* buff, uint16_t len) {
    HAL_SPI_Receive(&hspi1, buff, len, HAL_MAX_DELAY);
 80019a4:	2301      	movs	r3, #1
void W5500_ReadBuff(uint8_t* buff, uint16_t len) {
 80019a6:	b510      	push	{r4, lr}
 80019a8:	000a      	movs	r2, r1
    HAL_SPI_Receive(&hspi1, buff, len, HAL_MAX_DELAY);
 80019aa:	425b      	negs	r3, r3
 80019ac:	0001      	movs	r1, r0
 80019ae:	4802      	ldr	r0, [pc, #8]	; (80019b8 <W5500_ReadBuff+0x14>)
 80019b0:	f7ff fb8a 	bl	80010c8 <HAL_SPI_Receive>
}
 80019b4:	bd10      	pop	{r4, pc}
 80019b6:	46c0      	nop			; (mov r8, r8)
 80019b8:	200001d4 	.word	0x200001d4

080019bc <W5500_ReadByte>:

void W5500_WriteBuff(uint8_t* buff, uint16_t len) {
    HAL_SPI_Transmit(&hspi1, buff, len, HAL_MAX_DELAY);
}

uint8_t W5500_ReadByte(void) {
 80019bc:	b513      	push	{r0, r1, r4, lr}
    uint8_t byte;
    W5500_ReadBuff(&byte, sizeof(byte));
 80019be:	466b      	mov	r3, sp
 80019c0:	1ddc      	adds	r4, r3, #7
 80019c2:	0020      	movs	r0, r4
 80019c4:	2101      	movs	r1, #1
 80019c6:	f7ff ffed 	bl	80019a4 <W5500_ReadBuff>
    return byte;
 80019ca:	7820      	ldrb	r0, [r4, #0]
}
 80019cc:	bd16      	pop	{r1, r2, r4, pc}
	...

080019d0 <W5500_WriteBuff>:
    HAL_SPI_Transmit(&hspi1, buff, len, HAL_MAX_DELAY);
 80019d0:	2301      	movs	r3, #1
void W5500_WriteBuff(uint8_t* buff, uint16_t len) {
 80019d2:	b510      	push	{r4, lr}
 80019d4:	000a      	movs	r2, r1
    HAL_SPI_Transmit(&hspi1, buff, len, HAL_MAX_DELAY);
 80019d6:	425b      	negs	r3, r3
 80019d8:	0001      	movs	r1, r0
 80019da:	4802      	ldr	r0, [pc, #8]	; (80019e4 <W5500_WriteBuff+0x14>)
 80019dc:	f7ff f96b 	bl	8000cb6 <HAL_SPI_Transmit>
}
 80019e0:	bd10      	pop	{r4, pc}
 80019e2:	46c0      	nop			; (mov r8, r8)
 80019e4:	200001d4 	.word	0x200001d4

080019e8 <W5500_WriteByte>:

void W5500_WriteByte(uint8_t byte) {
 80019e8:	b507      	push	{r0, r1, r2, lr}
 80019ea:	466b      	mov	r3, sp
 80019ec:	71d8      	strb	r0, [r3, #7]
 80019ee:	3307      	adds	r3, #7
    W5500_WriteBuff(&byte, sizeof(byte));
 80019f0:	2101      	movs	r1, #1
 80019f2:	0018      	movs	r0, r3
 80019f4:	f7ff ffec 	bl	80019d0 <W5500_WriteBuff>
}
 80019f8:	bd07      	pop	{r0, r1, r2, pc}
	...

080019fc <UART_Printf>:
void UART_Printf(const char* fmt, ...) {
 80019fc:	b40f      	push	{r0, r1, r2, r3}
    vsnprintf(buff, sizeof(buff), fmt, args);
 80019fe:	2180      	movs	r1, #128	; 0x80
void UART_Printf(const char* fmt, ...) {
 8001a00:	b500      	push	{lr}
 8001a02:	b0c3      	sub	sp, #268	; 0x10c
 8001a04:	ab44      	add	r3, sp, #272	; 0x110
 8001a06:	cb04      	ldmia	r3!, {r2}
    vsnprintf(buff, sizeof(buff), fmt, args);
 8001a08:	0049      	lsls	r1, r1, #1
 8001a0a:	a802      	add	r0, sp, #8
    va_start(args, fmt);
 8001a0c:	9301      	str	r3, [sp, #4]
    vsnprintf(buff, sizeof(buff), fmt, args);
 8001a0e:	f000 fa4f 	bl	8001eb0 <vsniprintf>
    HAL_UART_Transmit(&huart1, (uint8_t*)buff, strlen(buff),
 8001a12:	a802      	add	r0, sp, #8
 8001a14:	f7fe fb78 	bl	8000108 <strlen>
 8001a18:	2301      	movs	r3, #1
 8001a1a:	b282      	uxth	r2, r0
 8001a1c:	425b      	negs	r3, r3
 8001a1e:	a902      	add	r1, sp, #8
 8001a20:	4803      	ldr	r0, [pc, #12]	; (8001a30 <UART_Printf+0x34>)
 8001a22:	f7ff fc41 	bl	80012a8 <HAL_UART_Transmit>
}
 8001a26:	b043      	add	sp, #268	; 0x10c
 8001a28:	bc08      	pop	{r3}
 8001a2a:	b004      	add	sp, #16
 8001a2c:	4718      	bx	r3
 8001a2e:	46c0      	nop			; (mov r8, r8)
 8001a30:	20000164 	.word	0x20000164

08001a34 <Callback_IPAssigned>:

volatile bool ip_assigned = false;

void Callback_IPAssigned(void) {
 8001a34:	b510      	push	{r4, lr}
    UART_Printf("Callback: IP assigned! Leased time: %d sec\r\n", getDHCPLeasetime());
 8001a36:	f7ff ff9b 	bl	8001970 <getDHCPLeasetime>
 8001a3a:	0001      	movs	r1, r0
 8001a3c:	4803      	ldr	r0, [pc, #12]	; (8001a4c <Callback_IPAssigned+0x18>)
 8001a3e:	f7ff ffdd 	bl	80019fc <UART_Printf>
    ip_assigned = true;
 8001a42:	2201      	movs	r2, #1
 8001a44:	4b02      	ldr	r3, [pc, #8]	; (8001a50 <Callback_IPAssigned+0x1c>)
 8001a46:	701a      	strb	r2, [r3, #0]
}
 8001a48:	bd10      	pop	{r4, pc}
 8001a4a:	46c0      	nop			; (mov r8, r8)
 8001a4c:	080026f4 	.word	0x080026f4
 8001a50:	200000ed 	.word	0x200000ed

08001a54 <Callback_IPConflict>:

void Callback_IPConflict(void) {
 8001a54:	b510      	push	{r4, lr}
    UART_Printf("Callback: IP conflict!\r\n");
 8001a56:	4802      	ldr	r0, [pc, #8]	; (8001a60 <Callback_IPConflict+0xc>)
 8001a58:	f7ff ffd0 	bl	80019fc <UART_Printf>
}
 8001a5c:	bd10      	pop	{r4, pc}
 8001a5e:	46c0      	nop			; (mov r8, r8)
 8001a60:	08002721 	.word	0x08002721

08001a64 <init>:
// 1K should be enough, see https://forum.wiznet.io/t/topic/1612/2
//uint8_t dhcp_buffer[2];
// 1K seems to be enough for this buffer as well
//uint8_t dns_buffer[2];

void init() {
 8001a64:	b530      	push	{r4, r5, lr}
//	Ajsadjsadlkasjdakjdalkjdsjlksadlksaj();
//    UART_Printf("\r\ninit() called!\r\n");
//
//    UART_Printf("Registering W5500 callbacks...\r\n");
    HAL_GPIO_WritePin(W5500_CS_GPIO_Port, W5500_CS_Pin, GPIO_PIN_SET);
 8001a66:	2201      	movs	r2, #1
void init() {
 8001a68:	b089      	sub	sp, #36	; 0x24
    HAL_GPIO_WritePin(W5500_CS_GPIO_Port, W5500_CS_Pin, GPIO_PIN_SET);
 8001a6a:	2102      	movs	r1, #2
 8001a6c:	4828      	ldr	r0, [pc, #160]	; (8001b10 <init+0xac>)
 8001a6e:	f7fe fd19 	bl	80004a4 <HAL_GPIO_WritePin>


    reg_wizchip_cs_cbfunc(W5500_Select, W5500_Unselect);
 8001a72:	4928      	ldr	r1, [pc, #160]	; (8001b14 <init+0xb0>)
 8001a74:	4828      	ldr	r0, [pc, #160]	; (8001b18 <init+0xb4>)
 8001a76:	f7ff fe2b 	bl	80016d0 <reg_wizchip_cs_cbfunc>
    reg_wizchip_spi_cbfunc(W5500_ReadByte, W5500_WriteByte);
 8001a7a:	4928      	ldr	r1, [pc, #160]	; (8001b1c <init+0xb8>)
 8001a7c:	4828      	ldr	r0, [pc, #160]	; (8001b20 <init+0xbc>)
 8001a7e:	f7ff fe3b 	bl	80016f8 <reg_wizchip_spi_cbfunc>
    reg_wizchip_spiburst_cbfunc(W5500_ReadBuff, W5500_WriteBuff);
 8001a82:	4928      	ldr	r1, [pc, #160]	; (8001b24 <init+0xc0>)
 8001a84:	4828      	ldr	r0, [pc, #160]	; (8001b28 <init+0xc4>)
 8001a86:	f7ff fe4f 	bl	8001728 <reg_wizchip_spiburst_cbfunc>

//    UART_Printf("Calling wizchip_init()...\r\n");
    uint8_t rx_tx_buff_sizes[] = {2, 2, 2, 2, 2, 2, 2, 2};
 8001a8a:	2208      	movs	r2, #8
 8001a8c:	4927      	ldr	r1, [pc, #156]	; (8001b2c <init+0xc8>)
 8001a8e:	4668      	mov	r0, sp
    wizchip_init(rx_tx_buff_sizes, rx_tx_buff_sizes);

//    UART_Printf("Calling DHCP_init()...\r\n");
    wiz_NetInfo net_info = {
 8001a90:	ac02      	add	r4, sp, #8
    uint8_t rx_tx_buff_sizes[] = {2, 2, 2, 2, 2, 2, 2, 2};
 8001a92:	f000 f9d1 	bl	8001e38 <memcpy>
    wizchip_init(rx_tx_buff_sizes, rx_tx_buff_sizes);
 8001a96:	4669      	mov	r1, sp
 8001a98:	4668      	mov	r0, sp
 8001a9a:	f7ff fe99 	bl	80017d0 <wizchip_init>
    wiz_NetInfo net_info = {
 8001a9e:	2217      	movs	r2, #23
 8001aa0:	2100      	movs	r1, #0
 8001aa2:	0020      	movs	r0, r4
 8001aa4:	f000 f9d1 	bl	8001e4a <memset>
 8001aa8:	23ea      	movs	r3, #234	; 0xea
 8001aaa:	2211      	movs	r2, #17
        .dhcp = NETINFO_DHCP,
		.ip = {192,168,0,5},
		.sn = {255,255,255,0}
    };
    // set MAC address before using DHCP
    setSHAR(net_info.mac);
 8001aac:	2090      	movs	r0, #144	; 0x90
    wiz_NetInfo net_info = {
 8001aae:	2502      	movs	r5, #2
 8001ab0:	7023      	strb	r3, [r4, #0]
 8001ab2:	7062      	strb	r2, [r4, #1]
 8001ab4:	7163      	strb	r3, [r4, #5]
 8001ab6:	1892      	adds	r2, r2, r2
 8001ab8:	3b2a      	subs	r3, #42	; 0x2a
 8001aba:	70a2      	strb	r2, [r4, #2]
 8001abc:	71a3      	strb	r3, [r4, #6]
 8001abe:	3211      	adds	r2, #17
 8001ac0:	3b18      	subs	r3, #24
 8001ac2:	70e2      	strb	r2, [r4, #3]
 8001ac4:	71e3      	strb	r3, [r4, #7]
 8001ac6:	3211      	adds	r2, #17
 8001ac8:	3ba3      	subs	r3, #163	; 0xa3
 8001aca:	7122      	strb	r2, [r4, #4]
 8001acc:	7263      	strb	r3, [r4, #9]
    setSHAR(net_info.mac);
 8001ace:	3a3e      	subs	r2, #62	; 0x3e
    wiz_NetInfo net_info = {
 8001ad0:	33fa      	adds	r3, #250	; 0xfa
    setSHAR(net_info.mac);
 8001ad2:	0021      	movs	r1, r4
 8001ad4:	0100      	lsls	r0, r0, #4
    wiz_NetInfo net_info = {
 8001ad6:	72a3      	strb	r3, [r4, #10]
 8001ad8:	72e3      	strb	r3, [r4, #11]
 8001ada:	7323      	strb	r3, [r4, #12]
 8001adc:	75a5      	strb	r5, [r4, #22]
    setSHAR(net_info.mac);
 8001ade:	f7ff fcd7 	bl	8001490 <WIZCHIP_WRITE_BUF>
//    DHCP_init(DHCP_SOCKET, dhcp_buffer);

//    UART_Printf("Registering DHCP callbacks...\r\n");
    reg_dhcp_cbfunc(
 8001ae2:	4813      	ldr	r0, [pc, #76]	; (8001b30 <init+0xcc>)
 8001ae4:	4a13      	ldr	r2, [pc, #76]	; (8001b34 <init+0xd0>)
 8001ae6:	0001      	movs	r1, r0
 8001ae8:	f7ff ff22 	bl	8001930 <reg_dhcp_cbfunc>
//        net_info.sn[0], net_info.sn[1], net_info.sn[2], net_info.sn[3],
//        dns[0], dns[1], dns[2], dns[3]
//    );

//    UART_Printf("Calling wizchip_setnetinfo()...\r\n");
    wizchip_setnetinfo(&net_info);
 8001aec:	0020      	movs	r0, r4
 8001aee:	f7ff feb1 	bl	8001854 <wizchip_setnetinfo>
//        UART_Printf("Result: %d.%d.%d.%d\r\n", addr[0], addr[1], addr[2], addr[3]);
//    }

//    UART_Printf("Creating socket...\r\n");
    uint8_t http_socket = HTTP_SOCKET;
    uint8_t code = socket(http_socket, Sn_MR_TCP, 10888, 0);
 8001af2:	2101      	movs	r1, #1
 8001af4:	2300      	movs	r3, #0
 8001af6:	4a10      	ldr	r2, [pc, #64]	; (8001b38 <init+0xd4>)
 8001af8:	0028      	movs	r0, r5
 8001afa:	f7ff fd3f 	bl	800157c <socket>
 8001afe:	b2c1      	uxtb	r1, r0
    if(code != http_socket) {
 8001b00:	42a9      	cmp	r1, r5
 8001b02:	d002      	beq.n	8001b0a <init+0xa6>
        UART_Printf("socket() failed, code = %d\r\n", code);
 8001b04:	480d      	ldr	r0, [pc, #52]	; (8001b3c <init+0xd8>)
 8001b06:	f7ff ff79 	bl	80019fc <UART_Printf>
//        }
//    }

//    UART_Printf("Closing socket.\r\n");
//    close(http_socket);
}
 8001b0a:	b009      	add	sp, #36	; 0x24
 8001b0c:	bd30      	pop	{r4, r5, pc}
 8001b0e:	46c0      	nop			; (mov r8, r8)
 8001b10:	48000400 	.word	0x48000400
 8001b14:	08001991 	.word	0x08001991
 8001b18:	0800197d 	.word	0x0800197d
 8001b1c:	080019e9 	.word	0x080019e9
 8001b20:	080019bd 	.word	0x080019bd
 8001b24:	080019d1 	.word	0x080019d1
 8001b28:	080019a5 	.word	0x080019a5
 8001b2c:	080026ec 	.word	0x080026ec
 8001b30:	08001a35 	.word	0x08001a35
 8001b34:	08001a55 	.word	0x08001a55
 8001b38:	00002a88 	.word	0x00002a88
 8001b3c:	0800273a 	.word	0x0800273a

08001b40 <loop>:

void loop() {
    HAL_Delay(1000);
 8001b40:	20fa      	movs	r0, #250	; 0xfa
void loop() {
 8001b42:	b510      	push	{r4, lr}
    HAL_Delay(1000);
 8001b44:	0080      	lsls	r0, r0, #2
 8001b46:	f7fe fba3 	bl	8000290 <HAL_Delay>
}
 8001b4a:	bd10      	pop	{r4, pc}

08001b4c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001b4c:	b530      	push	{r4, r5, lr}
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001b4e:	2410      	movs	r4, #16
{
 8001b50:	b095      	sub	sp, #84	; 0x54
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001b52:	2230      	movs	r2, #48	; 0x30
 8001b54:	2100      	movs	r1, #0
 8001b56:	a808      	add	r0, sp, #32
 8001b58:	f000 f977 	bl	8001e4a <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001b5c:	0022      	movs	r2, r4
 8001b5e:	2100      	movs	r1, #0
 8001b60:	4668      	mov	r0, sp
 8001b62:	f000 f972 	bl	8001e4a <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001b66:	0022      	movs	r2, r4
 8001b68:	2100      	movs	r1, #0
 8001b6a:	a804      	add	r0, sp, #16
 8001b6c:	f000 f96d 	bl	8001e4a <memset>

  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_HSE;
 8001b70:	2303      	movs	r3, #3
 8001b72:	9308      	str	r3, [sp, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001b74:	2380      	movs	r3, #128	; 0x80
 8001b76:	025b      	lsls	r3, r3, #9
 8001b78:	9311      	str	r3, [sp, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL6;
 8001b7a:	2380      	movs	r3, #128	; 0x80
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8001b7c:	2501      	movs	r5, #1
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001b7e:	940c      	str	r4, [sp, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL6;
 8001b80:	035b      	lsls	r3, r3, #13
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001b82:	3c0e      	subs	r4, #14
  RCC_OscInitStruct.PLL.PREDIV = RCC_PREDIV_DIV1;
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001b84:	a808      	add	r0, sp, #32
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001b86:	9410      	str	r4, [sp, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL6;
 8001b88:	9312      	str	r3, [sp, #72]	; 0x48
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8001b8a:	9509      	str	r5, [sp, #36]	; 0x24
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001b8c:	950b      	str	r5, [sp, #44]	; 0x2c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001b8e:	f7fe fc93 	bl	80004b8 <HAL_RCC_OscConfig>
  {
    Error_Handler();
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001b92:	2307      	movs	r3, #7
                              |RCC_CLOCKTYPE_PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001b94:	9401      	str	r4, [sp, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001b96:	2400      	movs	r4, #0
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8001b98:	0029      	movs	r1, r5
 8001b9a:	4668      	mov	r0, sp
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001b9c:	9300      	str	r3, [sp, #0]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001b9e:	9402      	str	r4, [sp, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8001ba0:	9403      	str	r4, [sp, #12]
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8001ba2:	f7fe fe9d 	bl	80008e0 <HAL_RCC_ClockConfig>
  {
    Error_Handler();
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1|RCC_PERIPHCLK_I2C1;
 8001ba6:	2321      	movs	r3, #33	; 0x21
  PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK1;
  PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_HSI;
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001ba8:	a804      	add	r0, sp, #16
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1|RCC_PERIPHCLK_I2C1;
 8001baa:	9304      	str	r3, [sp, #16]
  PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK1;
 8001bac:	9406      	str	r4, [sp, #24]
  PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_HSI;
 8001bae:	9407      	str	r4, [sp, #28]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001bb0:	f7fe ff32 	bl	8000a18 <HAL_RCCEx_PeriphCLKConfig>
  {
    Error_Handler();
  }
}
 8001bb4:	b015      	add	sp, #84	; 0x54
 8001bb6:	bd30      	pop	{r4, r5, pc}

08001bb8 <main>:
{
 8001bb8:	b530      	push	{r4, r5, lr}
 8001bba:	b089      	sub	sp, #36	; 0x24
  HAL_Init();
 8001bbc:	f7fe fb4a 	bl	8000254 <HAL_Init>
  SystemClock_Config();
 8001bc0:	f7ff ffc4 	bl	8001b4c <SystemClock_Config>
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001bc4:	2214      	movs	r2, #20
 8001bc6:	2100      	movs	r1, #0
 8001bc8:	a803      	add	r0, sp, #12
 8001bca:	f000 f93e 	bl	8001e4a <memset>

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8001bce:	2080      	movs	r0, #128	; 0x80
 8001bd0:	4b37      	ldr	r3, [pc, #220]	; (8001cb0 <main+0xf8>)
 8001bd2:	03c0      	lsls	r0, r0, #15
 8001bd4:	6959      	ldr	r1, [r3, #20]
  HAL_GPIO_WritePin(SPI1_CS0_GPIO_Port, SPI1_CS0_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin : DEBUG_LED_Pin */
  GPIO_InitStruct.Pin = DEBUG_LED_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_OD;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001bd6:	2400      	movs	r4, #0
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8001bd8:	4301      	orrs	r1, r0
 8001bda:	6159      	str	r1, [r3, #20]
 8001bdc:	695a      	ldr	r2, [r3, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
  HAL_GPIO_Init(DEBUG_LED_GPIO_Port, &GPIO_InitStruct);

  /*Configure GPIO pin : SPI1_CS0_Pin */
  GPIO_InitStruct.Pin = SPI1_CS0_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001bde:	2501      	movs	r5, #1
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8001be0:	4002      	ands	r2, r0
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001be2:	2080      	movs	r0, #128	; 0x80
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8001be4:	9200      	str	r2, [sp, #0]
 8001be6:	9a00      	ldr	r2, [sp, #0]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001be8:	6959      	ldr	r1, [r3, #20]
 8001bea:	0280      	lsls	r0, r0, #10
 8001bec:	4301      	orrs	r1, r0
 8001bee:	6159      	str	r1, [r3, #20]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001bf0:	2180      	movs	r1, #128	; 0x80
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001bf2:	695a      	ldr	r2, [r3, #20]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001bf4:	02c9      	lsls	r1, r1, #11
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001bf6:	4002      	ands	r2, r0
  HAL_GPIO_WritePin(DEBUG_LED_GPIO_Port, DEBUG_LED_Pin, GPIO_PIN_RESET);
 8001bf8:	2090      	movs	r0, #144	; 0x90
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001bfa:	9201      	str	r2, [sp, #4]
 8001bfc:	9a01      	ldr	r2, [sp, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001bfe:	695a      	ldr	r2, [r3, #20]
  HAL_GPIO_WritePin(DEBUG_LED_GPIO_Port, DEBUG_LED_Pin, GPIO_PIN_RESET);
 8001c00:	05c0      	lsls	r0, r0, #23
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001c02:	430a      	orrs	r2, r1
 8001c04:	615a      	str	r2, [r3, #20]
 8001c06:	695b      	ldr	r3, [r3, #20]
  HAL_GPIO_WritePin(DEBUG_LED_GPIO_Port, DEBUG_LED_Pin, GPIO_PIN_RESET);
 8001c08:	2200      	movs	r2, #0
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001c0a:	400b      	ands	r3, r1
 8001c0c:	9302      	str	r3, [sp, #8]
  HAL_GPIO_WritePin(DEBUG_LED_GPIO_Port, DEBUG_LED_Pin, GPIO_PIN_RESET);
 8001c0e:	2110      	movs	r1, #16
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001c10:	9b02      	ldr	r3, [sp, #8]
  HAL_GPIO_WritePin(DEBUG_LED_GPIO_Port, DEBUG_LED_Pin, GPIO_PIN_RESET);
 8001c12:	f7fe fc47 	bl	80004a4 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(SPI1_CS0_GPIO_Port, SPI1_CS0_Pin, GPIO_PIN_RESET);
 8001c16:	2200      	movs	r2, #0
 8001c18:	2102      	movs	r1, #2
 8001c1a:	4826      	ldr	r0, [pc, #152]	; (8001cb4 <main+0xfc>)
 8001c1c:	f7fe fc42 	bl	80004a4 <HAL_GPIO_WritePin>
  GPIO_InitStruct.Pin = DEBUG_LED_Pin;
 8001c20:	2310      	movs	r3, #16
  HAL_GPIO_Init(DEBUG_LED_GPIO_Port, &GPIO_InitStruct);
 8001c22:	2090      	movs	r0, #144	; 0x90
  GPIO_InitStruct.Pin = DEBUG_LED_Pin;
 8001c24:	9303      	str	r3, [sp, #12]
  HAL_GPIO_Init(DEBUG_LED_GPIO_Port, &GPIO_InitStruct);
 8001c26:	a903      	add	r1, sp, #12
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_OD;
 8001c28:	3301      	adds	r3, #1
  HAL_GPIO_Init(DEBUG_LED_GPIO_Port, &GPIO_InitStruct);
 8001c2a:	05c0      	lsls	r0, r0, #23
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_OD;
 8001c2c:	9304      	str	r3, [sp, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c2e:	9405      	str	r4, [sp, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001c30:	9406      	str	r4, [sp, #24]
  HAL_GPIO_Init(DEBUG_LED_GPIO_Port, &GPIO_InitStruct);
 8001c32:	f7fe fb87 	bl	8000344 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = SPI1_CS0_Pin;
 8001c36:	2302      	movs	r3, #2
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
  HAL_GPIO_Init(SPI1_CS0_GPIO_Port, &GPIO_InitStruct);
 8001c38:	a903      	add	r1, sp, #12
 8001c3a:	481e      	ldr	r0, [pc, #120]	; (8001cb4 <main+0xfc>)
  GPIO_InitStruct.Pin = SPI1_CS0_Pin;
 8001c3c:	9303      	str	r3, [sp, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001c3e:	9504      	str	r5, [sp, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c40:	9405      	str	r4, [sp, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001c42:	9406      	str	r4, [sp, #24]
  HAL_GPIO_Init(SPI1_CS0_GPIO_Port, &GPIO_InitStruct);
 8001c44:	f7fe fb7e 	bl	8000344 <HAL_GPIO_Init>
  HAL_GPIO_WritePin(ULED_GPIO_Port, ULED_Pin, GPIO_PIN_SET);
 8001c48:	002a      	movs	r2, r5
 8001c4a:	2104      	movs	r1, #4
 8001c4c:	481a      	ldr	r0, [pc, #104]	; (8001cb8 <main+0x100>)
 8001c4e:	f7fe fc29 	bl	80004a4 <HAL_GPIO_WritePin>
  HAL_Delay(1000);
 8001c52:	20fa      	movs	r0, #250	; 0xfa
 8001c54:	0080      	lsls	r0, r0, #2
 8001c56:	f7fe fb1b 	bl	8000290 <HAL_Delay>
  HAL_GPIO_WritePin(ULED_GPIO_Port, ULED_Pin, GPIO_PIN_RESET);
 8001c5a:	0022      	movs	r2, r4
 8001c5c:	2104      	movs	r1, #4
 8001c5e:	4816      	ldr	r0, [pc, #88]	; (8001cb8 <main+0x100>)
 8001c60:	f7fe fc20 	bl	80004a4 <HAL_GPIO_WritePin>
  HAL_Delay(1000);
 8001c64:	20fa      	movs	r0, #250	; 0xfa
 8001c66:	0080      	lsls	r0, r0, #2
 8001c68:	f7fe fb12 	bl	8000290 <HAL_Delay>
  HAL_GPIO_WritePin(ULED_GPIO_Port, ULED_Pin, GPIO_PIN_SET);
 8001c6c:	002a      	movs	r2, r5
 8001c6e:	2104      	movs	r1, #4
 8001c70:	4811      	ldr	r0, [pc, #68]	; (8001cb8 <main+0x100>)
 8001c72:	f7fe fc17 	bl	80004a4 <HAL_GPIO_WritePin>
  HAL_GPIO_TogglePin(ULED_GPIO_Port, ULED_Pin);
 8001c76:	2104      	movs	r1, #4
 8001c78:	480f      	ldr	r0, [pc, #60]	; (8001cb8 <main+0x100>)
 8001c7a:	f7fe fc19 	bl	80004b0 <HAL_GPIO_TogglePin>
  HAL_Delay(1000);
 8001c7e:	20fa      	movs	r0, #250	; 0xfa
 8001c80:	0080      	lsls	r0, r0, #2
 8001c82:	f7fe fb05 	bl	8000290 <HAL_Delay>
  HAL_GPIO_TogglePin(ULED_GPIO_Port, ULED_Pin);
 8001c86:	2104      	movs	r1, #4
 8001c88:	480b      	ldr	r0, [pc, #44]	; (8001cb8 <main+0x100>)
 8001c8a:	f7fe fc11 	bl	80004b0 <HAL_GPIO_TogglePin>
  HAL_Delay(1000);
 8001c8e:	20fa      	movs	r0, #250	; 0xfa
 8001c90:	0080      	lsls	r0, r0, #2
 8001c92:	f7fe fafd 	bl	8000290 <HAL_Delay>
  HAL_GPIO_TogglePin(ULED_GPIO_Port, ULED_Pin);
 8001c96:	2104      	movs	r1, #4
 8001c98:	4807      	ldr	r0, [pc, #28]	; (8001cb8 <main+0x100>)
 8001c9a:	f7fe fc09 	bl	80004b0 <HAL_GPIO_TogglePin>
  init();
 8001c9e:	f7ff fee1 	bl	8001a64 <init>
	loop();
 8001ca2:	f7ff ff4d 	bl	8001b40 <loop>
    HAL_GPIO_TogglePin(ULED_GPIO_Port, ULED_Pin);
 8001ca6:	2104      	movs	r1, #4
 8001ca8:	4803      	ldr	r0, [pc, #12]	; (8001cb8 <main+0x100>)
 8001caa:	f7fe fc01 	bl	80004b0 <HAL_GPIO_TogglePin>
 8001cae:	e7f8      	b.n	8001ca2 <main+0xea>
 8001cb0:	40021000 	.word	0x40021000
 8001cb4:	48000400 	.word	0x48000400
 8001cb8:	48000c00 	.word	0x48000c00

08001cbc <HAL_MspInit>:
{
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001cbc:	2001      	movs	r0, #1
 8001cbe:	4b0a      	ldr	r3, [pc, #40]	; (8001ce8 <HAL_MspInit+0x2c>)
{
 8001cc0:	b082      	sub	sp, #8
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001cc2:	6999      	ldr	r1, [r3, #24]
 8001cc4:	4301      	orrs	r1, r0
 8001cc6:	6199      	str	r1, [r3, #24]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001cc8:	2180      	movs	r1, #128	; 0x80
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001cca:	699a      	ldr	r2, [r3, #24]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001ccc:	0549      	lsls	r1, r1, #21
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001cce:	4002      	ands	r2, r0
 8001cd0:	9200      	str	r2, [sp, #0]
 8001cd2:	9a00      	ldr	r2, [sp, #0]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001cd4:	69da      	ldr	r2, [r3, #28]
 8001cd6:	430a      	orrs	r2, r1
 8001cd8:	61da      	str	r2, [r3, #28]
 8001cda:	69db      	ldr	r3, [r3, #28]
 8001cdc:	400b      	ands	r3, r1
 8001cde:	9301      	str	r3, [sp, #4]
 8001ce0:	9b01      	ldr	r3, [sp, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001ce2:	b002      	add	sp, #8
 8001ce4:	4770      	bx	lr
 8001ce6:	46c0      	nop			; (mov r8, r8)
 8001ce8:	40021000 	.word	0x40021000

08001cec <NMI_Handler>:
 8001cec:	4770      	bx	lr

08001cee <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001cee:	e7fe      	b.n	8001cee <HardFault_Handler>

08001cf0 <SVC_Handler>:
 8001cf0:	4770      	bx	lr

08001cf2 <PendSV_Handler>:

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001cf2:	4770      	bx	lr

08001cf4 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001cf4:	b510      	push	{r4, lr}
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001cf6:	f7fe fabd 	bl	8000274 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001cfa:	bd10      	pop	{r4, pc}

08001cfc <_sbrk>:
{
	extern char end asm("end");
	static char *heap_end;
	char *prev_heap_end;

	if (heap_end == 0)
 8001cfc:	4b0a      	ldr	r3, [pc, #40]	; (8001d28 <_sbrk+0x2c>)
{
 8001cfe:	b510      	push	{r4, lr}
	if (heap_end == 0)
 8001d00:	6819      	ldr	r1, [r3, #0]
{
 8001d02:	0002      	movs	r2, r0
	if (heap_end == 0)
 8001d04:	2900      	cmp	r1, #0
 8001d06:	d101      	bne.n	8001d0c <_sbrk+0x10>
		heap_end = &end;
 8001d08:	4908      	ldr	r1, [pc, #32]	; (8001d2c <_sbrk+0x30>)
 8001d0a:	6019      	str	r1, [r3, #0]

	prev_heap_end = heap_end;
	if (heap_end + incr > stack_ptr)
 8001d0c:	4669      	mov	r1, sp
	prev_heap_end = heap_end;
 8001d0e:	6818      	ldr	r0, [r3, #0]
	if (heap_end + incr > stack_ptr)
 8001d10:	1882      	adds	r2, r0, r2
 8001d12:	428a      	cmp	r2, r1
 8001d14:	d906      	bls.n	8001d24 <_sbrk+0x28>
	{
//		write(1, "Heap and stack collision\n", 25);
//		abort();
		errno = ENOMEM;
 8001d16:	f000 f865 	bl	8001de4 <__errno>
 8001d1a:	230c      	movs	r3, #12
 8001d1c:	6003      	str	r3, [r0, #0]
		return (caddr_t) -1;
 8001d1e:	2001      	movs	r0, #1
 8001d20:	4240      	negs	r0, r0
	}

	heap_end += incr;

	return (caddr_t) prev_heap_end;
}
 8001d22:	bd10      	pop	{r4, pc}
	heap_end += incr;
 8001d24:	601a      	str	r2, [r3, #0]
	return (caddr_t) prev_heap_end;
 8001d26:	e7fc      	b.n	8001d22 <_sbrk+0x26>
 8001d28:	200000f0 	.word	0x200000f0
 8001d2c:	2000023c 	.word	0x2000023c

08001d30 <SystemInit>:
  */
void SystemInit(void)
{
  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001U;
 8001d30:	2101      	movs	r1, #1
 8001d32:	4b11      	ldr	r3, [pc, #68]	; (8001d78 <SystemInit+0x48>)
#if defined (STM32F051x8) || defined (STM32F058x8)
  /* Reset SW[1:0], HPRE[3:0], PPRE[2:0], ADCPRE and MCOSEL[2:0] bits */
  RCC->CFGR &= (uint32_t)0xF8FFB80CU;
#else
  /* Reset SW[1:0], HPRE[3:0], PPRE[2:0], ADCPRE, MCOSEL[2:0], MCOPRE[2:0] and PLLNODIV bits */
  RCC->CFGR &= (uint32_t)0x08FFB80CU;
 8001d34:	4811      	ldr	r0, [pc, #68]	; (8001d7c <SystemInit+0x4c>)
  RCC->CR |= (uint32_t)0x00000001U;
 8001d36:	681a      	ldr	r2, [r3, #0]
 8001d38:	430a      	orrs	r2, r1
 8001d3a:	601a      	str	r2, [r3, #0]
  RCC->CFGR &= (uint32_t)0x08FFB80CU;
 8001d3c:	685a      	ldr	r2, [r3, #4]
 8001d3e:	4002      	ands	r2, r0
 8001d40:	605a      	str	r2, [r3, #4]
#endif /* STM32F051x8 or STM32F058x8 */
  
  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFFFU;
 8001d42:	681a      	ldr	r2, [r3, #0]
 8001d44:	480e      	ldr	r0, [pc, #56]	; (8001d80 <SystemInit+0x50>)
 8001d46:	4002      	ands	r2, r0
 8001d48:	601a      	str	r2, [r3, #0]

  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFFU;
 8001d4a:	681a      	ldr	r2, [r3, #0]
 8001d4c:	480d      	ldr	r0, [pc, #52]	; (8001d84 <SystemInit+0x54>)
 8001d4e:	4002      	ands	r2, r0
 8001d50:	601a      	str	r2, [r3, #0]

  /* Reset PLLSRC, PLLXTPRE and PLLMUL[3:0] bits */
  RCC->CFGR &= (uint32_t)0xFFC0FFFFU;
 8001d52:	685a      	ldr	r2, [r3, #4]
 8001d54:	480c      	ldr	r0, [pc, #48]	; (8001d88 <SystemInit+0x58>)
 8001d56:	4002      	ands	r2, r0

  /* Reset PREDIV[3:0] bits */
  RCC->CFGR2 &= (uint32_t)0xFFFFFFF0U;
 8001d58:	200f      	movs	r0, #15
  RCC->CFGR &= (uint32_t)0xFFC0FFFFU;
 8001d5a:	605a      	str	r2, [r3, #4]
  RCC->CFGR2 &= (uint32_t)0xFFFFFFF0U;
 8001d5c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001d5e:	4382      	bics	r2, r0
 8001d60:	62da      	str	r2, [r3, #44]	; 0x2c
#elif defined (STM32F091xC) || defined (STM32F098xx)
  /* Reset USART3SW[1:0], USART2SW[1:0], USART1SW[1:0], I2C1SW, CECSW and ADCSW bits */
  RCC->CFGR3 &= (uint32_t)0xFFF0FEACU;
#elif defined (STM32F030x6) || defined (STM32F030x8) || defined (STM32F031x6) || defined (STM32F038xx) || defined (STM32F030xC)
  /* Reset USART1SW[1:0], I2C1SW and ADCSW bits */
  RCC->CFGR3 &= (uint32_t)0xFFFFFEECU;
 8001d62:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001d64:	4809      	ldr	r0, [pc, #36]	; (8001d8c <SystemInit+0x5c>)
 8001d66:	4002      	ands	r2, r0
 8001d68:	631a      	str	r2, [r3, #48]	; 0x30
#else
 #warning "No target selected"
#endif

  /* Reset HSI14 bit */
  RCC->CR2 &= (uint32_t)0xFFFFFFFEU;
 8001d6a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001d6c:	438a      	bics	r2, r1
 8001d6e:	635a      	str	r2, [r3, #52]	; 0x34

  /* Disable all interrupts */
  RCC->CIR = 0x00000000U;
 8001d70:	2200      	movs	r2, #0
 8001d72:	609a      	str	r2, [r3, #8]

}
 8001d74:	4770      	bx	lr
 8001d76:	46c0      	nop			; (mov r8, r8)
 8001d78:	40021000 	.word	0x40021000
 8001d7c:	08ffb80c 	.word	0x08ffb80c
 8001d80:	fef6ffff 	.word	0xfef6ffff
 8001d84:	fffbffff 	.word	0xfffbffff
 8001d88:	ffc0ffff 	.word	0xffc0ffff
 8001d8c:	fffffeec 	.word	0xfffffeec

08001d90 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8001d90:	480d      	ldr	r0, [pc, #52]	; (8001dc8 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8001d92:	4685      	mov	sp, r0

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001d94:	480d      	ldr	r0, [pc, #52]	; (8001dcc <LoopForever+0x6>)
  ldr r1, =_edata
 8001d96:	490e      	ldr	r1, [pc, #56]	; (8001dd0 <LoopForever+0xa>)
  ldr r2, =_sidata
 8001d98:	4a0e      	ldr	r2, [pc, #56]	; (8001dd4 <LoopForever+0xe>)
  movs r3, #0
 8001d9a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001d9c:	e002      	b.n	8001da4 <LoopCopyDataInit>

08001d9e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001d9e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001da0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001da2:	3304      	adds	r3, #4

08001da4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001da4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001da6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001da8:	d3f9      	bcc.n	8001d9e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001daa:	4a0b      	ldr	r2, [pc, #44]	; (8001dd8 <LoopForever+0x12>)
  ldr r4, =_ebss
 8001dac:	4c0b      	ldr	r4, [pc, #44]	; (8001ddc <LoopForever+0x16>)
  movs r3, #0
 8001dae:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001db0:	e001      	b.n	8001db6 <LoopFillZerobss>

08001db2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001db2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001db4:	3204      	adds	r2, #4

08001db6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001db6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001db8:	d3fb      	bcc.n	8001db2 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit
 8001dba:	f7ff ffb9 	bl	8001d30 <SystemInit>
/* Call static constructors */
  bl __libc_init_array
 8001dbe:	f000 f817 	bl	8001df0 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8001dc2:	f7ff fef9 	bl	8001bb8 <main>

08001dc6 <LoopForever>:

LoopForever:
    b LoopForever
 8001dc6:	e7fe      	b.n	8001dc6 <LoopForever>
  ldr   r0, =_estack
 8001dc8:	20001000 	.word	0x20001000
  ldr r0, =_sdata
 8001dcc:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001dd0:	200000a4 	.word	0x200000a4
  ldr r2, =_sidata
 8001dd4:	08002804 	.word	0x08002804
  ldr r2, =_sbss
 8001dd8:	200000a4 	.word	0x200000a4
  ldr r4, =_ebss
 8001ddc:	2000023c 	.word	0x2000023c

08001de0 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8001de0:	e7fe      	b.n	8001de0 <ADC1_IRQHandler>
	...

08001de4 <__errno>:
 8001de4:	4b01      	ldr	r3, [pc, #4]	; (8001dec <__errno+0x8>)
 8001de6:	6818      	ldr	r0, [r3, #0]
 8001de8:	4770      	bx	lr
 8001dea:	46c0      	nop			; (mov r8, r8)
 8001dec:	20000040 	.word	0x20000040

08001df0 <__libc_init_array>:
 8001df0:	b570      	push	{r4, r5, r6, lr}
 8001df2:	2600      	movs	r6, #0
 8001df4:	4d0c      	ldr	r5, [pc, #48]	; (8001e28 <__libc_init_array+0x38>)
 8001df6:	4c0d      	ldr	r4, [pc, #52]	; (8001e2c <__libc_init_array+0x3c>)
 8001df8:	1b64      	subs	r4, r4, r5
 8001dfa:	10a4      	asrs	r4, r4, #2
 8001dfc:	42a6      	cmp	r6, r4
 8001dfe:	d109      	bne.n	8001e14 <__libc_init_array+0x24>
 8001e00:	2600      	movs	r6, #0
 8001e02:	f000 fc57 	bl	80026b4 <_init>
 8001e06:	4d0a      	ldr	r5, [pc, #40]	; (8001e30 <__libc_init_array+0x40>)
 8001e08:	4c0a      	ldr	r4, [pc, #40]	; (8001e34 <__libc_init_array+0x44>)
 8001e0a:	1b64      	subs	r4, r4, r5
 8001e0c:	10a4      	asrs	r4, r4, #2
 8001e0e:	42a6      	cmp	r6, r4
 8001e10:	d105      	bne.n	8001e1e <__libc_init_array+0x2e>
 8001e12:	bd70      	pop	{r4, r5, r6, pc}
 8001e14:	00b3      	lsls	r3, r6, #2
 8001e16:	58eb      	ldr	r3, [r5, r3]
 8001e18:	4798      	blx	r3
 8001e1a:	3601      	adds	r6, #1
 8001e1c:	e7ee      	b.n	8001dfc <__libc_init_array+0xc>
 8001e1e:	00b3      	lsls	r3, r6, #2
 8001e20:	58eb      	ldr	r3, [r5, r3]
 8001e22:	4798      	blx	r3
 8001e24:	3601      	adds	r6, #1
 8001e26:	e7f2      	b.n	8001e0e <__libc_init_array+0x1e>
 8001e28:	080027fc 	.word	0x080027fc
 8001e2c:	080027fc 	.word	0x080027fc
 8001e30:	080027fc 	.word	0x080027fc
 8001e34:	08002800 	.word	0x08002800

08001e38 <memcpy>:
 8001e38:	2300      	movs	r3, #0
 8001e3a:	b510      	push	{r4, lr}
 8001e3c:	429a      	cmp	r2, r3
 8001e3e:	d100      	bne.n	8001e42 <memcpy+0xa>
 8001e40:	bd10      	pop	{r4, pc}
 8001e42:	5ccc      	ldrb	r4, [r1, r3]
 8001e44:	54c4      	strb	r4, [r0, r3]
 8001e46:	3301      	adds	r3, #1
 8001e48:	e7f8      	b.n	8001e3c <memcpy+0x4>

08001e4a <memset>:
 8001e4a:	0003      	movs	r3, r0
 8001e4c:	1882      	adds	r2, r0, r2
 8001e4e:	4293      	cmp	r3, r2
 8001e50:	d100      	bne.n	8001e54 <memset+0xa>
 8001e52:	4770      	bx	lr
 8001e54:	7019      	strb	r1, [r3, #0]
 8001e56:	3301      	adds	r3, #1
 8001e58:	e7f9      	b.n	8001e4e <memset+0x4>

08001e5a <_vsniprintf_r>:
 8001e5a:	b530      	push	{r4, r5, lr}
 8001e5c:	0014      	movs	r4, r2
 8001e5e:	b09b      	sub	sp, #108	; 0x6c
 8001e60:	0005      	movs	r5, r0
 8001e62:	001a      	movs	r2, r3
 8001e64:	2c00      	cmp	r4, #0
 8001e66:	da05      	bge.n	8001e74 <_vsniprintf_r+0x1a>
 8001e68:	238b      	movs	r3, #139	; 0x8b
 8001e6a:	6003      	str	r3, [r0, #0]
 8001e6c:	2001      	movs	r0, #1
 8001e6e:	4240      	negs	r0, r0
 8001e70:	b01b      	add	sp, #108	; 0x6c
 8001e72:	bd30      	pop	{r4, r5, pc}
 8001e74:	2382      	movs	r3, #130	; 0x82
 8001e76:	4668      	mov	r0, sp
 8001e78:	009b      	lsls	r3, r3, #2
 8001e7a:	8183      	strh	r3, [r0, #12]
 8001e7c:	2300      	movs	r3, #0
 8001e7e:	9100      	str	r1, [sp, #0]
 8001e80:	9104      	str	r1, [sp, #16]
 8001e82:	429c      	cmp	r4, r3
 8001e84:	d000      	beq.n	8001e88 <_vsniprintf_r+0x2e>
 8001e86:	1e63      	subs	r3, r4, #1
 8001e88:	9302      	str	r3, [sp, #8]
 8001e8a:	9305      	str	r3, [sp, #20]
 8001e8c:	2301      	movs	r3, #1
 8001e8e:	4669      	mov	r1, sp
 8001e90:	425b      	negs	r3, r3
 8001e92:	81cb      	strh	r3, [r1, #14]
 8001e94:	0028      	movs	r0, r5
 8001e96:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 8001e98:	f000 f8d6 	bl	8002048 <_svfiprintf_r>
 8001e9c:	1c43      	adds	r3, r0, #1
 8001e9e:	da01      	bge.n	8001ea4 <_vsniprintf_r+0x4a>
 8001ea0:	238b      	movs	r3, #139	; 0x8b
 8001ea2:	602b      	str	r3, [r5, #0]
 8001ea4:	2c00      	cmp	r4, #0
 8001ea6:	d0e3      	beq.n	8001e70 <_vsniprintf_r+0x16>
 8001ea8:	2300      	movs	r3, #0
 8001eaa:	9a00      	ldr	r2, [sp, #0]
 8001eac:	7013      	strb	r3, [r2, #0]
 8001eae:	e7df      	b.n	8001e70 <_vsniprintf_r+0x16>

08001eb0 <vsniprintf>:
 8001eb0:	b507      	push	{r0, r1, r2, lr}
 8001eb2:	9300      	str	r3, [sp, #0]
 8001eb4:	0013      	movs	r3, r2
 8001eb6:	000a      	movs	r2, r1
 8001eb8:	0001      	movs	r1, r0
 8001eba:	4802      	ldr	r0, [pc, #8]	; (8001ec4 <vsniprintf+0x14>)
 8001ebc:	6800      	ldr	r0, [r0, #0]
 8001ebe:	f7ff ffcc 	bl	8001e5a <_vsniprintf_r>
 8001ec2:	bd0e      	pop	{r1, r2, r3, pc}
 8001ec4:	20000040 	.word	0x20000040

08001ec8 <_malloc_r>:
 8001ec8:	2303      	movs	r3, #3
 8001eca:	b570      	push	{r4, r5, r6, lr}
 8001ecc:	1ccd      	adds	r5, r1, #3
 8001ece:	439d      	bics	r5, r3
 8001ed0:	3508      	adds	r5, #8
 8001ed2:	0006      	movs	r6, r0
 8001ed4:	2d0c      	cmp	r5, #12
 8001ed6:	d21e      	bcs.n	8001f16 <_malloc_r+0x4e>
 8001ed8:	250c      	movs	r5, #12
 8001eda:	42a9      	cmp	r1, r5
 8001edc:	d81d      	bhi.n	8001f1a <_malloc_r+0x52>
 8001ede:	0030      	movs	r0, r6
 8001ee0:	f000 fb6d 	bl	80025be <__malloc_lock>
 8001ee4:	4a25      	ldr	r2, [pc, #148]	; (8001f7c <_malloc_r+0xb4>)
 8001ee6:	6814      	ldr	r4, [r2, #0]
 8001ee8:	0021      	movs	r1, r4
 8001eea:	2900      	cmp	r1, #0
 8001eec:	d119      	bne.n	8001f22 <_malloc_r+0x5a>
 8001eee:	4c24      	ldr	r4, [pc, #144]	; (8001f80 <_malloc_r+0xb8>)
 8001ef0:	6823      	ldr	r3, [r4, #0]
 8001ef2:	2b00      	cmp	r3, #0
 8001ef4:	d103      	bne.n	8001efe <_malloc_r+0x36>
 8001ef6:	0030      	movs	r0, r6
 8001ef8:	f000 fb32 	bl	8002560 <_sbrk_r>
 8001efc:	6020      	str	r0, [r4, #0]
 8001efe:	0029      	movs	r1, r5
 8001f00:	0030      	movs	r0, r6
 8001f02:	f000 fb2d 	bl	8002560 <_sbrk_r>
 8001f06:	1c43      	adds	r3, r0, #1
 8001f08:	d12c      	bne.n	8001f64 <_malloc_r+0x9c>
 8001f0a:	230c      	movs	r3, #12
 8001f0c:	0030      	movs	r0, r6
 8001f0e:	6033      	str	r3, [r6, #0]
 8001f10:	f000 fb56 	bl	80025c0 <__malloc_unlock>
 8001f14:	e003      	b.n	8001f1e <_malloc_r+0x56>
 8001f16:	2d00      	cmp	r5, #0
 8001f18:	dadf      	bge.n	8001eda <_malloc_r+0x12>
 8001f1a:	230c      	movs	r3, #12
 8001f1c:	6033      	str	r3, [r6, #0]
 8001f1e:	2000      	movs	r0, #0
 8001f20:	bd70      	pop	{r4, r5, r6, pc}
 8001f22:	680b      	ldr	r3, [r1, #0]
 8001f24:	1b5b      	subs	r3, r3, r5
 8001f26:	d41a      	bmi.n	8001f5e <_malloc_r+0x96>
 8001f28:	2b0b      	cmp	r3, #11
 8001f2a:	d903      	bls.n	8001f34 <_malloc_r+0x6c>
 8001f2c:	600b      	str	r3, [r1, #0]
 8001f2e:	18cc      	adds	r4, r1, r3
 8001f30:	6025      	str	r5, [r4, #0]
 8001f32:	e003      	b.n	8001f3c <_malloc_r+0x74>
 8001f34:	428c      	cmp	r4, r1
 8001f36:	d10e      	bne.n	8001f56 <_malloc_r+0x8e>
 8001f38:	6863      	ldr	r3, [r4, #4]
 8001f3a:	6013      	str	r3, [r2, #0]
 8001f3c:	0030      	movs	r0, r6
 8001f3e:	f000 fb3f 	bl	80025c0 <__malloc_unlock>
 8001f42:	0020      	movs	r0, r4
 8001f44:	2207      	movs	r2, #7
 8001f46:	300b      	adds	r0, #11
 8001f48:	1d23      	adds	r3, r4, #4
 8001f4a:	4390      	bics	r0, r2
 8001f4c:	1ac3      	subs	r3, r0, r3
 8001f4e:	d0e7      	beq.n	8001f20 <_malloc_r+0x58>
 8001f50:	425a      	negs	r2, r3
 8001f52:	50e2      	str	r2, [r4, r3]
 8001f54:	e7e4      	b.n	8001f20 <_malloc_r+0x58>
 8001f56:	684b      	ldr	r3, [r1, #4]
 8001f58:	6063      	str	r3, [r4, #4]
 8001f5a:	000c      	movs	r4, r1
 8001f5c:	e7ee      	b.n	8001f3c <_malloc_r+0x74>
 8001f5e:	000c      	movs	r4, r1
 8001f60:	6849      	ldr	r1, [r1, #4]
 8001f62:	e7c2      	b.n	8001eea <_malloc_r+0x22>
 8001f64:	2303      	movs	r3, #3
 8001f66:	1cc4      	adds	r4, r0, #3
 8001f68:	439c      	bics	r4, r3
 8001f6a:	42a0      	cmp	r0, r4
 8001f6c:	d0e0      	beq.n	8001f30 <_malloc_r+0x68>
 8001f6e:	1a21      	subs	r1, r4, r0
 8001f70:	0030      	movs	r0, r6
 8001f72:	f000 faf5 	bl	8002560 <_sbrk_r>
 8001f76:	1c43      	adds	r3, r0, #1
 8001f78:	d1da      	bne.n	8001f30 <_malloc_r+0x68>
 8001f7a:	e7c6      	b.n	8001f0a <_malloc_r+0x42>
 8001f7c:	200000f4 	.word	0x200000f4
 8001f80:	200000f8 	.word	0x200000f8

08001f84 <__ssputs_r>:
 8001f84:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001f86:	688e      	ldr	r6, [r1, #8]
 8001f88:	b085      	sub	sp, #20
 8001f8a:	0007      	movs	r7, r0
 8001f8c:	000c      	movs	r4, r1
 8001f8e:	9203      	str	r2, [sp, #12]
 8001f90:	9301      	str	r3, [sp, #4]
 8001f92:	429e      	cmp	r6, r3
 8001f94:	d839      	bhi.n	800200a <__ssputs_r+0x86>
 8001f96:	2390      	movs	r3, #144	; 0x90
 8001f98:	898a      	ldrh	r2, [r1, #12]
 8001f9a:	00db      	lsls	r3, r3, #3
 8001f9c:	421a      	tst	r2, r3
 8001f9e:	d034      	beq.n	800200a <__ssputs_r+0x86>
 8001fa0:	2503      	movs	r5, #3
 8001fa2:	6909      	ldr	r1, [r1, #16]
 8001fa4:	6823      	ldr	r3, [r4, #0]
 8001fa6:	1a5b      	subs	r3, r3, r1
 8001fa8:	9302      	str	r3, [sp, #8]
 8001faa:	6963      	ldr	r3, [r4, #20]
 8001fac:	9802      	ldr	r0, [sp, #8]
 8001fae:	435d      	muls	r5, r3
 8001fb0:	0feb      	lsrs	r3, r5, #31
 8001fb2:	195d      	adds	r5, r3, r5
 8001fb4:	9b01      	ldr	r3, [sp, #4]
 8001fb6:	106d      	asrs	r5, r5, #1
 8001fb8:	3301      	adds	r3, #1
 8001fba:	181b      	adds	r3, r3, r0
 8001fbc:	42ab      	cmp	r3, r5
 8001fbe:	d900      	bls.n	8001fc2 <__ssputs_r+0x3e>
 8001fc0:	001d      	movs	r5, r3
 8001fc2:	0553      	lsls	r3, r2, #21
 8001fc4:	d532      	bpl.n	800202c <__ssputs_r+0xa8>
 8001fc6:	0029      	movs	r1, r5
 8001fc8:	0038      	movs	r0, r7
 8001fca:	f7ff ff7d 	bl	8001ec8 <_malloc_r>
 8001fce:	1e06      	subs	r6, r0, #0
 8001fd0:	d109      	bne.n	8001fe6 <__ssputs_r+0x62>
 8001fd2:	230c      	movs	r3, #12
 8001fd4:	603b      	str	r3, [r7, #0]
 8001fd6:	2340      	movs	r3, #64	; 0x40
 8001fd8:	2001      	movs	r0, #1
 8001fda:	89a2      	ldrh	r2, [r4, #12]
 8001fdc:	4240      	negs	r0, r0
 8001fde:	4313      	orrs	r3, r2
 8001fe0:	81a3      	strh	r3, [r4, #12]
 8001fe2:	b005      	add	sp, #20
 8001fe4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001fe6:	9a02      	ldr	r2, [sp, #8]
 8001fe8:	6921      	ldr	r1, [r4, #16]
 8001fea:	f7ff ff25 	bl	8001e38 <memcpy>
 8001fee:	89a3      	ldrh	r3, [r4, #12]
 8001ff0:	4a14      	ldr	r2, [pc, #80]	; (8002044 <__ssputs_r+0xc0>)
 8001ff2:	401a      	ands	r2, r3
 8001ff4:	2380      	movs	r3, #128	; 0x80
 8001ff6:	4313      	orrs	r3, r2
 8001ff8:	81a3      	strh	r3, [r4, #12]
 8001ffa:	9b02      	ldr	r3, [sp, #8]
 8001ffc:	6126      	str	r6, [r4, #16]
 8001ffe:	18f6      	adds	r6, r6, r3
 8002000:	6026      	str	r6, [r4, #0]
 8002002:	6165      	str	r5, [r4, #20]
 8002004:	9e01      	ldr	r6, [sp, #4]
 8002006:	1aed      	subs	r5, r5, r3
 8002008:	60a5      	str	r5, [r4, #8]
 800200a:	9b01      	ldr	r3, [sp, #4]
 800200c:	42b3      	cmp	r3, r6
 800200e:	d200      	bcs.n	8002012 <__ssputs_r+0x8e>
 8002010:	001e      	movs	r6, r3
 8002012:	0032      	movs	r2, r6
 8002014:	9903      	ldr	r1, [sp, #12]
 8002016:	6820      	ldr	r0, [r4, #0]
 8002018:	f000 fabf 	bl	800259a <memmove>
 800201c:	68a3      	ldr	r3, [r4, #8]
 800201e:	2000      	movs	r0, #0
 8002020:	1b9b      	subs	r3, r3, r6
 8002022:	60a3      	str	r3, [r4, #8]
 8002024:	6823      	ldr	r3, [r4, #0]
 8002026:	199e      	adds	r6, r3, r6
 8002028:	6026      	str	r6, [r4, #0]
 800202a:	e7da      	b.n	8001fe2 <__ssputs_r+0x5e>
 800202c:	002a      	movs	r2, r5
 800202e:	0038      	movs	r0, r7
 8002030:	f000 fb12 	bl	8002658 <_realloc_r>
 8002034:	1e06      	subs	r6, r0, #0
 8002036:	d1e0      	bne.n	8001ffa <__ssputs_r+0x76>
 8002038:	6921      	ldr	r1, [r4, #16]
 800203a:	0038      	movs	r0, r7
 800203c:	f000 fac2 	bl	80025c4 <_free_r>
 8002040:	e7c7      	b.n	8001fd2 <__ssputs_r+0x4e>
 8002042:	46c0      	nop			; (mov r8, r8)
 8002044:	fffffb7f 	.word	0xfffffb7f

08002048 <_svfiprintf_r>:
 8002048:	b5f0      	push	{r4, r5, r6, r7, lr}
 800204a:	b09f      	sub	sp, #124	; 0x7c
 800204c:	9002      	str	r0, [sp, #8]
 800204e:	9305      	str	r3, [sp, #20]
 8002050:	898b      	ldrh	r3, [r1, #12]
 8002052:	000f      	movs	r7, r1
 8002054:	0016      	movs	r6, r2
 8002056:	061b      	lsls	r3, r3, #24
 8002058:	d511      	bpl.n	800207e <_svfiprintf_r+0x36>
 800205a:	690b      	ldr	r3, [r1, #16]
 800205c:	2b00      	cmp	r3, #0
 800205e:	d10e      	bne.n	800207e <_svfiprintf_r+0x36>
 8002060:	2140      	movs	r1, #64	; 0x40
 8002062:	f7ff ff31 	bl	8001ec8 <_malloc_r>
 8002066:	6038      	str	r0, [r7, #0]
 8002068:	6138      	str	r0, [r7, #16]
 800206a:	2800      	cmp	r0, #0
 800206c:	d105      	bne.n	800207a <_svfiprintf_r+0x32>
 800206e:	230c      	movs	r3, #12
 8002070:	9a02      	ldr	r2, [sp, #8]
 8002072:	3801      	subs	r0, #1
 8002074:	6013      	str	r3, [r2, #0]
 8002076:	b01f      	add	sp, #124	; 0x7c
 8002078:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800207a:	2340      	movs	r3, #64	; 0x40
 800207c:	617b      	str	r3, [r7, #20]
 800207e:	2300      	movs	r3, #0
 8002080:	ad06      	add	r5, sp, #24
 8002082:	616b      	str	r3, [r5, #20]
 8002084:	3320      	adds	r3, #32
 8002086:	766b      	strb	r3, [r5, #25]
 8002088:	3310      	adds	r3, #16
 800208a:	76ab      	strb	r3, [r5, #26]
 800208c:	0034      	movs	r4, r6
 800208e:	7823      	ldrb	r3, [r4, #0]
 8002090:	2b00      	cmp	r3, #0
 8002092:	d147      	bne.n	8002124 <_svfiprintf_r+0xdc>
 8002094:	1ba3      	subs	r3, r4, r6
 8002096:	9304      	str	r3, [sp, #16]
 8002098:	d00d      	beq.n	80020b6 <_svfiprintf_r+0x6e>
 800209a:	1ba3      	subs	r3, r4, r6
 800209c:	0032      	movs	r2, r6
 800209e:	0039      	movs	r1, r7
 80020a0:	9802      	ldr	r0, [sp, #8]
 80020a2:	f7ff ff6f 	bl	8001f84 <__ssputs_r>
 80020a6:	1c43      	adds	r3, r0, #1
 80020a8:	d100      	bne.n	80020ac <_svfiprintf_r+0x64>
 80020aa:	e0b5      	b.n	8002218 <_svfiprintf_r+0x1d0>
 80020ac:	696a      	ldr	r2, [r5, #20]
 80020ae:	9b04      	ldr	r3, [sp, #16]
 80020b0:	4694      	mov	ip, r2
 80020b2:	4463      	add	r3, ip
 80020b4:	616b      	str	r3, [r5, #20]
 80020b6:	7823      	ldrb	r3, [r4, #0]
 80020b8:	2b00      	cmp	r3, #0
 80020ba:	d100      	bne.n	80020be <_svfiprintf_r+0x76>
 80020bc:	e0ac      	b.n	8002218 <_svfiprintf_r+0x1d0>
 80020be:	2201      	movs	r2, #1
 80020c0:	2300      	movs	r3, #0
 80020c2:	4252      	negs	r2, r2
 80020c4:	606a      	str	r2, [r5, #4]
 80020c6:	a902      	add	r1, sp, #8
 80020c8:	3254      	adds	r2, #84	; 0x54
 80020ca:	1852      	adds	r2, r2, r1
 80020cc:	3401      	adds	r4, #1
 80020ce:	602b      	str	r3, [r5, #0]
 80020d0:	60eb      	str	r3, [r5, #12]
 80020d2:	60ab      	str	r3, [r5, #8]
 80020d4:	7013      	strb	r3, [r2, #0]
 80020d6:	65ab      	str	r3, [r5, #88]	; 0x58
 80020d8:	4e58      	ldr	r6, [pc, #352]	; (800223c <_svfiprintf_r+0x1f4>)
 80020da:	2205      	movs	r2, #5
 80020dc:	7821      	ldrb	r1, [r4, #0]
 80020de:	0030      	movs	r0, r6
 80020e0:	f000 fa50 	bl	8002584 <memchr>
 80020e4:	1c62      	adds	r2, r4, #1
 80020e6:	2800      	cmp	r0, #0
 80020e8:	d120      	bne.n	800212c <_svfiprintf_r+0xe4>
 80020ea:	6829      	ldr	r1, [r5, #0]
 80020ec:	06cb      	lsls	r3, r1, #27
 80020ee:	d504      	bpl.n	80020fa <_svfiprintf_r+0xb2>
 80020f0:	2353      	movs	r3, #83	; 0x53
 80020f2:	ae02      	add	r6, sp, #8
 80020f4:	3020      	adds	r0, #32
 80020f6:	199b      	adds	r3, r3, r6
 80020f8:	7018      	strb	r0, [r3, #0]
 80020fa:	070b      	lsls	r3, r1, #28
 80020fc:	d504      	bpl.n	8002108 <_svfiprintf_r+0xc0>
 80020fe:	2353      	movs	r3, #83	; 0x53
 8002100:	202b      	movs	r0, #43	; 0x2b
 8002102:	ae02      	add	r6, sp, #8
 8002104:	199b      	adds	r3, r3, r6
 8002106:	7018      	strb	r0, [r3, #0]
 8002108:	7823      	ldrb	r3, [r4, #0]
 800210a:	2b2a      	cmp	r3, #42	; 0x2a
 800210c:	d016      	beq.n	800213c <_svfiprintf_r+0xf4>
 800210e:	2000      	movs	r0, #0
 8002110:	210a      	movs	r1, #10
 8002112:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8002114:	7822      	ldrb	r2, [r4, #0]
 8002116:	3a30      	subs	r2, #48	; 0x30
 8002118:	2a09      	cmp	r2, #9
 800211a:	d955      	bls.n	80021c8 <_svfiprintf_r+0x180>
 800211c:	2800      	cmp	r0, #0
 800211e:	d015      	beq.n	800214c <_svfiprintf_r+0x104>
 8002120:	9309      	str	r3, [sp, #36]	; 0x24
 8002122:	e013      	b.n	800214c <_svfiprintf_r+0x104>
 8002124:	2b25      	cmp	r3, #37	; 0x25
 8002126:	d0b5      	beq.n	8002094 <_svfiprintf_r+0x4c>
 8002128:	3401      	adds	r4, #1
 800212a:	e7b0      	b.n	800208e <_svfiprintf_r+0x46>
 800212c:	2301      	movs	r3, #1
 800212e:	1b80      	subs	r0, r0, r6
 8002130:	4083      	lsls	r3, r0
 8002132:	6829      	ldr	r1, [r5, #0]
 8002134:	0014      	movs	r4, r2
 8002136:	430b      	orrs	r3, r1
 8002138:	602b      	str	r3, [r5, #0]
 800213a:	e7cd      	b.n	80020d8 <_svfiprintf_r+0x90>
 800213c:	9b05      	ldr	r3, [sp, #20]
 800213e:	1d18      	adds	r0, r3, #4
 8002140:	681b      	ldr	r3, [r3, #0]
 8002142:	9005      	str	r0, [sp, #20]
 8002144:	2b00      	cmp	r3, #0
 8002146:	db39      	blt.n	80021bc <_svfiprintf_r+0x174>
 8002148:	9309      	str	r3, [sp, #36]	; 0x24
 800214a:	0014      	movs	r4, r2
 800214c:	7823      	ldrb	r3, [r4, #0]
 800214e:	2b2e      	cmp	r3, #46	; 0x2e
 8002150:	d10b      	bne.n	800216a <_svfiprintf_r+0x122>
 8002152:	7863      	ldrb	r3, [r4, #1]
 8002154:	1c62      	adds	r2, r4, #1
 8002156:	2b2a      	cmp	r3, #42	; 0x2a
 8002158:	d13e      	bne.n	80021d8 <_svfiprintf_r+0x190>
 800215a:	9b05      	ldr	r3, [sp, #20]
 800215c:	3402      	adds	r4, #2
 800215e:	1d1a      	adds	r2, r3, #4
 8002160:	681b      	ldr	r3, [r3, #0]
 8002162:	9205      	str	r2, [sp, #20]
 8002164:	2b00      	cmp	r3, #0
 8002166:	db34      	blt.n	80021d2 <_svfiprintf_r+0x18a>
 8002168:	9307      	str	r3, [sp, #28]
 800216a:	4e35      	ldr	r6, [pc, #212]	; (8002240 <_svfiprintf_r+0x1f8>)
 800216c:	7821      	ldrb	r1, [r4, #0]
 800216e:	2203      	movs	r2, #3
 8002170:	0030      	movs	r0, r6
 8002172:	f000 fa07 	bl	8002584 <memchr>
 8002176:	2800      	cmp	r0, #0
 8002178:	d006      	beq.n	8002188 <_svfiprintf_r+0x140>
 800217a:	2340      	movs	r3, #64	; 0x40
 800217c:	1b80      	subs	r0, r0, r6
 800217e:	4083      	lsls	r3, r0
 8002180:	682a      	ldr	r2, [r5, #0]
 8002182:	3401      	adds	r4, #1
 8002184:	4313      	orrs	r3, r2
 8002186:	602b      	str	r3, [r5, #0]
 8002188:	7821      	ldrb	r1, [r4, #0]
 800218a:	2206      	movs	r2, #6
 800218c:	482d      	ldr	r0, [pc, #180]	; (8002244 <_svfiprintf_r+0x1fc>)
 800218e:	1c66      	adds	r6, r4, #1
 8002190:	7629      	strb	r1, [r5, #24]
 8002192:	f000 f9f7 	bl	8002584 <memchr>
 8002196:	2800      	cmp	r0, #0
 8002198:	d046      	beq.n	8002228 <_svfiprintf_r+0x1e0>
 800219a:	4b2b      	ldr	r3, [pc, #172]	; (8002248 <_svfiprintf_r+0x200>)
 800219c:	2b00      	cmp	r3, #0
 800219e:	d12f      	bne.n	8002200 <_svfiprintf_r+0x1b8>
 80021a0:	6829      	ldr	r1, [r5, #0]
 80021a2:	9b05      	ldr	r3, [sp, #20]
 80021a4:	2207      	movs	r2, #7
 80021a6:	05c9      	lsls	r1, r1, #23
 80021a8:	d528      	bpl.n	80021fc <_svfiprintf_r+0x1b4>
 80021aa:	189b      	adds	r3, r3, r2
 80021ac:	4393      	bics	r3, r2
 80021ae:	3308      	adds	r3, #8
 80021b0:	9305      	str	r3, [sp, #20]
 80021b2:	696b      	ldr	r3, [r5, #20]
 80021b4:	9a03      	ldr	r2, [sp, #12]
 80021b6:	189b      	adds	r3, r3, r2
 80021b8:	616b      	str	r3, [r5, #20]
 80021ba:	e767      	b.n	800208c <_svfiprintf_r+0x44>
 80021bc:	425b      	negs	r3, r3
 80021be:	60eb      	str	r3, [r5, #12]
 80021c0:	2302      	movs	r3, #2
 80021c2:	430b      	orrs	r3, r1
 80021c4:	602b      	str	r3, [r5, #0]
 80021c6:	e7c0      	b.n	800214a <_svfiprintf_r+0x102>
 80021c8:	434b      	muls	r3, r1
 80021ca:	3401      	adds	r4, #1
 80021cc:	189b      	adds	r3, r3, r2
 80021ce:	2001      	movs	r0, #1
 80021d0:	e7a0      	b.n	8002114 <_svfiprintf_r+0xcc>
 80021d2:	2301      	movs	r3, #1
 80021d4:	425b      	negs	r3, r3
 80021d6:	e7c7      	b.n	8002168 <_svfiprintf_r+0x120>
 80021d8:	2300      	movs	r3, #0
 80021da:	0014      	movs	r4, r2
 80021dc:	200a      	movs	r0, #10
 80021de:	001a      	movs	r2, r3
 80021e0:	606b      	str	r3, [r5, #4]
 80021e2:	7821      	ldrb	r1, [r4, #0]
 80021e4:	3930      	subs	r1, #48	; 0x30
 80021e6:	2909      	cmp	r1, #9
 80021e8:	d903      	bls.n	80021f2 <_svfiprintf_r+0x1aa>
 80021ea:	2b00      	cmp	r3, #0
 80021ec:	d0bd      	beq.n	800216a <_svfiprintf_r+0x122>
 80021ee:	9207      	str	r2, [sp, #28]
 80021f0:	e7bb      	b.n	800216a <_svfiprintf_r+0x122>
 80021f2:	4342      	muls	r2, r0
 80021f4:	3401      	adds	r4, #1
 80021f6:	1852      	adds	r2, r2, r1
 80021f8:	2301      	movs	r3, #1
 80021fa:	e7f2      	b.n	80021e2 <_svfiprintf_r+0x19a>
 80021fc:	3307      	adds	r3, #7
 80021fe:	e7d5      	b.n	80021ac <_svfiprintf_r+0x164>
 8002200:	ab05      	add	r3, sp, #20
 8002202:	9300      	str	r3, [sp, #0]
 8002204:	003a      	movs	r2, r7
 8002206:	4b11      	ldr	r3, [pc, #68]	; (800224c <_svfiprintf_r+0x204>)
 8002208:	0029      	movs	r1, r5
 800220a:	9802      	ldr	r0, [sp, #8]
 800220c:	e000      	b.n	8002210 <_svfiprintf_r+0x1c8>
 800220e:	bf00      	nop
 8002210:	9003      	str	r0, [sp, #12]
 8002212:	9b03      	ldr	r3, [sp, #12]
 8002214:	3301      	adds	r3, #1
 8002216:	d1cc      	bne.n	80021b2 <_svfiprintf_r+0x16a>
 8002218:	89bb      	ldrh	r3, [r7, #12]
 800221a:	980b      	ldr	r0, [sp, #44]	; 0x2c
 800221c:	065b      	lsls	r3, r3, #25
 800221e:	d400      	bmi.n	8002222 <_svfiprintf_r+0x1da>
 8002220:	e729      	b.n	8002076 <_svfiprintf_r+0x2e>
 8002222:	2001      	movs	r0, #1
 8002224:	4240      	negs	r0, r0
 8002226:	e726      	b.n	8002076 <_svfiprintf_r+0x2e>
 8002228:	ab05      	add	r3, sp, #20
 800222a:	9300      	str	r3, [sp, #0]
 800222c:	003a      	movs	r2, r7
 800222e:	4b07      	ldr	r3, [pc, #28]	; (800224c <_svfiprintf_r+0x204>)
 8002230:	0029      	movs	r1, r5
 8002232:	9802      	ldr	r0, [sp, #8]
 8002234:	f000 f87a 	bl	800232c <_printf_i>
 8002238:	e7ea      	b.n	8002210 <_svfiprintf_r+0x1c8>
 800223a:	46c0      	nop			; (mov r8, r8)
 800223c:	080027c8 	.word	0x080027c8
 8002240:	080027ce 	.word	0x080027ce
 8002244:	080027d2 	.word	0x080027d2
 8002248:	00000000 	.word	0x00000000
 800224c:	08001f85 	.word	0x08001f85

08002250 <_printf_common>:
 8002250:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8002252:	0015      	movs	r5, r2
 8002254:	9301      	str	r3, [sp, #4]
 8002256:	688a      	ldr	r2, [r1, #8]
 8002258:	690b      	ldr	r3, [r1, #16]
 800225a:	9000      	str	r0, [sp, #0]
 800225c:	000c      	movs	r4, r1
 800225e:	4293      	cmp	r3, r2
 8002260:	da00      	bge.n	8002264 <_printf_common+0x14>
 8002262:	0013      	movs	r3, r2
 8002264:	0022      	movs	r2, r4
 8002266:	602b      	str	r3, [r5, #0]
 8002268:	3243      	adds	r2, #67	; 0x43
 800226a:	7812      	ldrb	r2, [r2, #0]
 800226c:	2a00      	cmp	r2, #0
 800226e:	d001      	beq.n	8002274 <_printf_common+0x24>
 8002270:	3301      	adds	r3, #1
 8002272:	602b      	str	r3, [r5, #0]
 8002274:	6823      	ldr	r3, [r4, #0]
 8002276:	069b      	lsls	r3, r3, #26
 8002278:	d502      	bpl.n	8002280 <_printf_common+0x30>
 800227a:	682b      	ldr	r3, [r5, #0]
 800227c:	3302      	adds	r3, #2
 800227e:	602b      	str	r3, [r5, #0]
 8002280:	2706      	movs	r7, #6
 8002282:	6823      	ldr	r3, [r4, #0]
 8002284:	401f      	ands	r7, r3
 8002286:	d027      	beq.n	80022d8 <_printf_common+0x88>
 8002288:	0023      	movs	r3, r4
 800228a:	3343      	adds	r3, #67	; 0x43
 800228c:	781b      	ldrb	r3, [r3, #0]
 800228e:	1e5a      	subs	r2, r3, #1
 8002290:	4193      	sbcs	r3, r2
 8002292:	6822      	ldr	r2, [r4, #0]
 8002294:	0692      	lsls	r2, r2, #26
 8002296:	d430      	bmi.n	80022fa <_printf_common+0xaa>
 8002298:	0022      	movs	r2, r4
 800229a:	9901      	ldr	r1, [sp, #4]
 800229c:	3243      	adds	r2, #67	; 0x43
 800229e:	9800      	ldr	r0, [sp, #0]
 80022a0:	9e08      	ldr	r6, [sp, #32]
 80022a2:	47b0      	blx	r6
 80022a4:	1c43      	adds	r3, r0, #1
 80022a6:	d025      	beq.n	80022f4 <_printf_common+0xa4>
 80022a8:	2306      	movs	r3, #6
 80022aa:	6820      	ldr	r0, [r4, #0]
 80022ac:	682a      	ldr	r2, [r5, #0]
 80022ae:	68e1      	ldr	r1, [r4, #12]
 80022b0:	4003      	ands	r3, r0
 80022b2:	2500      	movs	r5, #0
 80022b4:	2b04      	cmp	r3, #4
 80022b6:	d103      	bne.n	80022c0 <_printf_common+0x70>
 80022b8:	1a8d      	subs	r5, r1, r2
 80022ba:	43eb      	mvns	r3, r5
 80022bc:	17db      	asrs	r3, r3, #31
 80022be:	401d      	ands	r5, r3
 80022c0:	68a3      	ldr	r3, [r4, #8]
 80022c2:	6922      	ldr	r2, [r4, #16]
 80022c4:	4293      	cmp	r3, r2
 80022c6:	dd01      	ble.n	80022cc <_printf_common+0x7c>
 80022c8:	1a9b      	subs	r3, r3, r2
 80022ca:	18ed      	adds	r5, r5, r3
 80022cc:	2700      	movs	r7, #0
 80022ce:	42bd      	cmp	r5, r7
 80022d0:	d120      	bne.n	8002314 <_printf_common+0xc4>
 80022d2:	2000      	movs	r0, #0
 80022d4:	e010      	b.n	80022f8 <_printf_common+0xa8>
 80022d6:	3701      	adds	r7, #1
 80022d8:	68e3      	ldr	r3, [r4, #12]
 80022da:	682a      	ldr	r2, [r5, #0]
 80022dc:	1a9b      	subs	r3, r3, r2
 80022de:	429f      	cmp	r7, r3
 80022e0:	dad2      	bge.n	8002288 <_printf_common+0x38>
 80022e2:	0022      	movs	r2, r4
 80022e4:	2301      	movs	r3, #1
 80022e6:	3219      	adds	r2, #25
 80022e8:	9901      	ldr	r1, [sp, #4]
 80022ea:	9800      	ldr	r0, [sp, #0]
 80022ec:	9e08      	ldr	r6, [sp, #32]
 80022ee:	47b0      	blx	r6
 80022f0:	1c43      	adds	r3, r0, #1
 80022f2:	d1f0      	bne.n	80022d6 <_printf_common+0x86>
 80022f4:	2001      	movs	r0, #1
 80022f6:	4240      	negs	r0, r0
 80022f8:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 80022fa:	2030      	movs	r0, #48	; 0x30
 80022fc:	18e1      	adds	r1, r4, r3
 80022fe:	3143      	adds	r1, #67	; 0x43
 8002300:	7008      	strb	r0, [r1, #0]
 8002302:	0021      	movs	r1, r4
 8002304:	1c5a      	adds	r2, r3, #1
 8002306:	3145      	adds	r1, #69	; 0x45
 8002308:	7809      	ldrb	r1, [r1, #0]
 800230a:	18a2      	adds	r2, r4, r2
 800230c:	3243      	adds	r2, #67	; 0x43
 800230e:	3302      	adds	r3, #2
 8002310:	7011      	strb	r1, [r2, #0]
 8002312:	e7c1      	b.n	8002298 <_printf_common+0x48>
 8002314:	0022      	movs	r2, r4
 8002316:	2301      	movs	r3, #1
 8002318:	321a      	adds	r2, #26
 800231a:	9901      	ldr	r1, [sp, #4]
 800231c:	9800      	ldr	r0, [sp, #0]
 800231e:	9e08      	ldr	r6, [sp, #32]
 8002320:	47b0      	blx	r6
 8002322:	1c43      	adds	r3, r0, #1
 8002324:	d0e6      	beq.n	80022f4 <_printf_common+0xa4>
 8002326:	3701      	adds	r7, #1
 8002328:	e7d1      	b.n	80022ce <_printf_common+0x7e>
	...

0800232c <_printf_i>:
 800232c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800232e:	b08b      	sub	sp, #44	; 0x2c
 8002330:	9206      	str	r2, [sp, #24]
 8002332:	000a      	movs	r2, r1
 8002334:	3243      	adds	r2, #67	; 0x43
 8002336:	9307      	str	r3, [sp, #28]
 8002338:	9005      	str	r0, [sp, #20]
 800233a:	9204      	str	r2, [sp, #16]
 800233c:	7e0a      	ldrb	r2, [r1, #24]
 800233e:	000c      	movs	r4, r1
 8002340:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8002342:	2a6e      	cmp	r2, #110	; 0x6e
 8002344:	d100      	bne.n	8002348 <_printf_i+0x1c>
 8002346:	e08f      	b.n	8002468 <_printf_i+0x13c>
 8002348:	d817      	bhi.n	800237a <_printf_i+0x4e>
 800234a:	2a63      	cmp	r2, #99	; 0x63
 800234c:	d02c      	beq.n	80023a8 <_printf_i+0x7c>
 800234e:	d808      	bhi.n	8002362 <_printf_i+0x36>
 8002350:	2a00      	cmp	r2, #0
 8002352:	d100      	bne.n	8002356 <_printf_i+0x2a>
 8002354:	e099      	b.n	800248a <_printf_i+0x15e>
 8002356:	2a58      	cmp	r2, #88	; 0x58
 8002358:	d054      	beq.n	8002404 <_printf_i+0xd8>
 800235a:	0026      	movs	r6, r4
 800235c:	3642      	adds	r6, #66	; 0x42
 800235e:	7032      	strb	r2, [r6, #0]
 8002360:	e029      	b.n	80023b6 <_printf_i+0x8a>
 8002362:	2a64      	cmp	r2, #100	; 0x64
 8002364:	d001      	beq.n	800236a <_printf_i+0x3e>
 8002366:	2a69      	cmp	r2, #105	; 0x69
 8002368:	d1f7      	bne.n	800235a <_printf_i+0x2e>
 800236a:	6821      	ldr	r1, [r4, #0]
 800236c:	681a      	ldr	r2, [r3, #0]
 800236e:	0608      	lsls	r0, r1, #24
 8002370:	d523      	bpl.n	80023ba <_printf_i+0x8e>
 8002372:	1d11      	adds	r1, r2, #4
 8002374:	6019      	str	r1, [r3, #0]
 8002376:	6815      	ldr	r5, [r2, #0]
 8002378:	e025      	b.n	80023c6 <_printf_i+0x9a>
 800237a:	2a73      	cmp	r2, #115	; 0x73
 800237c:	d100      	bne.n	8002380 <_printf_i+0x54>
 800237e:	e088      	b.n	8002492 <_printf_i+0x166>
 8002380:	d808      	bhi.n	8002394 <_printf_i+0x68>
 8002382:	2a6f      	cmp	r2, #111	; 0x6f
 8002384:	d029      	beq.n	80023da <_printf_i+0xae>
 8002386:	2a70      	cmp	r2, #112	; 0x70
 8002388:	d1e7      	bne.n	800235a <_printf_i+0x2e>
 800238a:	2220      	movs	r2, #32
 800238c:	6809      	ldr	r1, [r1, #0]
 800238e:	430a      	orrs	r2, r1
 8002390:	6022      	str	r2, [r4, #0]
 8002392:	e003      	b.n	800239c <_printf_i+0x70>
 8002394:	2a75      	cmp	r2, #117	; 0x75
 8002396:	d020      	beq.n	80023da <_printf_i+0xae>
 8002398:	2a78      	cmp	r2, #120	; 0x78
 800239a:	d1de      	bne.n	800235a <_printf_i+0x2e>
 800239c:	0022      	movs	r2, r4
 800239e:	2178      	movs	r1, #120	; 0x78
 80023a0:	3245      	adds	r2, #69	; 0x45
 80023a2:	7011      	strb	r1, [r2, #0]
 80023a4:	4a6c      	ldr	r2, [pc, #432]	; (8002558 <_printf_i+0x22c>)
 80023a6:	e030      	b.n	800240a <_printf_i+0xde>
 80023a8:	000e      	movs	r6, r1
 80023aa:	681a      	ldr	r2, [r3, #0]
 80023ac:	3642      	adds	r6, #66	; 0x42
 80023ae:	1d11      	adds	r1, r2, #4
 80023b0:	6019      	str	r1, [r3, #0]
 80023b2:	6813      	ldr	r3, [r2, #0]
 80023b4:	7033      	strb	r3, [r6, #0]
 80023b6:	2301      	movs	r3, #1
 80023b8:	e079      	b.n	80024ae <_printf_i+0x182>
 80023ba:	0649      	lsls	r1, r1, #25
 80023bc:	d5d9      	bpl.n	8002372 <_printf_i+0x46>
 80023be:	1d11      	adds	r1, r2, #4
 80023c0:	6019      	str	r1, [r3, #0]
 80023c2:	2300      	movs	r3, #0
 80023c4:	5ed5      	ldrsh	r5, [r2, r3]
 80023c6:	2d00      	cmp	r5, #0
 80023c8:	da03      	bge.n	80023d2 <_printf_i+0xa6>
 80023ca:	232d      	movs	r3, #45	; 0x2d
 80023cc:	9a04      	ldr	r2, [sp, #16]
 80023ce:	426d      	negs	r5, r5
 80023d0:	7013      	strb	r3, [r2, #0]
 80023d2:	4b62      	ldr	r3, [pc, #392]	; (800255c <_printf_i+0x230>)
 80023d4:	270a      	movs	r7, #10
 80023d6:	9303      	str	r3, [sp, #12]
 80023d8:	e02f      	b.n	800243a <_printf_i+0x10e>
 80023da:	6820      	ldr	r0, [r4, #0]
 80023dc:	6819      	ldr	r1, [r3, #0]
 80023de:	0605      	lsls	r5, r0, #24
 80023e0:	d503      	bpl.n	80023ea <_printf_i+0xbe>
 80023e2:	1d08      	adds	r0, r1, #4
 80023e4:	6018      	str	r0, [r3, #0]
 80023e6:	680d      	ldr	r5, [r1, #0]
 80023e8:	e005      	b.n	80023f6 <_printf_i+0xca>
 80023ea:	0640      	lsls	r0, r0, #25
 80023ec:	d5f9      	bpl.n	80023e2 <_printf_i+0xb6>
 80023ee:	680d      	ldr	r5, [r1, #0]
 80023f0:	1d08      	adds	r0, r1, #4
 80023f2:	6018      	str	r0, [r3, #0]
 80023f4:	b2ad      	uxth	r5, r5
 80023f6:	4b59      	ldr	r3, [pc, #356]	; (800255c <_printf_i+0x230>)
 80023f8:	2708      	movs	r7, #8
 80023fa:	9303      	str	r3, [sp, #12]
 80023fc:	2a6f      	cmp	r2, #111	; 0x6f
 80023fe:	d018      	beq.n	8002432 <_printf_i+0x106>
 8002400:	270a      	movs	r7, #10
 8002402:	e016      	b.n	8002432 <_printf_i+0x106>
 8002404:	3145      	adds	r1, #69	; 0x45
 8002406:	700a      	strb	r2, [r1, #0]
 8002408:	4a54      	ldr	r2, [pc, #336]	; (800255c <_printf_i+0x230>)
 800240a:	9203      	str	r2, [sp, #12]
 800240c:	681a      	ldr	r2, [r3, #0]
 800240e:	6821      	ldr	r1, [r4, #0]
 8002410:	1d10      	adds	r0, r2, #4
 8002412:	6018      	str	r0, [r3, #0]
 8002414:	6815      	ldr	r5, [r2, #0]
 8002416:	0608      	lsls	r0, r1, #24
 8002418:	d522      	bpl.n	8002460 <_printf_i+0x134>
 800241a:	07cb      	lsls	r3, r1, #31
 800241c:	d502      	bpl.n	8002424 <_printf_i+0xf8>
 800241e:	2320      	movs	r3, #32
 8002420:	4319      	orrs	r1, r3
 8002422:	6021      	str	r1, [r4, #0]
 8002424:	2710      	movs	r7, #16
 8002426:	2d00      	cmp	r5, #0
 8002428:	d103      	bne.n	8002432 <_printf_i+0x106>
 800242a:	2320      	movs	r3, #32
 800242c:	6822      	ldr	r2, [r4, #0]
 800242e:	439a      	bics	r2, r3
 8002430:	6022      	str	r2, [r4, #0]
 8002432:	0023      	movs	r3, r4
 8002434:	2200      	movs	r2, #0
 8002436:	3343      	adds	r3, #67	; 0x43
 8002438:	701a      	strb	r2, [r3, #0]
 800243a:	6863      	ldr	r3, [r4, #4]
 800243c:	60a3      	str	r3, [r4, #8]
 800243e:	2b00      	cmp	r3, #0
 8002440:	db5c      	blt.n	80024fc <_printf_i+0x1d0>
 8002442:	2204      	movs	r2, #4
 8002444:	6821      	ldr	r1, [r4, #0]
 8002446:	4391      	bics	r1, r2
 8002448:	6021      	str	r1, [r4, #0]
 800244a:	2d00      	cmp	r5, #0
 800244c:	d158      	bne.n	8002500 <_printf_i+0x1d4>
 800244e:	9e04      	ldr	r6, [sp, #16]
 8002450:	2b00      	cmp	r3, #0
 8002452:	d064      	beq.n	800251e <_printf_i+0x1f2>
 8002454:	0026      	movs	r6, r4
 8002456:	9b03      	ldr	r3, [sp, #12]
 8002458:	3642      	adds	r6, #66	; 0x42
 800245a:	781b      	ldrb	r3, [r3, #0]
 800245c:	7033      	strb	r3, [r6, #0]
 800245e:	e05e      	b.n	800251e <_printf_i+0x1f2>
 8002460:	0648      	lsls	r0, r1, #25
 8002462:	d5da      	bpl.n	800241a <_printf_i+0xee>
 8002464:	b2ad      	uxth	r5, r5
 8002466:	e7d8      	b.n	800241a <_printf_i+0xee>
 8002468:	6809      	ldr	r1, [r1, #0]
 800246a:	681a      	ldr	r2, [r3, #0]
 800246c:	0608      	lsls	r0, r1, #24
 800246e:	d505      	bpl.n	800247c <_printf_i+0x150>
 8002470:	1d11      	adds	r1, r2, #4
 8002472:	6019      	str	r1, [r3, #0]
 8002474:	6813      	ldr	r3, [r2, #0]
 8002476:	6962      	ldr	r2, [r4, #20]
 8002478:	601a      	str	r2, [r3, #0]
 800247a:	e006      	b.n	800248a <_printf_i+0x15e>
 800247c:	0649      	lsls	r1, r1, #25
 800247e:	d5f7      	bpl.n	8002470 <_printf_i+0x144>
 8002480:	1d11      	adds	r1, r2, #4
 8002482:	6019      	str	r1, [r3, #0]
 8002484:	6813      	ldr	r3, [r2, #0]
 8002486:	8aa2      	ldrh	r2, [r4, #20]
 8002488:	801a      	strh	r2, [r3, #0]
 800248a:	2300      	movs	r3, #0
 800248c:	9e04      	ldr	r6, [sp, #16]
 800248e:	6123      	str	r3, [r4, #16]
 8002490:	e054      	b.n	800253c <_printf_i+0x210>
 8002492:	681a      	ldr	r2, [r3, #0]
 8002494:	1d11      	adds	r1, r2, #4
 8002496:	6019      	str	r1, [r3, #0]
 8002498:	6816      	ldr	r6, [r2, #0]
 800249a:	2100      	movs	r1, #0
 800249c:	6862      	ldr	r2, [r4, #4]
 800249e:	0030      	movs	r0, r6
 80024a0:	f000 f870 	bl	8002584 <memchr>
 80024a4:	2800      	cmp	r0, #0
 80024a6:	d001      	beq.n	80024ac <_printf_i+0x180>
 80024a8:	1b80      	subs	r0, r0, r6
 80024aa:	6060      	str	r0, [r4, #4]
 80024ac:	6863      	ldr	r3, [r4, #4]
 80024ae:	6123      	str	r3, [r4, #16]
 80024b0:	2300      	movs	r3, #0
 80024b2:	9a04      	ldr	r2, [sp, #16]
 80024b4:	7013      	strb	r3, [r2, #0]
 80024b6:	e041      	b.n	800253c <_printf_i+0x210>
 80024b8:	6923      	ldr	r3, [r4, #16]
 80024ba:	0032      	movs	r2, r6
 80024bc:	9906      	ldr	r1, [sp, #24]
 80024be:	9805      	ldr	r0, [sp, #20]
 80024c0:	9d07      	ldr	r5, [sp, #28]
 80024c2:	47a8      	blx	r5
 80024c4:	1c43      	adds	r3, r0, #1
 80024c6:	d043      	beq.n	8002550 <_printf_i+0x224>
 80024c8:	6823      	ldr	r3, [r4, #0]
 80024ca:	2500      	movs	r5, #0
 80024cc:	079b      	lsls	r3, r3, #30
 80024ce:	d40f      	bmi.n	80024f0 <_printf_i+0x1c4>
 80024d0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80024d2:	68e0      	ldr	r0, [r4, #12]
 80024d4:	4298      	cmp	r0, r3
 80024d6:	da3d      	bge.n	8002554 <_printf_i+0x228>
 80024d8:	0018      	movs	r0, r3
 80024da:	e03b      	b.n	8002554 <_printf_i+0x228>
 80024dc:	0022      	movs	r2, r4
 80024de:	2301      	movs	r3, #1
 80024e0:	3219      	adds	r2, #25
 80024e2:	9906      	ldr	r1, [sp, #24]
 80024e4:	9805      	ldr	r0, [sp, #20]
 80024e6:	9e07      	ldr	r6, [sp, #28]
 80024e8:	47b0      	blx	r6
 80024ea:	1c43      	adds	r3, r0, #1
 80024ec:	d030      	beq.n	8002550 <_printf_i+0x224>
 80024ee:	3501      	adds	r5, #1
 80024f0:	68e3      	ldr	r3, [r4, #12]
 80024f2:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80024f4:	1a9b      	subs	r3, r3, r2
 80024f6:	429d      	cmp	r5, r3
 80024f8:	dbf0      	blt.n	80024dc <_printf_i+0x1b0>
 80024fa:	e7e9      	b.n	80024d0 <_printf_i+0x1a4>
 80024fc:	2d00      	cmp	r5, #0
 80024fe:	d0a9      	beq.n	8002454 <_printf_i+0x128>
 8002500:	9e04      	ldr	r6, [sp, #16]
 8002502:	0028      	movs	r0, r5
 8002504:	0039      	movs	r1, r7
 8002506:	f7fd fe8d 	bl	8000224 <__aeabi_uidivmod>
 800250a:	9b03      	ldr	r3, [sp, #12]
 800250c:	3e01      	subs	r6, #1
 800250e:	5c5b      	ldrb	r3, [r3, r1]
 8002510:	0028      	movs	r0, r5
 8002512:	7033      	strb	r3, [r6, #0]
 8002514:	0039      	movs	r1, r7
 8002516:	f7fd fdff 	bl	8000118 <__udivsi3>
 800251a:	1e05      	subs	r5, r0, #0
 800251c:	d1f1      	bne.n	8002502 <_printf_i+0x1d6>
 800251e:	2f08      	cmp	r7, #8
 8002520:	d109      	bne.n	8002536 <_printf_i+0x20a>
 8002522:	6823      	ldr	r3, [r4, #0]
 8002524:	07db      	lsls	r3, r3, #31
 8002526:	d506      	bpl.n	8002536 <_printf_i+0x20a>
 8002528:	6863      	ldr	r3, [r4, #4]
 800252a:	6922      	ldr	r2, [r4, #16]
 800252c:	4293      	cmp	r3, r2
 800252e:	dc02      	bgt.n	8002536 <_printf_i+0x20a>
 8002530:	2330      	movs	r3, #48	; 0x30
 8002532:	3e01      	subs	r6, #1
 8002534:	7033      	strb	r3, [r6, #0]
 8002536:	9b04      	ldr	r3, [sp, #16]
 8002538:	1b9b      	subs	r3, r3, r6
 800253a:	6123      	str	r3, [r4, #16]
 800253c:	9b07      	ldr	r3, [sp, #28]
 800253e:	aa09      	add	r2, sp, #36	; 0x24
 8002540:	9300      	str	r3, [sp, #0]
 8002542:	0021      	movs	r1, r4
 8002544:	9b06      	ldr	r3, [sp, #24]
 8002546:	9805      	ldr	r0, [sp, #20]
 8002548:	f7ff fe82 	bl	8002250 <_printf_common>
 800254c:	1c43      	adds	r3, r0, #1
 800254e:	d1b3      	bne.n	80024b8 <_printf_i+0x18c>
 8002550:	2001      	movs	r0, #1
 8002552:	4240      	negs	r0, r0
 8002554:	b00b      	add	sp, #44	; 0x2c
 8002556:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002558:	080027ea 	.word	0x080027ea
 800255c:	080027d9 	.word	0x080027d9

08002560 <_sbrk_r>:
 8002560:	2300      	movs	r3, #0
 8002562:	b570      	push	{r4, r5, r6, lr}
 8002564:	4c06      	ldr	r4, [pc, #24]	; (8002580 <_sbrk_r+0x20>)
 8002566:	0005      	movs	r5, r0
 8002568:	0008      	movs	r0, r1
 800256a:	6023      	str	r3, [r4, #0]
 800256c:	f7ff fbc6 	bl	8001cfc <_sbrk>
 8002570:	1c43      	adds	r3, r0, #1
 8002572:	d103      	bne.n	800257c <_sbrk_r+0x1c>
 8002574:	6823      	ldr	r3, [r4, #0]
 8002576:	2b00      	cmp	r3, #0
 8002578:	d000      	beq.n	800257c <_sbrk_r+0x1c>
 800257a:	602b      	str	r3, [r5, #0]
 800257c:	bd70      	pop	{r4, r5, r6, pc}
 800257e:	46c0      	nop			; (mov r8, r8)
 8002580:	20000238 	.word	0x20000238

08002584 <memchr>:
 8002584:	b2c9      	uxtb	r1, r1
 8002586:	1882      	adds	r2, r0, r2
 8002588:	4290      	cmp	r0, r2
 800258a:	d101      	bne.n	8002590 <memchr+0xc>
 800258c:	2000      	movs	r0, #0
 800258e:	4770      	bx	lr
 8002590:	7803      	ldrb	r3, [r0, #0]
 8002592:	428b      	cmp	r3, r1
 8002594:	d0fb      	beq.n	800258e <memchr+0xa>
 8002596:	3001      	adds	r0, #1
 8002598:	e7f6      	b.n	8002588 <memchr+0x4>

0800259a <memmove>:
 800259a:	b510      	push	{r4, lr}
 800259c:	4288      	cmp	r0, r1
 800259e:	d902      	bls.n	80025a6 <memmove+0xc>
 80025a0:	188b      	adds	r3, r1, r2
 80025a2:	4298      	cmp	r0, r3
 80025a4:	d308      	bcc.n	80025b8 <memmove+0x1e>
 80025a6:	2300      	movs	r3, #0
 80025a8:	429a      	cmp	r2, r3
 80025aa:	d007      	beq.n	80025bc <memmove+0x22>
 80025ac:	5ccc      	ldrb	r4, [r1, r3]
 80025ae:	54c4      	strb	r4, [r0, r3]
 80025b0:	3301      	adds	r3, #1
 80025b2:	e7f9      	b.n	80025a8 <memmove+0xe>
 80025b4:	5c8b      	ldrb	r3, [r1, r2]
 80025b6:	5483      	strb	r3, [r0, r2]
 80025b8:	3a01      	subs	r2, #1
 80025ba:	d2fb      	bcs.n	80025b4 <memmove+0x1a>
 80025bc:	bd10      	pop	{r4, pc}

080025be <__malloc_lock>:
 80025be:	4770      	bx	lr

080025c0 <__malloc_unlock>:
 80025c0:	4770      	bx	lr
	...

080025c4 <_free_r>:
 80025c4:	b570      	push	{r4, r5, r6, lr}
 80025c6:	0005      	movs	r5, r0
 80025c8:	2900      	cmp	r1, #0
 80025ca:	d010      	beq.n	80025ee <_free_r+0x2a>
 80025cc:	1f0c      	subs	r4, r1, #4
 80025ce:	6823      	ldr	r3, [r4, #0]
 80025d0:	2b00      	cmp	r3, #0
 80025d2:	da00      	bge.n	80025d6 <_free_r+0x12>
 80025d4:	18e4      	adds	r4, r4, r3
 80025d6:	0028      	movs	r0, r5
 80025d8:	f7ff fff1 	bl	80025be <__malloc_lock>
 80025dc:	4a1d      	ldr	r2, [pc, #116]	; (8002654 <_free_r+0x90>)
 80025de:	6813      	ldr	r3, [r2, #0]
 80025e0:	2b00      	cmp	r3, #0
 80025e2:	d105      	bne.n	80025f0 <_free_r+0x2c>
 80025e4:	6063      	str	r3, [r4, #4]
 80025e6:	6014      	str	r4, [r2, #0]
 80025e8:	0028      	movs	r0, r5
 80025ea:	f7ff ffe9 	bl	80025c0 <__malloc_unlock>
 80025ee:	bd70      	pop	{r4, r5, r6, pc}
 80025f0:	42a3      	cmp	r3, r4
 80025f2:	d909      	bls.n	8002608 <_free_r+0x44>
 80025f4:	6821      	ldr	r1, [r4, #0]
 80025f6:	1860      	adds	r0, r4, r1
 80025f8:	4283      	cmp	r3, r0
 80025fa:	d1f3      	bne.n	80025e4 <_free_r+0x20>
 80025fc:	6818      	ldr	r0, [r3, #0]
 80025fe:	685b      	ldr	r3, [r3, #4]
 8002600:	1841      	adds	r1, r0, r1
 8002602:	6021      	str	r1, [r4, #0]
 8002604:	e7ee      	b.n	80025e4 <_free_r+0x20>
 8002606:	0013      	movs	r3, r2
 8002608:	685a      	ldr	r2, [r3, #4]
 800260a:	2a00      	cmp	r2, #0
 800260c:	d001      	beq.n	8002612 <_free_r+0x4e>
 800260e:	42a2      	cmp	r2, r4
 8002610:	d9f9      	bls.n	8002606 <_free_r+0x42>
 8002612:	6819      	ldr	r1, [r3, #0]
 8002614:	1858      	adds	r0, r3, r1
 8002616:	42a0      	cmp	r0, r4
 8002618:	d10b      	bne.n	8002632 <_free_r+0x6e>
 800261a:	6820      	ldr	r0, [r4, #0]
 800261c:	1809      	adds	r1, r1, r0
 800261e:	1858      	adds	r0, r3, r1
 8002620:	6019      	str	r1, [r3, #0]
 8002622:	4282      	cmp	r2, r0
 8002624:	d1e0      	bne.n	80025e8 <_free_r+0x24>
 8002626:	6810      	ldr	r0, [r2, #0]
 8002628:	6852      	ldr	r2, [r2, #4]
 800262a:	1841      	adds	r1, r0, r1
 800262c:	6019      	str	r1, [r3, #0]
 800262e:	605a      	str	r2, [r3, #4]
 8002630:	e7da      	b.n	80025e8 <_free_r+0x24>
 8002632:	42a0      	cmp	r0, r4
 8002634:	d902      	bls.n	800263c <_free_r+0x78>
 8002636:	230c      	movs	r3, #12
 8002638:	602b      	str	r3, [r5, #0]
 800263a:	e7d5      	b.n	80025e8 <_free_r+0x24>
 800263c:	6821      	ldr	r1, [r4, #0]
 800263e:	1860      	adds	r0, r4, r1
 8002640:	4282      	cmp	r2, r0
 8002642:	d103      	bne.n	800264c <_free_r+0x88>
 8002644:	6810      	ldr	r0, [r2, #0]
 8002646:	6852      	ldr	r2, [r2, #4]
 8002648:	1841      	adds	r1, r0, r1
 800264a:	6021      	str	r1, [r4, #0]
 800264c:	6062      	str	r2, [r4, #4]
 800264e:	605c      	str	r4, [r3, #4]
 8002650:	e7ca      	b.n	80025e8 <_free_r+0x24>
 8002652:	46c0      	nop			; (mov r8, r8)
 8002654:	200000f4 	.word	0x200000f4

08002658 <_realloc_r>:
 8002658:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800265a:	0007      	movs	r7, r0
 800265c:	000d      	movs	r5, r1
 800265e:	0016      	movs	r6, r2
 8002660:	2900      	cmp	r1, #0
 8002662:	d105      	bne.n	8002670 <_realloc_r+0x18>
 8002664:	0011      	movs	r1, r2
 8002666:	f7ff fc2f 	bl	8001ec8 <_malloc_r>
 800266a:	0004      	movs	r4, r0
 800266c:	0020      	movs	r0, r4
 800266e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8002670:	2a00      	cmp	r2, #0
 8002672:	d103      	bne.n	800267c <_realloc_r+0x24>
 8002674:	f7ff ffa6 	bl	80025c4 <_free_r>
 8002678:	0034      	movs	r4, r6
 800267a:	e7f7      	b.n	800266c <_realloc_r+0x14>
 800267c:	f000 f812 	bl	80026a4 <_malloc_usable_size_r>
 8002680:	002c      	movs	r4, r5
 8002682:	4286      	cmp	r6, r0
 8002684:	d9f2      	bls.n	800266c <_realloc_r+0x14>
 8002686:	0031      	movs	r1, r6
 8002688:	0038      	movs	r0, r7
 800268a:	f7ff fc1d 	bl	8001ec8 <_malloc_r>
 800268e:	1e04      	subs	r4, r0, #0
 8002690:	d0ec      	beq.n	800266c <_realloc_r+0x14>
 8002692:	0029      	movs	r1, r5
 8002694:	0032      	movs	r2, r6
 8002696:	f7ff fbcf 	bl	8001e38 <memcpy>
 800269a:	0029      	movs	r1, r5
 800269c:	0038      	movs	r0, r7
 800269e:	f7ff ff91 	bl	80025c4 <_free_r>
 80026a2:	e7e3      	b.n	800266c <_realloc_r+0x14>

080026a4 <_malloc_usable_size_r>:
 80026a4:	1f0b      	subs	r3, r1, #4
 80026a6:	681b      	ldr	r3, [r3, #0]
 80026a8:	1f18      	subs	r0, r3, #4
 80026aa:	2b00      	cmp	r3, #0
 80026ac:	da01      	bge.n	80026b2 <_malloc_usable_size_r+0xe>
 80026ae:	580b      	ldr	r3, [r1, r0]
 80026b0:	18c0      	adds	r0, r0, r3
 80026b2:	4770      	bx	lr

080026b4 <_init>:
 80026b4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80026b6:	46c0      	nop			; (mov r8, r8)
 80026b8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80026ba:	bc08      	pop	{r3}
 80026bc:	469e      	mov	lr, r3
 80026be:	4770      	bx	lr

080026c0 <_fini>:
 80026c0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80026c2:	46c0      	nop			; (mov r8, r8)
 80026c4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80026c6:	bc08      	pop	{r3}
 80026c8:	469e      	mov	lr, r3
 80026ca:	4770      	bx	lr
