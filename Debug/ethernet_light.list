
ethernet_light.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000c0  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00002bc0  080000c0  080000c0  000100c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000e8  08002c80  08002c80  00012c80  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .init_array   00000004  08002d68  08002d68  00012d68  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  4 .fini_array   00000004  08002d6c  08002d6c  00012d6c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .data         00000090  20000000  08002d70  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .bss          00000150  20000090  08002e00  00020090  2**2
                  ALLOC
  7 ._user_heap_stack 00000600  200001e0  08002e00  000201e0  2**0
                  ALLOC
  8 .ARM.attributes 00000028  00000000  00000000  00020090  2**0
                  CONTENTS, READONLY
  9 .debug_info   000156a5  00000000  00000000  000200b8  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_abbrev 00002d2a  00000000  00000000  0003575d  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000087ae  00000000  00000000  00038487  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_aranges 00000b10  00000000  00000000  00040c38  2**3
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000f20  00000000  00000000  00041748  2**3
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_line   00006525  00000000  00000000  00042668  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_str    000039d1  00000000  00000000  00048b8d  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .comment      0000007c  00000000  00000000  0004c55e  2**0
                  CONTENTS, READONLY
 17 .debug_frame  000026e8  00000000  00000000  0004c5dc  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	; (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	; (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	; (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	20000090 	.word	0x20000090
 80000e0:	00000000 	.word	0x00000000
 80000e4:	08002c68 	.word	0x08002c68

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	; (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	; (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	; (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			; (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	20000094 	.word	0x20000094
 8000104:	08002c68 	.word	0x08002c68

08000108 <__gnu_thumb1_case_uqi>:
 8000108:	b402      	push	{r1}
 800010a:	4671      	mov	r1, lr
 800010c:	0849      	lsrs	r1, r1, #1
 800010e:	0049      	lsls	r1, r1, #1
 8000110:	5c09      	ldrb	r1, [r1, r0]
 8000112:	0049      	lsls	r1, r1, #1
 8000114:	448e      	add	lr, r1
 8000116:	bc02      	pop	{r1}
 8000118:	4770      	bx	lr
 800011a:	46c0      	nop			; (mov r8, r8)

0800011c <__udivsi3>:
 800011c:	2200      	movs	r2, #0
 800011e:	0843      	lsrs	r3, r0, #1
 8000120:	428b      	cmp	r3, r1
 8000122:	d374      	bcc.n	800020e <__udivsi3+0xf2>
 8000124:	0903      	lsrs	r3, r0, #4
 8000126:	428b      	cmp	r3, r1
 8000128:	d35f      	bcc.n	80001ea <__udivsi3+0xce>
 800012a:	0a03      	lsrs	r3, r0, #8
 800012c:	428b      	cmp	r3, r1
 800012e:	d344      	bcc.n	80001ba <__udivsi3+0x9e>
 8000130:	0b03      	lsrs	r3, r0, #12
 8000132:	428b      	cmp	r3, r1
 8000134:	d328      	bcc.n	8000188 <__udivsi3+0x6c>
 8000136:	0c03      	lsrs	r3, r0, #16
 8000138:	428b      	cmp	r3, r1
 800013a:	d30d      	bcc.n	8000158 <__udivsi3+0x3c>
 800013c:	22ff      	movs	r2, #255	; 0xff
 800013e:	0209      	lsls	r1, r1, #8
 8000140:	ba12      	rev	r2, r2
 8000142:	0c03      	lsrs	r3, r0, #16
 8000144:	428b      	cmp	r3, r1
 8000146:	d302      	bcc.n	800014e <__udivsi3+0x32>
 8000148:	1212      	asrs	r2, r2, #8
 800014a:	0209      	lsls	r1, r1, #8
 800014c:	d065      	beq.n	800021a <__udivsi3+0xfe>
 800014e:	0b03      	lsrs	r3, r0, #12
 8000150:	428b      	cmp	r3, r1
 8000152:	d319      	bcc.n	8000188 <__udivsi3+0x6c>
 8000154:	e000      	b.n	8000158 <__udivsi3+0x3c>
 8000156:	0a09      	lsrs	r1, r1, #8
 8000158:	0bc3      	lsrs	r3, r0, #15
 800015a:	428b      	cmp	r3, r1
 800015c:	d301      	bcc.n	8000162 <__udivsi3+0x46>
 800015e:	03cb      	lsls	r3, r1, #15
 8000160:	1ac0      	subs	r0, r0, r3
 8000162:	4152      	adcs	r2, r2
 8000164:	0b83      	lsrs	r3, r0, #14
 8000166:	428b      	cmp	r3, r1
 8000168:	d301      	bcc.n	800016e <__udivsi3+0x52>
 800016a:	038b      	lsls	r3, r1, #14
 800016c:	1ac0      	subs	r0, r0, r3
 800016e:	4152      	adcs	r2, r2
 8000170:	0b43      	lsrs	r3, r0, #13
 8000172:	428b      	cmp	r3, r1
 8000174:	d301      	bcc.n	800017a <__udivsi3+0x5e>
 8000176:	034b      	lsls	r3, r1, #13
 8000178:	1ac0      	subs	r0, r0, r3
 800017a:	4152      	adcs	r2, r2
 800017c:	0b03      	lsrs	r3, r0, #12
 800017e:	428b      	cmp	r3, r1
 8000180:	d301      	bcc.n	8000186 <__udivsi3+0x6a>
 8000182:	030b      	lsls	r3, r1, #12
 8000184:	1ac0      	subs	r0, r0, r3
 8000186:	4152      	adcs	r2, r2
 8000188:	0ac3      	lsrs	r3, r0, #11
 800018a:	428b      	cmp	r3, r1
 800018c:	d301      	bcc.n	8000192 <__udivsi3+0x76>
 800018e:	02cb      	lsls	r3, r1, #11
 8000190:	1ac0      	subs	r0, r0, r3
 8000192:	4152      	adcs	r2, r2
 8000194:	0a83      	lsrs	r3, r0, #10
 8000196:	428b      	cmp	r3, r1
 8000198:	d301      	bcc.n	800019e <__udivsi3+0x82>
 800019a:	028b      	lsls	r3, r1, #10
 800019c:	1ac0      	subs	r0, r0, r3
 800019e:	4152      	adcs	r2, r2
 80001a0:	0a43      	lsrs	r3, r0, #9
 80001a2:	428b      	cmp	r3, r1
 80001a4:	d301      	bcc.n	80001aa <__udivsi3+0x8e>
 80001a6:	024b      	lsls	r3, r1, #9
 80001a8:	1ac0      	subs	r0, r0, r3
 80001aa:	4152      	adcs	r2, r2
 80001ac:	0a03      	lsrs	r3, r0, #8
 80001ae:	428b      	cmp	r3, r1
 80001b0:	d301      	bcc.n	80001b6 <__udivsi3+0x9a>
 80001b2:	020b      	lsls	r3, r1, #8
 80001b4:	1ac0      	subs	r0, r0, r3
 80001b6:	4152      	adcs	r2, r2
 80001b8:	d2cd      	bcs.n	8000156 <__udivsi3+0x3a>
 80001ba:	09c3      	lsrs	r3, r0, #7
 80001bc:	428b      	cmp	r3, r1
 80001be:	d301      	bcc.n	80001c4 <__udivsi3+0xa8>
 80001c0:	01cb      	lsls	r3, r1, #7
 80001c2:	1ac0      	subs	r0, r0, r3
 80001c4:	4152      	adcs	r2, r2
 80001c6:	0983      	lsrs	r3, r0, #6
 80001c8:	428b      	cmp	r3, r1
 80001ca:	d301      	bcc.n	80001d0 <__udivsi3+0xb4>
 80001cc:	018b      	lsls	r3, r1, #6
 80001ce:	1ac0      	subs	r0, r0, r3
 80001d0:	4152      	adcs	r2, r2
 80001d2:	0943      	lsrs	r3, r0, #5
 80001d4:	428b      	cmp	r3, r1
 80001d6:	d301      	bcc.n	80001dc <__udivsi3+0xc0>
 80001d8:	014b      	lsls	r3, r1, #5
 80001da:	1ac0      	subs	r0, r0, r3
 80001dc:	4152      	adcs	r2, r2
 80001de:	0903      	lsrs	r3, r0, #4
 80001e0:	428b      	cmp	r3, r1
 80001e2:	d301      	bcc.n	80001e8 <__udivsi3+0xcc>
 80001e4:	010b      	lsls	r3, r1, #4
 80001e6:	1ac0      	subs	r0, r0, r3
 80001e8:	4152      	adcs	r2, r2
 80001ea:	08c3      	lsrs	r3, r0, #3
 80001ec:	428b      	cmp	r3, r1
 80001ee:	d301      	bcc.n	80001f4 <__udivsi3+0xd8>
 80001f0:	00cb      	lsls	r3, r1, #3
 80001f2:	1ac0      	subs	r0, r0, r3
 80001f4:	4152      	adcs	r2, r2
 80001f6:	0883      	lsrs	r3, r0, #2
 80001f8:	428b      	cmp	r3, r1
 80001fa:	d301      	bcc.n	8000200 <__udivsi3+0xe4>
 80001fc:	008b      	lsls	r3, r1, #2
 80001fe:	1ac0      	subs	r0, r0, r3
 8000200:	4152      	adcs	r2, r2
 8000202:	0843      	lsrs	r3, r0, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d301      	bcc.n	800020c <__udivsi3+0xf0>
 8000208:	004b      	lsls	r3, r1, #1
 800020a:	1ac0      	subs	r0, r0, r3
 800020c:	4152      	adcs	r2, r2
 800020e:	1a41      	subs	r1, r0, r1
 8000210:	d200      	bcs.n	8000214 <__udivsi3+0xf8>
 8000212:	4601      	mov	r1, r0
 8000214:	4152      	adcs	r2, r2
 8000216:	4610      	mov	r0, r2
 8000218:	4770      	bx	lr
 800021a:	e7ff      	b.n	800021c <__udivsi3+0x100>
 800021c:	b501      	push	{r0, lr}
 800021e:	2000      	movs	r0, #0
 8000220:	f000 f806 	bl	8000230 <__aeabi_idiv0>
 8000224:	bd02      	pop	{r1, pc}
 8000226:	46c0      	nop			; (mov r8, r8)

08000228 <__aeabi_uidivmod>:
 8000228:	2900      	cmp	r1, #0
 800022a:	d0f7      	beq.n	800021c <__udivsi3+0x100>
 800022c:	e776      	b.n	800011c <__udivsi3>
 800022e:	4770      	bx	lr

08000230 <__aeabi_idiv0>:
 8000230:	4770      	bx	lr
 8000232:	46c0      	nop			; (mov r8, r8)

08000234 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000234:	b510      	push	{r4, lr}
 8000236:	0004      	movs	r4, r0
  /*Configure the SysTick to have interrupt in 1ms time basis*/
  HAL_SYSTICK_Config(HAL_RCC_GetHCLKFreq()/1000U);
 8000238:	f000 fc8a 	bl	8000b50 <HAL_RCC_GetHCLKFreq>
 800023c:	21fa      	movs	r1, #250	; 0xfa
 800023e:	0089      	lsls	r1, r1, #2
 8000240:	f7ff ff6c 	bl	800011c <__udivsi3>
 8000244:	f000 f866 	bl	8000314 <HAL_SYSTICK_Config>

  /*Configure the SysTick IRQ priority */
  HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority ,0U);
 8000248:	2001      	movs	r0, #1
 800024a:	2200      	movs	r2, #0
 800024c:	0021      	movs	r1, r4
 800024e:	4240      	negs	r0, r0
 8000250:	f000 f830 	bl	80002b4 <HAL_NVIC_SetPriority>

   /* Return function status */
  return HAL_OK;
}
 8000254:	2000      	movs	r0, #0
 8000256:	bd10      	pop	{r4, pc}

08000258 <HAL_Init>:
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000258:	2310      	movs	r3, #16
 800025a:	4a06      	ldr	r2, [pc, #24]	; (8000274 <HAL_Init+0x1c>)
{
 800025c:	b510      	push	{r4, lr}
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800025e:	6811      	ldr	r1, [r2, #0]
  HAL_InitTick(TICK_INT_PRIORITY);
 8000260:	2000      	movs	r0, #0
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000262:	430b      	orrs	r3, r1
 8000264:	6013      	str	r3, [r2, #0]
  HAL_InitTick(TICK_INT_PRIORITY);
 8000266:	f7ff ffe5 	bl	8000234 <HAL_InitTick>
  HAL_MspInit();
 800026a:	f001 fec3 	bl	8001ff4 <HAL_MspInit>
}
 800026e:	2000      	movs	r0, #0
 8000270:	bd10      	pop	{r4, pc}
 8000272:	46c0      	nop			; (mov r8, r8)
 8000274:	40022000 	.word	0x40022000

08000278 <HAL_IncTick>:
  *       implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick++;
 8000278:	4a02      	ldr	r2, [pc, #8]	; (8000284 <HAL_IncTick+0xc>)
 800027a:	6813      	ldr	r3, [r2, #0]
 800027c:	3301      	adds	r3, #1
 800027e:	6013      	str	r3, [r2, #0]
}
 8000280:	4770      	bx	lr
 8000282:	46c0      	nop			; (mov r8, r8)
 8000284:	200000b8 	.word	0x200000b8

08000288 <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 8000288:	4b01      	ldr	r3, [pc, #4]	; (8000290 <HAL_GetTick+0x8>)
 800028a:	6818      	ldr	r0, [r3, #0]
}
 800028c:	4770      	bx	lr
 800028e:	46c0      	nop			; (mov r8, r8)
 8000290:	200000b8 	.word	0x200000b8

08000294 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(__IO uint32_t Delay)
{
 8000294:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8000296:	9001      	str	r0, [sp, #4]
  uint32_t tickstart = HAL_GetTick();
 8000298:	f7ff fff6 	bl	8000288 <HAL_GetTick>
  uint32_t wait = Delay;
 800029c:	9c01      	ldr	r4, [sp, #4]
  uint32_t tickstart = HAL_GetTick();
 800029e:	0005      	movs	r5, r0
  
  /* Add a period to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
  {
     wait++;
 80002a0:	1c63      	adds	r3, r4, #1
 80002a2:	1e5a      	subs	r2, r3, #1
 80002a4:	4193      	sbcs	r3, r2
 80002a6:	18e4      	adds	r4, r4, r3
  }
  
  while((HAL_GetTick() - tickstart) < wait)
 80002a8:	f7ff ffee 	bl	8000288 <HAL_GetTick>
 80002ac:	1b40      	subs	r0, r0, r5
 80002ae:	42a0      	cmp	r0, r4
 80002b0:	d3fa      	bcc.n	80002a8 <HAL_Delay+0x14>
  {
  }
}
 80002b2:	bd37      	pop	{r0, r1, r2, r4, r5, pc}

080002b4 <HAL_NVIC_SetPriority>:
  *         with stm32f0xx devices, this parameter is a dummy value and it is ignored, because 
  *         no subpriority supported in Cortex M0 based products.   
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80002b4:	b570      	push	{r4, r5, r6, lr}
 80002b6:	0189      	lsls	r1, r1, #6
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
 */
__STATIC_INLINE void NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
  if ((int32_t)(IRQn) < 0)
 80002b8:	2800      	cmp	r0, #0
 80002ba:	da14      	bge.n	80002e6 <HAL_NVIC_SetPriority+0x32>
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80002bc:	230f      	movs	r3, #15
 80002be:	b2c0      	uxtb	r0, r0
 80002c0:	4003      	ands	r3, r0
 80002c2:	3b08      	subs	r3, #8
 80002c4:	4a11      	ldr	r2, [pc, #68]	; (800030c <HAL_NVIC_SetPriority+0x58>)
 80002c6:	089b      	lsrs	r3, r3, #2
 80002c8:	009b      	lsls	r3, r3, #2
 80002ca:	189b      	adds	r3, r3, r2
 80002cc:	2203      	movs	r2, #3
 80002ce:	4010      	ands	r0, r2
 80002d0:	4090      	lsls	r0, r2
 80002d2:	32fc      	adds	r2, #252	; 0xfc
 80002d4:	0015      	movs	r5, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 80002d6:	4011      	ands	r1, r2
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80002d8:	4085      	lsls	r5, r0
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 80002da:	4081      	lsls	r1, r0
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80002dc:	69dc      	ldr	r4, [r3, #28]
 80002de:	43ac      	bics	r4, r5
 80002e0:	4321      	orrs	r1, r4
 80002e2:	61d9      	str	r1, [r3, #28]
  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn,PreemptPriority);
}
 80002e4:	bd70      	pop	{r4, r5, r6, pc}
  }
  else
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80002e6:	2503      	movs	r5, #3
 80002e8:	0883      	lsrs	r3, r0, #2
 80002ea:	4028      	ands	r0, r5
 80002ec:	40a8      	lsls	r0, r5
 80002ee:	35fc      	adds	r5, #252	; 0xfc
 80002f0:	002e      	movs	r6, r5
 80002f2:	4a07      	ldr	r2, [pc, #28]	; (8000310 <HAL_NVIC_SetPriority+0x5c>)
 80002f4:	009b      	lsls	r3, r3, #2
 80002f6:	189b      	adds	r3, r3, r2
 80002f8:	22c0      	movs	r2, #192	; 0xc0
 80002fa:	4086      	lsls	r6, r0
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 80002fc:	4029      	ands	r1, r5
 80002fe:	4081      	lsls	r1, r0
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000300:	0092      	lsls	r2, r2, #2
 8000302:	589c      	ldr	r4, [r3, r2]
 8000304:	43b4      	bics	r4, r6
 8000306:	4321      	orrs	r1, r4
 8000308:	5099      	str	r1, [r3, r2]
 800030a:	e7eb      	b.n	80002e4 <HAL_NVIC_SetPriority+0x30>
 800030c:	e000ed00 	.word	0xe000ed00
 8000310:	e000e100 	.word	0xe000e100

08000314 <HAL_SYSTICK_Config>:
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000314:	4a09      	ldr	r2, [pc, #36]	; (800033c <HAL_SYSTICK_Config+0x28>)
 8000316:	1e43      	subs	r3, r0, #1
  {
    return (1UL);                                                   /* Reload value impossible */
 8000318:	2001      	movs	r0, #1
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800031a:	4293      	cmp	r3, r2
 800031c:	d80d      	bhi.n	800033a <HAL_SYSTICK_Config+0x26>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 800031e:	21c0      	movs	r1, #192	; 0xc0
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000320:	4a07      	ldr	r2, [pc, #28]	; (8000340 <HAL_SYSTICK_Config+0x2c>)
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000322:	4808      	ldr	r0, [pc, #32]	; (8000344 <HAL_SYSTICK_Config+0x30>)
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000324:	6053      	str	r3, [r2, #4]
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000326:	6a03      	ldr	r3, [r0, #32]
 8000328:	0609      	lsls	r1, r1, #24
 800032a:	021b      	lsls	r3, r3, #8
 800032c:	0a1b      	lsrs	r3, r3, #8
 800032e:	430b      	orrs	r3, r1
 8000330:	6203      	str	r3, [r0, #32]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000332:	2000      	movs	r0, #0
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000334:	2307      	movs	r3, #7
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000336:	6090      	str	r0, [r2, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000338:	6013      	str	r3, [r2, #0]
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
   return SysTick_Config(TicksNumb);
}
 800033a:	4770      	bx	lr
 800033c:	00ffffff 	.word	0x00ffffff
 8000340:	e000e010 	.word	0xe000e010
 8000344:	e000ed00 	.word	0xe000ed00

08000348 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{ 
 8000348:	b5f0      	push	{r4, r5, r6, r7, lr}
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull)); 

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != RESET)
 800034a:	680b      	ldr	r3, [r1, #0]
{ 
 800034c:	b087      	sub	sp, #28
  while (((GPIO_Init->Pin) >> position) != RESET)
 800034e:	9302      	str	r3, [sp, #8]
  uint32_t position = 0x00U;
 8000350:	2300      	movs	r3, #0
{ 
 8000352:	9101      	str	r1, [sp, #4]
  while (((GPIO_Init->Pin) >> position) != RESET)
 8000354:	9a02      	ldr	r2, [sp, #8]
 8000356:	40da      	lsrs	r2, r3
 8000358:	d101      	bne.n	800035e <HAL_GPIO_Init+0x16>
      }
    }
    
    position++;
  } 
}
 800035a:	b007      	add	sp, #28
 800035c:	bdf0      	pop	{r4, r5, r6, r7, pc}
    iocurrent = (GPIO_Init->Pin) & (1U << position);
 800035e:	2201      	movs	r2, #1
 8000360:	409a      	lsls	r2, r3
 8000362:	9203      	str	r2, [sp, #12]
 8000364:	9903      	ldr	r1, [sp, #12]
 8000366:	9a02      	ldr	r2, [sp, #8]
 8000368:	400a      	ands	r2, r1
 800036a:	9200      	str	r2, [sp, #0]
    if(iocurrent)
 800036c:	d100      	bne.n	8000370 <HAL_GPIO_Init+0x28>
 800036e:	e08c      	b.n	800048a <HAL_GPIO_Init+0x142>
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD)) 
 8000370:	9a01      	ldr	r2, [sp, #4]
 8000372:	2110      	movs	r1, #16
 8000374:	6852      	ldr	r2, [r2, #4]
 8000376:	0016      	movs	r6, r2
 8000378:	438e      	bics	r6, r1
 800037a:	2e02      	cmp	r6, #2
 800037c:	d10e      	bne.n	800039c <HAL_GPIO_Init+0x54>
        CLEAR_BIT(temp, 0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;      
 800037e:	2507      	movs	r5, #7
 8000380:	401d      	ands	r5, r3
 8000382:	00ad      	lsls	r5, r5, #2
 8000384:	3901      	subs	r1, #1
 8000386:	40a9      	lsls	r1, r5
        temp = GPIOx->AFR[position >> 3];
 8000388:	08dc      	lsrs	r4, r3, #3
 800038a:	00a4      	lsls	r4, r4, #2
 800038c:	1904      	adds	r4, r0, r4
 800038e:	6a27      	ldr	r7, [r4, #32]
        CLEAR_BIT(temp, 0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;      
 8000390:	438f      	bics	r7, r1
        SET_BIT(temp, (uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));       
 8000392:	9901      	ldr	r1, [sp, #4]
 8000394:	6909      	ldr	r1, [r1, #16]
 8000396:	40a9      	lsls	r1, r5
 8000398:	430f      	orrs	r7, r1
        GPIOx->AFR[position >> 3U] = temp;
 800039a:	6227      	str	r7, [r4, #32]
      CLEAR_BIT(temp, GPIO_MODER_MODER0 << (position * 2U));   
 800039c:	2403      	movs	r4, #3
 800039e:	005f      	lsls	r7, r3, #1
 80003a0:	40bc      	lsls	r4, r7
 80003a2:	43e4      	mvns	r4, r4
      temp = GPIOx->MODER;
 80003a4:	6805      	ldr	r5, [r0, #0]
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80003a6:	3e01      	subs	r6, #1
      CLEAR_BIT(temp, GPIO_MODER_MODER0 << (position * 2U));   
 80003a8:	4025      	ands	r5, r4
 80003aa:	46ac      	mov	ip, r5
      SET_BIT(temp, (GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80003ac:	2503      	movs	r5, #3
 80003ae:	4015      	ands	r5, r2
 80003b0:	40bd      	lsls	r5, r7
 80003b2:	4661      	mov	r1, ip
 80003b4:	430d      	orrs	r5, r1
      GPIOx->MODER = temp;
 80003b6:	6005      	str	r5, [r0, #0]
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80003b8:	2e01      	cmp	r6, #1
 80003ba:	d80f      	bhi.n	80003dc <HAL_GPIO_Init+0x94>
        SET_BIT(temp, GPIO_Init->Speed << (position * 2U));
 80003bc:	9901      	ldr	r1, [sp, #4]
        temp = GPIOx->OSPEEDR; 
 80003be:	6886      	ldr	r6, [r0, #8]
        SET_BIT(temp, GPIO_Init->Speed << (position * 2U));
 80003c0:	68cd      	ldr	r5, [r1, #12]
        CLEAR_BIT(temp, GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80003c2:	4026      	ands	r6, r4
        SET_BIT(temp, GPIO_Init->Speed << (position * 2U));
 80003c4:	40bd      	lsls	r5, r7
 80003c6:	4335      	orrs	r5, r6
        GPIOx->OSPEEDR = temp;
 80003c8:	6085      	str	r5, [r0, #8]
        temp = GPIOx->OTYPER;
 80003ca:	6846      	ldr	r6, [r0, #4]
        CLEAR_BIT(temp, GPIO_OTYPER_OT_0 << position) ;
 80003cc:	9903      	ldr	r1, [sp, #12]
        SET_BIT(temp, ((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 80003ce:	0915      	lsrs	r5, r2, #4
        CLEAR_BIT(temp, GPIO_OTYPER_OT_0 << position) ;
 80003d0:	438e      	bics	r6, r1
        SET_BIT(temp, ((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 80003d2:	2101      	movs	r1, #1
 80003d4:	400d      	ands	r5, r1
 80003d6:	409d      	lsls	r5, r3
 80003d8:	4335      	orrs	r5, r6
        GPIOx->OTYPER = temp;
 80003da:	6045      	str	r5, [r0, #4]
      temp = GPIOx->PUPDR;
 80003dc:	68c5      	ldr	r5, [r0, #12]
      SET_BIT(temp, (GPIO_Init->Pull) << (position * 2U));
 80003de:	9901      	ldr	r1, [sp, #4]
      CLEAR_BIT(temp, GPIO_PUPDR_PUPDR0 << (position * 2U));
 80003e0:	402c      	ands	r4, r5
      SET_BIT(temp, (GPIO_Init->Pull) << (position * 2U));
 80003e2:	688d      	ldr	r5, [r1, #8]
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE) 
 80003e4:	2180      	movs	r1, #128	; 0x80
      SET_BIT(temp, (GPIO_Init->Pull) << (position * 2U));
 80003e6:	40bd      	lsls	r5, r7
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE) 
 80003e8:	0549      	lsls	r1, r1, #21
      SET_BIT(temp, (GPIO_Init->Pull) << (position * 2U));
 80003ea:	432c      	orrs	r4, r5
      GPIOx->PUPDR = temp;
 80003ec:	60c4      	str	r4, [r0, #12]
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE) 
 80003ee:	420a      	tst	r2, r1
 80003f0:	d04b      	beq.n	800048a <HAL_GPIO_Init+0x142>
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80003f2:	2101      	movs	r1, #1
 80003f4:	4c26      	ldr	r4, [pc, #152]	; (8000490 <HAL_GPIO_Init+0x148>)
        CLEAR_BIT(temp, (0x0FU) << (4U * (position & 0x03U)));
 80003f6:	2603      	movs	r6, #3
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80003f8:	69a5      	ldr	r5, [r4, #24]
        CLEAR_BIT(temp, (0x0FU) << (4U * (position & 0x03U)));
 80003fa:	401e      	ands	r6, r3
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80003fc:	430d      	orrs	r5, r1
 80003fe:	61a5      	str	r5, [r4, #24]
 8000400:	69a4      	ldr	r4, [r4, #24]
        temp = SYSCFG->EXTICR[position >> 2];
 8000402:	089d      	lsrs	r5, r3, #2
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000404:	400c      	ands	r4, r1
 8000406:	9405      	str	r4, [sp, #20]
 8000408:	9c05      	ldr	r4, [sp, #20]
        CLEAR_BIT(temp, (0x0FU) << (4U * (position & 0x03U)));
 800040a:	240f      	movs	r4, #15
 800040c:	4921      	ldr	r1, [pc, #132]	; (8000494 <HAL_GPIO_Init+0x14c>)
 800040e:	00ad      	lsls	r5, r5, #2
 8000410:	00b6      	lsls	r6, r6, #2
 8000412:	186d      	adds	r5, r5, r1
 8000414:	40b4      	lsls	r4, r6
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8000416:	2190      	movs	r1, #144	; 0x90
        temp = SYSCFG->EXTICR[position >> 2];
 8000418:	68af      	ldr	r7, [r5, #8]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800041a:	05c9      	lsls	r1, r1, #23
        CLEAR_BIT(temp, (0x0FU) << (4U * (position & 0x03U)));
 800041c:	43a7      	bics	r7, r4
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800041e:	2400      	movs	r4, #0
 8000420:	4288      	cmp	r0, r1
 8000422:	d00c      	beq.n	800043e <HAL_GPIO_Init+0xf6>
 8000424:	491c      	ldr	r1, [pc, #112]	; (8000498 <HAL_GPIO_Init+0x150>)
 8000426:	3401      	adds	r4, #1
 8000428:	4288      	cmp	r0, r1
 800042a:	d008      	beq.n	800043e <HAL_GPIO_Init+0xf6>
 800042c:	491b      	ldr	r1, [pc, #108]	; (800049c <HAL_GPIO_Init+0x154>)
 800042e:	3401      	adds	r4, #1
 8000430:	4288      	cmp	r0, r1
 8000432:	d004      	beq.n	800043e <HAL_GPIO_Init+0xf6>
 8000434:	491a      	ldr	r1, [pc, #104]	; (80004a0 <HAL_GPIO_Init+0x158>)
 8000436:	3403      	adds	r4, #3
 8000438:	4288      	cmp	r0, r1
 800043a:	d100      	bne.n	800043e <HAL_GPIO_Init+0xf6>
 800043c:	3c02      	subs	r4, #2
 800043e:	40b4      	lsls	r4, r6
        CLEAR_BIT(temp, (uint32_t)iocurrent);
 8000440:	9900      	ldr	r1, [sp, #0]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8000442:	433c      	orrs	r4, r7
          SET_BIT(temp, iocurrent); 
 8000444:	000e      	movs	r6, r1
        SYSCFG->EXTICR[position >> 2] = temp;
 8000446:	60ac      	str	r4, [r5, #8]
        temp = EXTI->IMR;
 8000448:	4c16      	ldr	r4, [pc, #88]	; (80004a4 <HAL_GPIO_Init+0x15c>)
        CLEAR_BIT(temp, (uint32_t)iocurrent);
 800044a:	43cd      	mvns	r5, r1
        temp = EXTI->IMR;
 800044c:	6827      	ldr	r7, [r4, #0]
          SET_BIT(temp, iocurrent); 
 800044e:	433e      	orrs	r6, r7
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8000450:	03d1      	lsls	r1, r2, #15
 8000452:	d401      	bmi.n	8000458 <HAL_GPIO_Init+0x110>
        CLEAR_BIT(temp, (uint32_t)iocurrent);
 8000454:	003e      	movs	r6, r7
 8000456:	402e      	ands	r6, r5
        EXTI->IMR = temp;
 8000458:	6026      	str	r6, [r4, #0]
        temp = EXTI->EMR;
 800045a:	6867      	ldr	r7, [r4, #4]
          SET_BIT(temp, iocurrent); 
 800045c:	9e00      	ldr	r6, [sp, #0]
 800045e:	433e      	orrs	r6, r7
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8000460:	0391      	lsls	r1, r2, #14
 8000462:	d401      	bmi.n	8000468 <HAL_GPIO_Init+0x120>
        CLEAR_BIT(temp, (uint32_t)iocurrent);      
 8000464:	003e      	movs	r6, r7
 8000466:	402e      	ands	r6, r5
        EXTI->EMR = temp;
 8000468:	6066      	str	r6, [r4, #4]
        temp = EXTI->RTSR;
 800046a:	68a7      	ldr	r7, [r4, #8]
          SET_BIT(temp, iocurrent); 
 800046c:	9e00      	ldr	r6, [sp, #0]
 800046e:	433e      	orrs	r6, r7
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8000470:	02d1      	lsls	r1, r2, #11
 8000472:	d401      	bmi.n	8000478 <HAL_GPIO_Init+0x130>
        CLEAR_BIT(temp, (uint32_t)iocurrent); 
 8000474:	003e      	movs	r6, r7
 8000476:	402e      	ands	r6, r5
        EXTI->RTSR = temp;
 8000478:	60a6      	str	r6, [r4, #8]
        temp = EXTI->FTSR;
 800047a:	68e6      	ldr	r6, [r4, #12]
          SET_BIT(temp, iocurrent); 
 800047c:	9f00      	ldr	r7, [sp, #0]
 800047e:	4337      	orrs	r7, r6
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8000480:	0292      	lsls	r2, r2, #10
 8000482:	d401      	bmi.n	8000488 <HAL_GPIO_Init+0x140>
        CLEAR_BIT(temp, (uint32_t)iocurrent); 
 8000484:	402e      	ands	r6, r5
 8000486:	0037      	movs	r7, r6
        EXTI->FTSR = temp;
 8000488:	60e7      	str	r7, [r4, #12]
    position++;
 800048a:	3301      	adds	r3, #1
 800048c:	e762      	b.n	8000354 <HAL_GPIO_Init+0xc>
 800048e:	46c0      	nop			; (mov r8, r8)
 8000490:	40021000 	.word	0x40021000
 8000494:	40010000 	.word	0x40010000
 8000498:	48000400 	.word	0x48000400
 800049c:	48000800 	.word	0x48000800
 80004a0:	48000c00 	.word	0x48000c00
 80004a4:	40010400 	.word	0x40010400

080004a8 <HAL_GPIO_WritePin>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80004a8:	2a00      	cmp	r2, #0
 80004aa:	d001      	beq.n	80004b0 <HAL_GPIO_WritePin+0x8>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80004ac:	6181      	str	r1, [r0, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 80004ae:	4770      	bx	lr
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80004b0:	6281      	str	r1, [r0, #40]	; 0x28
}
 80004b2:	e7fc      	b.n	80004ae <HAL_GPIO_WritePin+0x6>

080004b4 <HAL_GPIO_TogglePin>:
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  GPIOx->ODR ^= GPIO_Pin;
 80004b4:	6943      	ldr	r3, [r0, #20]
 80004b6:	4059      	eors	r1, r3
 80004b8:	6141      	str	r1, [r0, #20]
}
 80004ba:	4770      	bx	lr

080004bc <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80004bc:	b570      	push	{r4, r5, r6, lr}
 80004be:	0004      	movs	r4, r0
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
  {
    return HAL_ERROR;
 80004c0:	2001      	movs	r0, #1
  if (hi2c == NULL)
 80004c2:	2c00      	cmp	r4, #0
 80004c4:	d03f      	beq.n	8000546 <HAL_I2C_Init+0x8a>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80004c6:	0025      	movs	r5, r4
 80004c8:	3541      	adds	r5, #65	; 0x41
 80004ca:	782b      	ldrb	r3, [r5, #0]
 80004cc:	b2db      	uxtb	r3, r3
 80004ce:	2b00      	cmp	r3, #0
 80004d0:	d105      	bne.n	80004de <HAL_I2C_Init+0x22>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80004d2:	0022      	movs	r2, r4
 80004d4:	3240      	adds	r2, #64	; 0x40
 80004d6:	7013      	strb	r3, [r2, #0]

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 80004d8:	0020      	movs	r0, r4
 80004da:	f001 fda3 	bl	8002024 <HAL_I2C_MspInit>
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80004de:	2324      	movs	r3, #36	; 0x24

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80004e0:	2101      	movs	r1, #1
  hi2c->State = HAL_I2C_STATE_BUSY;
 80004e2:	702b      	strb	r3, [r5, #0]
  __HAL_I2C_DISABLE(hi2c);
 80004e4:	6823      	ldr	r3, [r4, #0]
  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80004e6:	68e0      	ldr	r0, [r4, #12]
  __HAL_I2C_DISABLE(hi2c);
 80004e8:	681a      	ldr	r2, [r3, #0]
 80004ea:	68a6      	ldr	r6, [r4, #8]
 80004ec:	438a      	bics	r2, r1
 80004ee:	601a      	str	r2, [r3, #0]
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 80004f0:	6861      	ldr	r1, [r4, #4]
 80004f2:	4a1a      	ldr	r2, [pc, #104]	; (800055c <HAL_I2C_Init+0xa0>)
 80004f4:	400a      	ands	r2, r1
 80004f6:	611a      	str	r2, [r3, #16]
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 80004f8:	6899      	ldr	r1, [r3, #8]
 80004fa:	4a19      	ldr	r2, [pc, #100]	; (8000560 <HAL_I2C_Init+0xa4>)
 80004fc:	4011      	ands	r1, r2
 80004fe:	6099      	str	r1, [r3, #8]
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8000500:	2801      	cmp	r0, #1
 8000502:	d121      	bne.n	8000548 <HAL_I2C_Init+0x8c>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8000504:	2180      	movs	r1, #128	; 0x80
 8000506:	0209      	lsls	r1, r1, #8
 8000508:	4331      	orrs	r1, r6
 800050a:	6099      	str	r1, [r3, #8]
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 800050c:	6858      	ldr	r0, [r3, #4]
 800050e:	4915      	ldr	r1, [pc, #84]	; (8000564 <HAL_I2C_Init+0xa8>)
 8000510:	4301      	orrs	r1, r0
 8000512:	6059      	str	r1, [r3, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8000514:	68d9      	ldr	r1, [r3, #12]
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8000516:	2000      	movs	r0, #0
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8000518:	400a      	ands	r2, r1
 800051a:	60da      	str	r2, [r3, #12]
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | (hi2c->Init.OwnAddress2Masks << 8));
 800051c:	6961      	ldr	r1, [r4, #20]
 800051e:	6922      	ldr	r2, [r4, #16]
 8000520:	430a      	orrs	r2, r1
 8000522:	69a1      	ldr	r1, [r4, #24]
 8000524:	0209      	lsls	r1, r1, #8
 8000526:	430a      	orrs	r2, r1
 8000528:	60da      	str	r2, [r3, #12]
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 800052a:	6a21      	ldr	r1, [r4, #32]
 800052c:	69e2      	ldr	r2, [r4, #28]
 800052e:	430a      	orrs	r2, r1
 8000530:	601a      	str	r2, [r3, #0]
  __HAL_I2C_ENABLE(hi2c);
 8000532:	2201      	movs	r2, #1
 8000534:	6819      	ldr	r1, [r3, #0]
 8000536:	430a      	orrs	r2, r1
 8000538:	601a      	str	r2, [r3, #0]
  hi2c->State = HAL_I2C_STATE_READY;
 800053a:	2320      	movs	r3, #32
  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800053c:	6460      	str	r0, [r4, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 800053e:	702b      	strb	r3, [r5, #0]
  hi2c->PreviousState = I2C_STATE_NONE;
 8000540:	6320      	str	r0, [r4, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8000542:	3442      	adds	r4, #66	; 0x42
 8000544:	7020      	strb	r0, [r4, #0]

  return HAL_OK;
}
 8000546:	bd70      	pop	{r4, r5, r6, pc}
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8000548:	2184      	movs	r1, #132	; 0x84
 800054a:	0209      	lsls	r1, r1, #8
 800054c:	4331      	orrs	r1, r6
 800054e:	6099      	str	r1, [r3, #8]
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8000550:	2802      	cmp	r0, #2
 8000552:	d1db      	bne.n	800050c <HAL_I2C_Init+0x50>
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8000554:	2180      	movs	r1, #128	; 0x80
 8000556:	0109      	lsls	r1, r1, #4
 8000558:	6059      	str	r1, [r3, #4]
 800055a:	e7d7      	b.n	800050c <HAL_I2C_Init+0x50>
 800055c:	f0ffffff 	.word	0xf0ffffff
 8000560:	ffff7fff 	.word	0xffff7fff
 8000564:	02008000 	.word	0x02008000

08000568 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8000568:	b5f0      	push	{r4, r5, r6, r7, lr}
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800056a:	0004      	movs	r4, r0
 800056c:	3441      	adds	r4, #65	; 0x41
 800056e:	7822      	ldrb	r2, [r4, #0]
{
 8000570:	0003      	movs	r3, r0
  if (hi2c->State == HAL_I2C_STATE_READY)
 8000572:	b2d2      	uxtb	r2, r2

    return HAL_OK;
  }
  else
  {
    return HAL_BUSY;
 8000574:	2002      	movs	r0, #2
  if (hi2c->State == HAL_I2C_STATE_READY)
 8000576:	2a20      	cmp	r2, #32
 8000578:	d118      	bne.n	80005ac <HAL_I2CEx_ConfigAnalogFilter+0x44>
    __HAL_LOCK(hi2c);
 800057a:	001d      	movs	r5, r3
 800057c:	3540      	adds	r5, #64	; 0x40
 800057e:	782e      	ldrb	r6, [r5, #0]
 8000580:	2e01      	cmp	r6, #1
 8000582:	d013      	beq.n	80005ac <HAL_I2CEx_ConfigAnalogFilter+0x44>
    __HAL_I2C_DISABLE(hi2c);
 8000584:	681b      	ldr	r3, [r3, #0]
    hi2c->State = HAL_I2C_STATE_BUSY;
 8000586:	3022      	adds	r0, #34	; 0x22
 8000588:	7020      	strb	r0, [r4, #0]
    __HAL_I2C_DISABLE(hi2c);
 800058a:	681e      	ldr	r6, [r3, #0]
 800058c:	3823      	subs	r0, #35	; 0x23
 800058e:	4386      	bics	r6, r0
 8000590:	601e      	str	r6, [r3, #0]
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8000592:	681e      	ldr	r6, [r3, #0]
 8000594:	4f06      	ldr	r7, [pc, #24]	; (80005b0 <HAL_I2CEx_ConfigAnalogFilter+0x48>)
 8000596:	403e      	ands	r6, r7
 8000598:	601e      	str	r6, [r3, #0]
    hi2c->Instance->CR1 |= AnalogFilter;
 800059a:	681e      	ldr	r6, [r3, #0]
 800059c:	4331      	orrs	r1, r6
 800059e:	6019      	str	r1, [r3, #0]
    __HAL_I2C_ENABLE(hi2c);
 80005a0:	6819      	ldr	r1, [r3, #0]
 80005a2:	4308      	orrs	r0, r1
 80005a4:	6018      	str	r0, [r3, #0]
    __HAL_UNLOCK(hi2c);
 80005a6:	2000      	movs	r0, #0
    hi2c->State = HAL_I2C_STATE_READY;
 80005a8:	7022      	strb	r2, [r4, #0]
    __HAL_UNLOCK(hi2c);
 80005aa:	7028      	strb	r0, [r5, #0]
  }
}
 80005ac:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80005ae:	46c0      	nop			; (mov r8, r8)
 80005b0:	ffffefff 	.word	0xffffefff

080005b4 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 80005b4:	b5f0      	push	{r4, r5, r6, r7, lr}

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80005b6:	0005      	movs	r5, r0
 80005b8:	3541      	adds	r5, #65	; 0x41
 80005ba:	782a      	ldrb	r2, [r5, #0]
{
 80005bc:	0003      	movs	r3, r0
  if (hi2c->State == HAL_I2C_STATE_READY)
 80005be:	b2d2      	uxtb	r2, r2

    return HAL_OK;
  }
  else
  {
    return HAL_BUSY;
 80005c0:	2002      	movs	r0, #2
  if (hi2c->State == HAL_I2C_STATE_READY)
 80005c2:	2a20      	cmp	r2, #32
 80005c4:	d117      	bne.n	80005f6 <HAL_I2CEx_ConfigDigitalFilter+0x42>
    __HAL_LOCK(hi2c);
 80005c6:	001c      	movs	r4, r3
 80005c8:	3440      	adds	r4, #64	; 0x40
 80005ca:	7826      	ldrb	r6, [r4, #0]
 80005cc:	2e01      	cmp	r6, #1
 80005ce:	d012      	beq.n	80005f6 <HAL_I2CEx_ConfigDigitalFilter+0x42>
    __HAL_I2C_DISABLE(hi2c);
 80005d0:	681b      	ldr	r3, [r3, #0]
    hi2c->State = HAL_I2C_STATE_BUSY;
 80005d2:	3022      	adds	r0, #34	; 0x22
 80005d4:	7028      	strb	r0, [r5, #0]
    __HAL_I2C_DISABLE(hi2c);
 80005d6:	681e      	ldr	r6, [r3, #0]
 80005d8:	3823      	subs	r0, #35	; 0x23
 80005da:	4386      	bics	r6, r0
 80005dc:	601e      	str	r6, [r3, #0]
    tmpreg = hi2c->Instance->CR1;
 80005de:	681e      	ldr	r6, [r3, #0]
    tmpreg &= ~(I2C_CR1_DNF);
 80005e0:	4f05      	ldr	r7, [pc, #20]	; (80005f8 <HAL_I2CEx_ConfigDigitalFilter+0x44>)
    tmpreg |= DigitalFilter << 8U;
 80005e2:	0209      	lsls	r1, r1, #8
    tmpreg &= ~(I2C_CR1_DNF);
 80005e4:	403e      	ands	r6, r7
    tmpreg |= DigitalFilter << 8U;
 80005e6:	4331      	orrs	r1, r6
    hi2c->Instance->CR1 = tmpreg;
 80005e8:	6019      	str	r1, [r3, #0]
    __HAL_I2C_ENABLE(hi2c);
 80005ea:	6819      	ldr	r1, [r3, #0]
 80005ec:	4308      	orrs	r0, r1
 80005ee:	6018      	str	r0, [r3, #0]
    __HAL_UNLOCK(hi2c);
 80005f0:	2000      	movs	r0, #0
    hi2c->State = HAL_I2C_STATE_READY;
 80005f2:	702a      	strb	r2, [r5, #0]
    __HAL_UNLOCK(hi2c);
 80005f4:	7020      	strb	r0, [r4, #0]
  }
}
 80005f6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80005f8:	fffff0ff 	.word	0xfffff0ff

080005fc <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80005fc:	b5f0      	push	{r4, r5, r6, r7, lr}
  /* Check the parameters */
  assert_param(RCC_OscInitStruct != NULL);
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80005fe:	6803      	ldr	r3, [r0, #0]
{
 8000600:	b085      	sub	sp, #20
 8000602:	0005      	movs	r5, r0
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8000604:	07db      	lsls	r3, r3, #31
 8000606:	d42f      	bmi.n	8000668 <HAL_RCC_OscConfig+0x6c>
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8000608:	682b      	ldr	r3, [r5, #0]
 800060a:	079b      	lsls	r3, r3, #30
 800060c:	d500      	bpl.n	8000610 <HAL_RCC_OscConfig+0x14>
 800060e:	e081      	b.n	8000714 <HAL_RCC_OscConfig+0x118>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8000610:	682b      	ldr	r3, [r5, #0]
 8000612:	071b      	lsls	r3, r3, #28
 8000614:	d500      	bpl.n	8000618 <HAL_RCC_OscConfig+0x1c>
 8000616:	e0bc      	b.n	8000792 <HAL_RCC_OscConfig+0x196>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8000618:	682b      	ldr	r3, [r5, #0]
 800061a:	075b      	lsls	r3, r3, #29
 800061c:	d500      	bpl.n	8000620 <HAL_RCC_OscConfig+0x24>
 800061e:	e0df      	b.n	80007e0 <HAL_RCC_OscConfig+0x1e4>
      __HAL_RCC_PWR_CLK_DISABLE();
    }
  }

  /*----------------------------- HSI14 Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI14) == RCC_OSCILLATORTYPE_HSI14)
 8000620:	682b      	ldr	r3, [r5, #0]
 8000622:	06db      	lsls	r3, r3, #27
 8000624:	d51a      	bpl.n	800065c <HAL_RCC_OscConfig+0x60>
    /* Check the parameters */
    assert_param(IS_RCC_HSI14(RCC_OscInitStruct->HSI14State));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSI14CalibrationValue));

    /* Check the HSI14 State */
    if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ON)
 8000626:	696a      	ldr	r2, [r5, #20]
 8000628:	4cb5      	ldr	r4, [pc, #724]	; (8000900 <HAL_RCC_OscConfig+0x304>)
 800062a:	2304      	movs	r3, #4
 800062c:	2a01      	cmp	r2, #1
 800062e:	d000      	beq.n	8000632 <HAL_RCC_OscConfig+0x36>
 8000630:	e14b      	b.n	80008ca <HAL_RCC_OscConfig+0x2ce>
    {
      /* Disable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_DISABLE();
 8000632:	6b61      	ldr	r1, [r4, #52]	; 0x34

      /* Get Start Tick */
      tickstart = HAL_GetTick();
      
      /* Wait till HSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 8000634:	2602      	movs	r6, #2
      __HAL_RCC_HSI14ADC_DISABLE();
 8000636:	430b      	orrs	r3, r1
 8000638:	6363      	str	r3, [r4, #52]	; 0x34
      __HAL_RCC_HSI14_ENABLE();
 800063a:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800063c:	431a      	orrs	r2, r3
 800063e:	6362      	str	r2, [r4, #52]	; 0x34
      tickstart = HAL_GetTick();
 8000640:	f7ff fe22 	bl	8000288 <HAL_GetTick>
 8000644:	0007      	movs	r7, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 8000646:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8000648:	4233      	tst	r3, r6
 800064a:	d100      	bne.n	800064e <HAL_RCC_OscConfig+0x52>
 800064c:	e136      	b.n	80008bc <HAL_RCC_OscConfig+0x2c0>
    {
      /* Enable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_ENABLE();

      /* Adjusts the Internal High Speed oscillator 14Mhz (HSI14) calibration value. */
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 800064e:	21f8      	movs	r1, #248	; 0xf8
 8000650:	6b62      	ldr	r2, [r4, #52]	; 0x34
 8000652:	69ab      	ldr	r3, [r5, #24]
 8000654:	438a      	bics	r2, r1
 8000656:	00db      	lsls	r3, r3, #3
 8000658:	4313      	orrs	r3, r2
 800065a:	6363      	str	r3, [r4, #52]	; 0x34
#endif /* RCC_HSI48_SUPPORT */
       
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800065c:	6a29      	ldr	r1, [r5, #32]
 800065e:	2900      	cmp	r1, #0
 8000660:	d000      	beq.n	8000664 <HAL_RCC_OscConfig+0x68>
 8000662:	e159      	b.n	8000918 <HAL_RCC_OscConfig+0x31c>
    {
      return HAL_ERROR;
    }
  }
  
  return HAL_OK;
 8000664:	2000      	movs	r0, #0
 8000666:	e013      	b.n	8000690 <HAL_RCC_OscConfig+0x94>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 8000668:	210c      	movs	r1, #12
 800066a:	4ca5      	ldr	r4, [pc, #660]	; (8000900 <HAL_RCC_OscConfig+0x304>)
 800066c:	6862      	ldr	r2, [r4, #4]
 800066e:	400a      	ands	r2, r1
 8000670:	2a04      	cmp	r2, #4
 8000672:	d006      	beq.n	8000682 <HAL_RCC_OscConfig+0x86>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8000674:	6863      	ldr	r3, [r4, #4]
 8000676:	400b      	ands	r3, r1
 8000678:	2b08      	cmp	r3, #8
 800067a:	d10b      	bne.n	8000694 <HAL_RCC_OscConfig+0x98>
 800067c:	6863      	ldr	r3, [r4, #4]
 800067e:	03db      	lsls	r3, r3, #15
 8000680:	d508      	bpl.n	8000694 <HAL_RCC_OscConfig+0x98>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000682:	6823      	ldr	r3, [r4, #0]
 8000684:	039b      	lsls	r3, r3, #14
 8000686:	d5bf      	bpl.n	8000608 <HAL_RCC_OscConfig+0xc>
 8000688:	686b      	ldr	r3, [r5, #4]
 800068a:	2b00      	cmp	r3, #0
 800068c:	d1bc      	bne.n	8000608 <HAL_RCC_OscConfig+0xc>
        return HAL_ERROR;
 800068e:	2001      	movs	r0, #1
}
 8000690:	b005      	add	sp, #20
 8000692:	bdf0      	pop	{r4, r5, r6, r7, pc}
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000694:	686b      	ldr	r3, [r5, #4]
 8000696:	2b01      	cmp	r3, #1
 8000698:	d113      	bne.n	80006c2 <HAL_RCC_OscConfig+0xc6>
 800069a:	2380      	movs	r3, #128	; 0x80
 800069c:	6822      	ldr	r2, [r4, #0]
 800069e:	025b      	lsls	r3, r3, #9
 80006a0:	4313      	orrs	r3, r2
 80006a2:	6023      	str	r3, [r4, #0]
        tickstart = HAL_GetTick();
 80006a4:	f7ff fdf0 	bl	8000288 <HAL_GetTick>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80006a8:	2680      	movs	r6, #128	; 0x80
        tickstart = HAL_GetTick();
 80006aa:	0007      	movs	r7, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80006ac:	02b6      	lsls	r6, r6, #10
 80006ae:	6823      	ldr	r3, [r4, #0]
 80006b0:	4233      	tst	r3, r6
 80006b2:	d1a9      	bne.n	8000608 <HAL_RCC_OscConfig+0xc>
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80006b4:	f7ff fde8 	bl	8000288 <HAL_GetTick>
 80006b8:	1bc0      	subs	r0, r0, r7
 80006ba:	2864      	cmp	r0, #100	; 0x64
 80006bc:	d9f7      	bls.n	80006ae <HAL_RCC_OscConfig+0xb2>
            return HAL_TIMEOUT;
 80006be:	2003      	movs	r0, #3
 80006c0:	e7e6      	b.n	8000690 <HAL_RCC_OscConfig+0x94>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80006c2:	2b00      	cmp	r3, #0
 80006c4:	d116      	bne.n	80006f4 <HAL_RCC_OscConfig+0xf8>
 80006c6:	6823      	ldr	r3, [r4, #0]
 80006c8:	4a8e      	ldr	r2, [pc, #568]	; (8000904 <HAL_RCC_OscConfig+0x308>)
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80006ca:	2680      	movs	r6, #128	; 0x80
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80006cc:	4013      	ands	r3, r2
 80006ce:	6023      	str	r3, [r4, #0]
 80006d0:	6823      	ldr	r3, [r4, #0]
 80006d2:	4a8d      	ldr	r2, [pc, #564]	; (8000908 <HAL_RCC_OscConfig+0x30c>)
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80006d4:	02b6      	lsls	r6, r6, #10
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80006d6:	4013      	ands	r3, r2
 80006d8:	6023      	str	r3, [r4, #0]
        tickstart = HAL_GetTick();
 80006da:	f7ff fdd5 	bl	8000288 <HAL_GetTick>
 80006de:	0007      	movs	r7, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80006e0:	6823      	ldr	r3, [r4, #0]
 80006e2:	4233      	tst	r3, r6
 80006e4:	d100      	bne.n	80006e8 <HAL_RCC_OscConfig+0xec>
 80006e6:	e78f      	b.n	8000608 <HAL_RCC_OscConfig+0xc>
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80006e8:	f7ff fdce 	bl	8000288 <HAL_GetTick>
 80006ec:	1bc0      	subs	r0, r0, r7
 80006ee:	2864      	cmp	r0, #100	; 0x64
 80006f0:	d9f6      	bls.n	80006e0 <HAL_RCC_OscConfig+0xe4>
 80006f2:	e7e4      	b.n	80006be <HAL_RCC_OscConfig+0xc2>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80006f4:	2b05      	cmp	r3, #5
 80006f6:	d105      	bne.n	8000704 <HAL_RCC_OscConfig+0x108>
 80006f8:	2380      	movs	r3, #128	; 0x80
 80006fa:	6822      	ldr	r2, [r4, #0]
 80006fc:	02db      	lsls	r3, r3, #11
 80006fe:	4313      	orrs	r3, r2
 8000700:	6023      	str	r3, [r4, #0]
 8000702:	e7ca      	b.n	800069a <HAL_RCC_OscConfig+0x9e>
 8000704:	6823      	ldr	r3, [r4, #0]
 8000706:	4a7f      	ldr	r2, [pc, #508]	; (8000904 <HAL_RCC_OscConfig+0x308>)
 8000708:	4013      	ands	r3, r2
 800070a:	6023      	str	r3, [r4, #0]
 800070c:	6823      	ldr	r3, [r4, #0]
 800070e:	4a7e      	ldr	r2, [pc, #504]	; (8000908 <HAL_RCC_OscConfig+0x30c>)
 8000710:	4013      	ands	r3, r2
 8000712:	e7c6      	b.n	80006a2 <HAL_RCC_OscConfig+0xa6>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 8000714:	220c      	movs	r2, #12
 8000716:	4c7a      	ldr	r4, [pc, #488]	; (8000900 <HAL_RCC_OscConfig+0x304>)
 8000718:	6863      	ldr	r3, [r4, #4]
 800071a:	4213      	tst	r3, r2
 800071c:	d006      	beq.n	800072c <HAL_RCC_OscConfig+0x130>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 800071e:	6863      	ldr	r3, [r4, #4]
 8000720:	4013      	ands	r3, r2
 8000722:	2b08      	cmp	r3, #8
 8000724:	d110      	bne.n	8000748 <HAL_RCC_OscConfig+0x14c>
 8000726:	6863      	ldr	r3, [r4, #4]
 8000728:	03db      	lsls	r3, r3, #15
 800072a:	d40d      	bmi.n	8000748 <HAL_RCC_OscConfig+0x14c>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800072c:	6823      	ldr	r3, [r4, #0]
 800072e:	079b      	lsls	r3, r3, #30
 8000730:	d502      	bpl.n	8000738 <HAL_RCC_OscConfig+0x13c>
 8000732:	68eb      	ldr	r3, [r5, #12]
 8000734:	2b01      	cmp	r3, #1
 8000736:	d1aa      	bne.n	800068e <HAL_RCC_OscConfig+0x92>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000738:	21f8      	movs	r1, #248	; 0xf8
 800073a:	6822      	ldr	r2, [r4, #0]
 800073c:	692b      	ldr	r3, [r5, #16]
 800073e:	438a      	bics	r2, r1
 8000740:	00db      	lsls	r3, r3, #3
 8000742:	4313      	orrs	r3, r2
 8000744:	6023      	str	r3, [r4, #0]
 8000746:	e763      	b.n	8000610 <HAL_RCC_OscConfig+0x14>
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8000748:	68ea      	ldr	r2, [r5, #12]
 800074a:	2301      	movs	r3, #1
 800074c:	2a00      	cmp	r2, #0
 800074e:	d00f      	beq.n	8000770 <HAL_RCC_OscConfig+0x174>
        __HAL_RCC_HSI_ENABLE();
 8000750:	6822      	ldr	r2, [r4, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000752:	2602      	movs	r6, #2
        __HAL_RCC_HSI_ENABLE();
 8000754:	4313      	orrs	r3, r2
 8000756:	6023      	str	r3, [r4, #0]
        tickstart = HAL_GetTick();
 8000758:	f7ff fd96 	bl	8000288 <HAL_GetTick>
 800075c:	0007      	movs	r7, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800075e:	6823      	ldr	r3, [r4, #0]
 8000760:	4233      	tst	r3, r6
 8000762:	d1e9      	bne.n	8000738 <HAL_RCC_OscConfig+0x13c>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8000764:	f7ff fd90 	bl	8000288 <HAL_GetTick>
 8000768:	1bc0      	subs	r0, r0, r7
 800076a:	2802      	cmp	r0, #2
 800076c:	d9f7      	bls.n	800075e <HAL_RCC_OscConfig+0x162>
 800076e:	e7a6      	b.n	80006be <HAL_RCC_OscConfig+0xc2>
        __HAL_RCC_HSI_DISABLE();
 8000770:	6822      	ldr	r2, [r4, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8000772:	2602      	movs	r6, #2
        __HAL_RCC_HSI_DISABLE();
 8000774:	439a      	bics	r2, r3
 8000776:	6022      	str	r2, [r4, #0]
        tickstart = HAL_GetTick();
 8000778:	f7ff fd86 	bl	8000288 <HAL_GetTick>
 800077c:	0007      	movs	r7, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800077e:	6823      	ldr	r3, [r4, #0]
 8000780:	4233      	tst	r3, r6
 8000782:	d100      	bne.n	8000786 <HAL_RCC_OscConfig+0x18a>
 8000784:	e744      	b.n	8000610 <HAL_RCC_OscConfig+0x14>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8000786:	f7ff fd7f 	bl	8000288 <HAL_GetTick>
 800078a:	1bc0      	subs	r0, r0, r7
 800078c:	2802      	cmp	r0, #2
 800078e:	d9f6      	bls.n	800077e <HAL_RCC_OscConfig+0x182>
 8000790:	e795      	b.n	80006be <HAL_RCC_OscConfig+0xc2>
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8000792:	69ea      	ldr	r2, [r5, #28]
 8000794:	2301      	movs	r3, #1
 8000796:	4c5a      	ldr	r4, [pc, #360]	; (8000900 <HAL_RCC_OscConfig+0x304>)
 8000798:	2a00      	cmp	r2, #0
 800079a:	d010      	beq.n	80007be <HAL_RCC_OscConfig+0x1c2>
      __HAL_RCC_LSI_ENABLE();
 800079c:	6a62      	ldr	r2, [r4, #36]	; 0x24
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800079e:	2602      	movs	r6, #2
      __HAL_RCC_LSI_ENABLE();
 80007a0:	4313      	orrs	r3, r2
 80007a2:	6263      	str	r3, [r4, #36]	; 0x24
      tickstart = HAL_GetTick();
 80007a4:	f7ff fd70 	bl	8000288 <HAL_GetTick>
 80007a8:	0007      	movs	r7, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80007aa:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80007ac:	4233      	tst	r3, r6
 80007ae:	d000      	beq.n	80007b2 <HAL_RCC_OscConfig+0x1b6>
 80007b0:	e732      	b.n	8000618 <HAL_RCC_OscConfig+0x1c>
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80007b2:	f7ff fd69 	bl	8000288 <HAL_GetTick>
 80007b6:	1bc0      	subs	r0, r0, r7
 80007b8:	2802      	cmp	r0, #2
 80007ba:	d9f6      	bls.n	80007aa <HAL_RCC_OscConfig+0x1ae>
 80007bc:	e77f      	b.n	80006be <HAL_RCC_OscConfig+0xc2>
      __HAL_RCC_LSI_DISABLE();
 80007be:	6a62      	ldr	r2, [r4, #36]	; 0x24
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80007c0:	2602      	movs	r6, #2
      __HAL_RCC_LSI_DISABLE();
 80007c2:	439a      	bics	r2, r3
 80007c4:	6262      	str	r2, [r4, #36]	; 0x24
      tickstart = HAL_GetTick();
 80007c6:	f7ff fd5f 	bl	8000288 <HAL_GetTick>
 80007ca:	0007      	movs	r7, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80007cc:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80007ce:	4233      	tst	r3, r6
 80007d0:	d100      	bne.n	80007d4 <HAL_RCC_OscConfig+0x1d8>
 80007d2:	e721      	b.n	8000618 <HAL_RCC_OscConfig+0x1c>
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80007d4:	f7ff fd58 	bl	8000288 <HAL_GetTick>
 80007d8:	1bc0      	subs	r0, r0, r7
 80007da:	2802      	cmp	r0, #2
 80007dc:	d9f6      	bls.n	80007cc <HAL_RCC_OscConfig+0x1d0>
 80007de:	e76e      	b.n	80006be <HAL_RCC_OscConfig+0xc2>
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80007e0:	2280      	movs	r2, #128	; 0x80
    FlagStatus       pwrclkchanged = RESET;
 80007e2:	2100      	movs	r1, #0
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80007e4:	4c46      	ldr	r4, [pc, #280]	; (8000900 <HAL_RCC_OscConfig+0x304>)
 80007e6:	0552      	lsls	r2, r2, #21
 80007e8:	69e3      	ldr	r3, [r4, #28]
    FlagStatus       pwrclkchanged = RESET;
 80007ea:	9100      	str	r1, [sp, #0]
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80007ec:	4213      	tst	r3, r2
 80007ee:	d108      	bne.n	8000802 <HAL_RCC_OscConfig+0x206>
      __HAL_RCC_PWR_CLK_ENABLE();
 80007f0:	69e3      	ldr	r3, [r4, #28]
 80007f2:	4313      	orrs	r3, r2
 80007f4:	61e3      	str	r3, [r4, #28]
 80007f6:	69e3      	ldr	r3, [r4, #28]
 80007f8:	4013      	ands	r3, r2
 80007fa:	9303      	str	r3, [sp, #12]
 80007fc:	9b03      	ldr	r3, [sp, #12]
      pwrclkchanged = SET;
 80007fe:	2301      	movs	r3, #1
 8000800:	9300      	str	r3, [sp, #0]
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8000802:	2780      	movs	r7, #128	; 0x80
 8000804:	4e41      	ldr	r6, [pc, #260]	; (800090c <HAL_RCC_OscConfig+0x310>)
 8000806:	007f      	lsls	r7, r7, #1
 8000808:	6833      	ldr	r3, [r6, #0]
 800080a:	423b      	tst	r3, r7
 800080c:	d006      	beq.n	800081c <HAL_RCC_OscConfig+0x220>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800080e:	68ab      	ldr	r3, [r5, #8]
 8000810:	2b01      	cmp	r3, #1
 8000812:	d113      	bne.n	800083c <HAL_RCC_OscConfig+0x240>
 8000814:	6a22      	ldr	r2, [r4, #32]
 8000816:	4313      	orrs	r3, r2
 8000818:	6223      	str	r3, [r4, #32]
 800081a:	e030      	b.n	800087e <HAL_RCC_OscConfig+0x282>
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800081c:	6833      	ldr	r3, [r6, #0]
 800081e:	433b      	orrs	r3, r7
 8000820:	6033      	str	r3, [r6, #0]
      tickstart = HAL_GetTick();
 8000822:	f7ff fd31 	bl	8000288 <HAL_GetTick>
 8000826:	9001      	str	r0, [sp, #4]
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8000828:	6833      	ldr	r3, [r6, #0]
 800082a:	423b      	tst	r3, r7
 800082c:	d1ef      	bne.n	800080e <HAL_RCC_OscConfig+0x212>
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800082e:	f7ff fd2b 	bl	8000288 <HAL_GetTick>
 8000832:	9b01      	ldr	r3, [sp, #4]
 8000834:	1ac0      	subs	r0, r0, r3
 8000836:	2864      	cmp	r0, #100	; 0x64
 8000838:	d9f6      	bls.n	8000828 <HAL_RCC_OscConfig+0x22c>
 800083a:	e740      	b.n	80006be <HAL_RCC_OscConfig+0xc2>
 800083c:	2201      	movs	r2, #1
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800083e:	2b00      	cmp	r3, #0
 8000840:	d114      	bne.n	800086c <HAL_RCC_OscConfig+0x270>
 8000842:	6a23      	ldr	r3, [r4, #32]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8000844:	2702      	movs	r7, #2
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8000846:	4393      	bics	r3, r2
 8000848:	6223      	str	r3, [r4, #32]
 800084a:	6a23      	ldr	r3, [r4, #32]
 800084c:	3203      	adds	r2, #3
 800084e:	4393      	bics	r3, r2
 8000850:	6223      	str	r3, [r4, #32]
      tickstart = HAL_GetTick();
 8000852:	f7ff fd19 	bl	8000288 <HAL_GetTick>
 8000856:	0006      	movs	r6, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8000858:	6a23      	ldr	r3, [r4, #32]
 800085a:	423b      	tst	r3, r7
 800085c:	d025      	beq.n	80008aa <HAL_RCC_OscConfig+0x2ae>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800085e:	f7ff fd13 	bl	8000288 <HAL_GetTick>
 8000862:	4b2b      	ldr	r3, [pc, #172]	; (8000910 <HAL_RCC_OscConfig+0x314>)
 8000864:	1b80      	subs	r0, r0, r6
 8000866:	4298      	cmp	r0, r3
 8000868:	d9f6      	bls.n	8000858 <HAL_RCC_OscConfig+0x25c>
 800086a:	e728      	b.n	80006be <HAL_RCC_OscConfig+0xc2>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800086c:	2b05      	cmp	r3, #5
 800086e:	d10b      	bne.n	8000888 <HAL_RCC_OscConfig+0x28c>
 8000870:	6a21      	ldr	r1, [r4, #32]
 8000872:	3b01      	subs	r3, #1
 8000874:	430b      	orrs	r3, r1
 8000876:	6223      	str	r3, [r4, #32]
 8000878:	6a23      	ldr	r3, [r4, #32]
 800087a:	431a      	orrs	r2, r3
 800087c:	6222      	str	r2, [r4, #32]
      tickstart = HAL_GetTick();
 800087e:	f7ff fd03 	bl	8000288 <HAL_GetTick>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8000882:	2702      	movs	r7, #2
      tickstart = HAL_GetTick();
 8000884:	0006      	movs	r6, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8000886:	e00d      	b.n	80008a4 <HAL_RCC_OscConfig+0x2a8>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8000888:	6a23      	ldr	r3, [r4, #32]
 800088a:	4393      	bics	r3, r2
 800088c:	2204      	movs	r2, #4
 800088e:	6223      	str	r3, [r4, #32]
 8000890:	6a23      	ldr	r3, [r4, #32]
 8000892:	4393      	bics	r3, r2
 8000894:	e7c0      	b.n	8000818 <HAL_RCC_OscConfig+0x21c>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8000896:	f7ff fcf7 	bl	8000288 <HAL_GetTick>
 800089a:	4b1d      	ldr	r3, [pc, #116]	; (8000910 <HAL_RCC_OscConfig+0x314>)
 800089c:	1b80      	subs	r0, r0, r6
 800089e:	4298      	cmp	r0, r3
 80008a0:	d900      	bls.n	80008a4 <HAL_RCC_OscConfig+0x2a8>
 80008a2:	e70c      	b.n	80006be <HAL_RCC_OscConfig+0xc2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80008a4:	6a23      	ldr	r3, [r4, #32]
 80008a6:	423b      	tst	r3, r7
 80008a8:	d0f5      	beq.n	8000896 <HAL_RCC_OscConfig+0x29a>
    if(pwrclkchanged == SET)
 80008aa:	9b00      	ldr	r3, [sp, #0]
 80008ac:	2b01      	cmp	r3, #1
 80008ae:	d000      	beq.n	80008b2 <HAL_RCC_OscConfig+0x2b6>
 80008b0:	e6b6      	b.n	8000620 <HAL_RCC_OscConfig+0x24>
      __HAL_RCC_PWR_CLK_DISABLE();
 80008b2:	69e3      	ldr	r3, [r4, #28]
 80008b4:	4a17      	ldr	r2, [pc, #92]	; (8000914 <HAL_RCC_OscConfig+0x318>)
 80008b6:	4013      	ands	r3, r2
 80008b8:	61e3      	str	r3, [r4, #28]
 80008ba:	e6b1      	b.n	8000620 <HAL_RCC_OscConfig+0x24>
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 80008bc:	f7ff fce4 	bl	8000288 <HAL_GetTick>
 80008c0:	1bc0      	subs	r0, r0, r7
 80008c2:	2802      	cmp	r0, #2
 80008c4:	d800      	bhi.n	80008c8 <HAL_RCC_OscConfig+0x2cc>
 80008c6:	e6be      	b.n	8000646 <HAL_RCC_OscConfig+0x4a>
 80008c8:	e6f9      	b.n	80006be <HAL_RCC_OscConfig+0xc2>
    else if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ADC_CONTROL)
 80008ca:	3205      	adds	r2, #5
 80008cc:	d103      	bne.n	80008d6 <HAL_RCC_OscConfig+0x2da>
      __HAL_RCC_HSI14ADC_ENABLE();
 80008ce:	6b62      	ldr	r2, [r4, #52]	; 0x34
 80008d0:	439a      	bics	r2, r3
 80008d2:	6362      	str	r2, [r4, #52]	; 0x34
 80008d4:	e6bb      	b.n	800064e <HAL_RCC_OscConfig+0x52>
      __HAL_RCC_HSI14ADC_DISABLE();
 80008d6:	6b62      	ldr	r2, [r4, #52]	; 0x34
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 80008d8:	2602      	movs	r6, #2
      __HAL_RCC_HSI14ADC_DISABLE();
 80008da:	4313      	orrs	r3, r2
      __HAL_RCC_HSI14_DISABLE();
 80008dc:	2201      	movs	r2, #1
      __HAL_RCC_HSI14ADC_DISABLE();
 80008de:	6363      	str	r3, [r4, #52]	; 0x34
      __HAL_RCC_HSI14_DISABLE();
 80008e0:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80008e2:	4393      	bics	r3, r2
 80008e4:	6363      	str	r3, [r4, #52]	; 0x34
      tickstart = HAL_GetTick();
 80008e6:	f7ff fccf 	bl	8000288 <HAL_GetTick>
 80008ea:	0007      	movs	r7, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 80008ec:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80008ee:	4233      	tst	r3, r6
 80008f0:	d100      	bne.n	80008f4 <HAL_RCC_OscConfig+0x2f8>
 80008f2:	e6b3      	b.n	800065c <HAL_RCC_OscConfig+0x60>
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 80008f4:	f7ff fcc8 	bl	8000288 <HAL_GetTick>
 80008f8:	1bc0      	subs	r0, r0, r7
 80008fa:	2802      	cmp	r0, #2
 80008fc:	d9f6      	bls.n	80008ec <HAL_RCC_OscConfig+0x2f0>
 80008fe:	e6de      	b.n	80006be <HAL_RCC_OscConfig+0xc2>
 8000900:	40021000 	.word	0x40021000
 8000904:	fffeffff 	.word	0xfffeffff
 8000908:	fffbffff 	.word	0xfffbffff
 800090c:	40007000 	.word	0x40007000
 8000910:	00001388 	.word	0x00001388
 8000914:	efffffff 	.word	0xefffffff
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8000918:	220c      	movs	r2, #12
 800091a:	4c26      	ldr	r4, [pc, #152]	; (80009b4 <HAL_RCC_OscConfig+0x3b8>)
      return HAL_ERROR;
 800091c:	2001      	movs	r0, #1
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800091e:	6863      	ldr	r3, [r4, #4]
 8000920:	4013      	ands	r3, r2
 8000922:	2b08      	cmp	r3, #8
 8000924:	d100      	bne.n	8000928 <HAL_RCC_OscConfig+0x32c>
 8000926:	e6b3      	b.n	8000690 <HAL_RCC_OscConfig+0x94>
        __HAL_RCC_PLL_DISABLE();
 8000928:	6823      	ldr	r3, [r4, #0]
 800092a:	4a23      	ldr	r2, [pc, #140]	; (80009b8 <HAL_RCC_OscConfig+0x3bc>)
 800092c:	4013      	ands	r3, r2
 800092e:	6023      	str	r3, [r4, #0]
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8000930:	2902      	cmp	r1, #2
 8000932:	d12f      	bne.n	8000994 <HAL_RCC_OscConfig+0x398>
        tickstart = HAL_GetTick();
 8000934:	f7ff fca8 	bl	8000288 <HAL_GetTick>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8000938:	2680      	movs	r6, #128	; 0x80
        tickstart = HAL_GetTick();
 800093a:	0007      	movs	r7, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800093c:	04b6      	lsls	r6, r6, #18
 800093e:	6823      	ldr	r3, [r4, #0]
 8000940:	4233      	tst	r3, r6
 8000942:	d121      	bne.n	8000988 <HAL_RCC_OscConfig+0x38c>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8000944:	220f      	movs	r2, #15
 8000946:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8000948:	4393      	bics	r3, r2
 800094a:	6aea      	ldr	r2, [r5, #44]	; 0x2c
 800094c:	4313      	orrs	r3, r2
 800094e:	62e3      	str	r3, [r4, #44]	; 0x2c
 8000950:	6a69      	ldr	r1, [r5, #36]	; 0x24
 8000952:	6aab      	ldr	r3, [r5, #40]	; 0x28
 8000954:	6862      	ldr	r2, [r4, #4]
 8000956:	430b      	orrs	r3, r1
 8000958:	4918      	ldr	r1, [pc, #96]	; (80009bc <HAL_RCC_OscConfig+0x3c0>)
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800095a:	2580      	movs	r5, #128	; 0x80
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800095c:	400a      	ands	r2, r1
 800095e:	4313      	orrs	r3, r2
 8000960:	6063      	str	r3, [r4, #4]
        __HAL_RCC_PLL_ENABLE();
 8000962:	2380      	movs	r3, #128	; 0x80
 8000964:	6822      	ldr	r2, [r4, #0]
 8000966:	045b      	lsls	r3, r3, #17
 8000968:	4313      	orrs	r3, r2
 800096a:	6023      	str	r3, [r4, #0]
        tickstart = HAL_GetTick();
 800096c:	f7ff fc8c 	bl	8000288 <HAL_GetTick>
 8000970:	0006      	movs	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8000972:	04ad      	lsls	r5, r5, #18
 8000974:	6823      	ldr	r3, [r4, #0]
 8000976:	422b      	tst	r3, r5
 8000978:	d000      	beq.n	800097c <HAL_RCC_OscConfig+0x380>
 800097a:	e673      	b.n	8000664 <HAL_RCC_OscConfig+0x68>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800097c:	f7ff fc84 	bl	8000288 <HAL_GetTick>
 8000980:	1b80      	subs	r0, r0, r6
 8000982:	2802      	cmp	r0, #2
 8000984:	d9f6      	bls.n	8000974 <HAL_RCC_OscConfig+0x378>
 8000986:	e69a      	b.n	80006be <HAL_RCC_OscConfig+0xc2>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8000988:	f7ff fc7e 	bl	8000288 <HAL_GetTick>
 800098c:	1bc0      	subs	r0, r0, r7
 800098e:	2802      	cmp	r0, #2
 8000990:	d9d5      	bls.n	800093e <HAL_RCC_OscConfig+0x342>
 8000992:	e694      	b.n	80006be <HAL_RCC_OscConfig+0xc2>
        tickstart = HAL_GetTick();
 8000994:	f7ff fc78 	bl	8000288 <HAL_GetTick>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8000998:	2580      	movs	r5, #128	; 0x80
        tickstart = HAL_GetTick();
 800099a:	0006      	movs	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800099c:	04ad      	lsls	r5, r5, #18
 800099e:	6823      	ldr	r3, [r4, #0]
 80009a0:	422b      	tst	r3, r5
 80009a2:	d100      	bne.n	80009a6 <HAL_RCC_OscConfig+0x3aa>
 80009a4:	e65e      	b.n	8000664 <HAL_RCC_OscConfig+0x68>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80009a6:	f7ff fc6f 	bl	8000288 <HAL_GetTick>
 80009aa:	1b80      	subs	r0, r0, r6
 80009ac:	2802      	cmp	r0, #2
 80009ae:	d9f6      	bls.n	800099e <HAL_RCC_OscConfig+0x3a2>
 80009b0:	e685      	b.n	80006be <HAL_RCC_OscConfig+0xc2>
 80009b2:	46c0      	nop			; (mov r8, r8)
 80009b4:	40021000 	.word	0x40021000
 80009b8:	feffffff 	.word	0xfeffffff
 80009bc:	ffc2ffff 	.word	0xffc2ffff

080009c0 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80009c0:	b570      	push	{r4, r5, r6, lr}
  const uint8_t aPLLMULFactorTable[16] = { 2U,  3U,  4U,  5U,  6U,  7U,  8U,  9U,
 80009c2:	4c14      	ldr	r4, [pc, #80]	; (8000a14 <HAL_RCC_GetSysClockFreq+0x54>)
{
 80009c4:	b088      	sub	sp, #32
  const uint8_t aPLLMULFactorTable[16] = { 2U,  3U,  4U,  5U,  6U,  7U,  8U,  9U,
 80009c6:	2210      	movs	r2, #16
 80009c8:	0021      	movs	r1, r4
 80009ca:	4668      	mov	r0, sp
 80009cc:	f001 fc90 	bl	80022f0 <memcpy>
                                         10U, 11U, 12U, 13U, 14U, 15U, 16U, 16U};
  const uint8_t aPredivFactorTable[16] = { 1U, 2U,  3U,  4U,  5U,  6U,  7U,  8U,
 80009d0:	0021      	movs	r1, r4
 80009d2:	ad04      	add	r5, sp, #16
 80009d4:	2210      	movs	r2, #16
 80009d6:	3110      	adds	r1, #16
 80009d8:	0028      	movs	r0, r5
 80009da:	f001 fc89 	bl	80022f0 <memcpy>
  uint32_t sysclockfreq = 0U;
  
  tmpreg = RCC->CFGR;
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80009de:	220c      	movs	r2, #12
  tmpreg = RCC->CFGR;
 80009e0:	4e0d      	ldr	r6, [pc, #52]	; (8000a18 <HAL_RCC_GetSysClockFreq+0x58>)
 80009e2:	6873      	ldr	r3, [r6, #4]
  switch (tmpreg & RCC_CFGR_SWS)
 80009e4:	401a      	ands	r2, r3
 80009e6:	2a08      	cmp	r2, #8
 80009e8:	d111      	bne.n	8000a0e <HAL_RCC_GetSysClockFreq+0x4e>
      sysclockfreq = HSE_VALUE;
      break;
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_BITNUMBER];
 80009ea:	200f      	movs	r0, #15
 80009ec:	466a      	mov	r2, sp
 80009ee:	0c99      	lsrs	r1, r3, #18
 80009f0:	4001      	ands	r1, r0
 80009f2:	5c54      	ldrb	r4, [r2, r1]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> RCC_CFGR2_PREDIV_BITNUMBER];
 80009f4:	6af2      	ldr	r2, [r6, #44]	; 0x2c
 80009f6:	4002      	ands	r2, r0
 80009f8:	5ca9      	ldrb	r1, [r5, r2]
      if ((tmpreg & RCC_CFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 80009fa:	03db      	lsls	r3, r3, #15
 80009fc:	d505      	bpl.n	8000a0a <HAL_RCC_GetSysClockFreq+0x4a>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (HSE_VALUE / prediv) * pllmul;
 80009fe:	4807      	ldr	r0, [pc, #28]	; (8000a1c <HAL_RCC_GetSysClockFreq+0x5c>)
 8000a00:	f7ff fb8c 	bl	800011c <__udivsi3>
#if  (defined(STM32F042x6) || defined(STM32F048xx) || defined(STM32F070x6) || defined(STM32F071xB) || defined(STM32F072xB) || defined(STM32F078xx) || defined(STM32F070xB) || defined(STM32F091xC) || defined(STM32F098xx) || defined(STM32F030xC))
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (HSI_VALUE / prediv) * pllmul;
#else
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1U) * pllmul);
 8000a04:	4360      	muls	r0, r4
      sysclockfreq = HSI_VALUE;
      break;
    }
  }
  return sysclockfreq;
}
 8000a06:	b008      	add	sp, #32
 8000a08:	bd70      	pop	{r4, r5, r6, pc}
        pllclk = (uint32_t)((HSI_VALUE >> 1U) * pllmul);
 8000a0a:	4805      	ldr	r0, [pc, #20]	; (8000a20 <HAL_RCC_GetSysClockFreq+0x60>)
 8000a0c:	e7fa      	b.n	8000a04 <HAL_RCC_GetSysClockFreq+0x44>
      sysclockfreq = HSE_VALUE;
 8000a0e:	4803      	ldr	r0, [pc, #12]	; (8000a1c <HAL_RCC_GetSysClockFreq+0x5c>)
  return sysclockfreq;
 8000a10:	e7f9      	b.n	8000a06 <HAL_RCC_GetSysClockFreq+0x46>
 8000a12:	46c0      	nop			; (mov r8, r8)
 8000a14:	08002c80 	.word	0x08002c80
 8000a18:	40021000 	.word	0x40021000
 8000a1c:	007a1200 	.word	0x007a1200
 8000a20:	003d0900 	.word	0x003d0900

08000a24 <HAL_RCC_ClockConfig>:
{
 8000a24:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
  if(FLatency > (FLASH->ACR & FLASH_ACR_LATENCY))
 8000a26:	2201      	movs	r2, #1
 8000a28:	4c43      	ldr	r4, [pc, #268]	; (8000b38 <HAL_RCC_ClockConfig+0x114>)
{
 8000a2a:	0006      	movs	r6, r0
  if(FLatency > (FLASH->ACR & FLASH_ACR_LATENCY))
 8000a2c:	6823      	ldr	r3, [r4, #0]
{
 8000a2e:	000f      	movs	r7, r1
  if(FLatency > (FLASH->ACR & FLASH_ACR_LATENCY))
 8000a30:	4013      	ands	r3, r2
 8000a32:	428b      	cmp	r3, r1
 8000a34:	d31c      	bcc.n	8000a70 <HAL_RCC_ClockConfig+0x4c>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8000a36:	6832      	ldr	r2, [r6, #0]
 8000a38:	0793      	lsls	r3, r2, #30
 8000a3a:	d423      	bmi.n	8000a84 <HAL_RCC_ClockConfig+0x60>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8000a3c:	07d3      	lsls	r3, r2, #31
 8000a3e:	d429      	bmi.n	8000a94 <HAL_RCC_ClockConfig+0x70>
  if(FLatency < (FLASH->ACR & FLASH_ACR_LATENCY))
 8000a40:	2301      	movs	r3, #1
 8000a42:	6822      	ldr	r2, [r4, #0]
 8000a44:	401a      	ands	r2, r3
 8000a46:	4297      	cmp	r7, r2
 8000a48:	d367      	bcc.n	8000b1a <HAL_RCC_ClockConfig+0xf6>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8000a4a:	6833      	ldr	r3, [r6, #0]
 8000a4c:	4c3b      	ldr	r4, [pc, #236]	; (8000b3c <HAL_RCC_ClockConfig+0x118>)
 8000a4e:	075b      	lsls	r3, r3, #29
 8000a50:	d46a      	bmi.n	8000b28 <HAL_RCC_ClockConfig+0x104>
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 8000a52:	f7ff ffb5 	bl	80009c0 <HAL_RCC_GetSysClockFreq>
 8000a56:	6863      	ldr	r3, [r4, #4]
 8000a58:	4a39      	ldr	r2, [pc, #228]	; (8000b40 <HAL_RCC_ClockConfig+0x11c>)
 8000a5a:	061b      	lsls	r3, r3, #24
 8000a5c:	0f1b      	lsrs	r3, r3, #28
 8000a5e:	5cd3      	ldrb	r3, [r2, r3]
 8000a60:	40d8      	lsrs	r0, r3
 8000a62:	4b38      	ldr	r3, [pc, #224]	; (8000b44 <HAL_RCC_ClockConfig+0x120>)
 8000a64:	6018      	str	r0, [r3, #0]
  HAL_InitTick (TICK_INT_PRIORITY);
 8000a66:	2000      	movs	r0, #0
 8000a68:	f7ff fbe4 	bl	8000234 <HAL_InitTick>
  return HAL_OK;
 8000a6c:	2000      	movs	r0, #0
 8000a6e:	e008      	b.n	8000a82 <HAL_RCC_ClockConfig+0x5e>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8000a70:	6823      	ldr	r3, [r4, #0]
 8000a72:	4393      	bics	r3, r2
 8000a74:	430b      	orrs	r3, r1
 8000a76:	6023      	str	r3, [r4, #0]
    if((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8000a78:	6823      	ldr	r3, [r4, #0]
 8000a7a:	4013      	ands	r3, r2
 8000a7c:	4299      	cmp	r1, r3
 8000a7e:	d0da      	beq.n	8000a36 <HAL_RCC_ClockConfig+0x12>
      return HAL_ERROR;
 8000a80:	2001      	movs	r0, #1
}
 8000a82:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8000a84:	20f0      	movs	r0, #240	; 0xf0
 8000a86:	492d      	ldr	r1, [pc, #180]	; (8000b3c <HAL_RCC_ClockConfig+0x118>)
 8000a88:	684b      	ldr	r3, [r1, #4]
 8000a8a:	4383      	bics	r3, r0
 8000a8c:	68b0      	ldr	r0, [r6, #8]
 8000a8e:	4303      	orrs	r3, r0
 8000a90:	604b      	str	r3, [r1, #4]
 8000a92:	e7d3      	b.n	8000a3c <HAL_RCC_ClockConfig+0x18>
 8000a94:	4d29      	ldr	r5, [pc, #164]	; (8000b3c <HAL_RCC_ClockConfig+0x118>)
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8000a96:	6872      	ldr	r2, [r6, #4]
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000a98:	682b      	ldr	r3, [r5, #0]
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8000a9a:	2a01      	cmp	r2, #1
 8000a9c:	d11a      	bne.n	8000ad4 <HAL_RCC_ClockConfig+0xb0>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000a9e:	039b      	lsls	r3, r3, #14
 8000aa0:	d5ee      	bpl.n	8000a80 <HAL_RCC_ClockConfig+0x5c>
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8000aa2:	2103      	movs	r1, #3
 8000aa4:	686b      	ldr	r3, [r5, #4]
 8000aa6:	438b      	bics	r3, r1
 8000aa8:	4313      	orrs	r3, r2
 8000aaa:	606b      	str	r3, [r5, #4]
    tickstart = HAL_GetTick();
 8000aac:	f7ff fbec 	bl	8000288 <HAL_GetTick>
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8000ab0:	6873      	ldr	r3, [r6, #4]
    tickstart = HAL_GetTick();
 8000ab2:	9001      	str	r0, [sp, #4]
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8000ab4:	2b01      	cmp	r3, #1
 8000ab6:	d115      	bne.n	8000ae4 <HAL_RCC_ClockConfig+0xc0>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8000ab8:	220c      	movs	r2, #12
 8000aba:	686b      	ldr	r3, [r5, #4]
 8000abc:	4013      	ands	r3, r2
 8000abe:	2b04      	cmp	r3, #4
 8000ac0:	d0be      	beq.n	8000a40 <HAL_RCC_ClockConfig+0x1c>
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8000ac2:	f7ff fbe1 	bl	8000288 <HAL_GetTick>
 8000ac6:	9b01      	ldr	r3, [sp, #4]
 8000ac8:	1ac0      	subs	r0, r0, r3
 8000aca:	4b1f      	ldr	r3, [pc, #124]	; (8000b48 <HAL_RCC_ClockConfig+0x124>)
 8000acc:	4298      	cmp	r0, r3
 8000ace:	d9f3      	bls.n	8000ab8 <HAL_RCC_ClockConfig+0x94>
          return HAL_TIMEOUT;
 8000ad0:	2003      	movs	r0, #3
 8000ad2:	e7d6      	b.n	8000a82 <HAL_RCC_ClockConfig+0x5e>
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8000ad4:	2a02      	cmp	r2, #2
 8000ad6:	d102      	bne.n	8000ade <HAL_RCC_ClockConfig+0xba>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8000ad8:	019b      	lsls	r3, r3, #6
 8000ada:	d4e2      	bmi.n	8000aa2 <HAL_RCC_ClockConfig+0x7e>
 8000adc:	e7d0      	b.n	8000a80 <HAL_RCC_ClockConfig+0x5c>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000ade:	079b      	lsls	r3, r3, #30
 8000ae0:	d4df      	bmi.n	8000aa2 <HAL_RCC_ClockConfig+0x7e>
 8000ae2:	e7cd      	b.n	8000a80 <HAL_RCC_ClockConfig+0x5c>
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8000ae4:	2b02      	cmp	r3, #2
 8000ae6:	d012      	beq.n	8000b0e <HAL_RCC_ClockConfig+0xea>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 8000ae8:	220c      	movs	r2, #12
 8000aea:	686b      	ldr	r3, [r5, #4]
 8000aec:	4213      	tst	r3, r2
 8000aee:	d0a7      	beq.n	8000a40 <HAL_RCC_ClockConfig+0x1c>
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8000af0:	f7ff fbca 	bl	8000288 <HAL_GetTick>
 8000af4:	9b01      	ldr	r3, [sp, #4]
 8000af6:	1ac0      	subs	r0, r0, r3
 8000af8:	4b13      	ldr	r3, [pc, #76]	; (8000b48 <HAL_RCC_ClockConfig+0x124>)
 8000afa:	4298      	cmp	r0, r3
 8000afc:	d9f4      	bls.n	8000ae8 <HAL_RCC_ClockConfig+0xc4>
 8000afe:	e7e7      	b.n	8000ad0 <HAL_RCC_ClockConfig+0xac>
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8000b00:	f7ff fbc2 	bl	8000288 <HAL_GetTick>
 8000b04:	9b01      	ldr	r3, [sp, #4]
 8000b06:	1ac0      	subs	r0, r0, r3
 8000b08:	4b0f      	ldr	r3, [pc, #60]	; (8000b48 <HAL_RCC_ClockConfig+0x124>)
 8000b0a:	4298      	cmp	r0, r3
 8000b0c:	d8e0      	bhi.n	8000ad0 <HAL_RCC_ClockConfig+0xac>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8000b0e:	220c      	movs	r2, #12
 8000b10:	686b      	ldr	r3, [r5, #4]
 8000b12:	4013      	ands	r3, r2
 8000b14:	2b08      	cmp	r3, #8
 8000b16:	d1f3      	bne.n	8000b00 <HAL_RCC_ClockConfig+0xdc>
 8000b18:	e792      	b.n	8000a40 <HAL_RCC_ClockConfig+0x1c>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8000b1a:	6822      	ldr	r2, [r4, #0]
 8000b1c:	439a      	bics	r2, r3
 8000b1e:	6022      	str	r2, [r4, #0]
    if((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8000b20:	6822      	ldr	r2, [r4, #0]
 8000b22:	421a      	tst	r2, r3
 8000b24:	d1ac      	bne.n	8000a80 <HAL_RCC_ClockConfig+0x5c>
 8000b26:	e790      	b.n	8000a4a <HAL_RCC_ClockConfig+0x26>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 8000b28:	6863      	ldr	r3, [r4, #4]
 8000b2a:	4a08      	ldr	r2, [pc, #32]	; (8000b4c <HAL_RCC_ClockConfig+0x128>)
 8000b2c:	4013      	ands	r3, r2
 8000b2e:	68f2      	ldr	r2, [r6, #12]
 8000b30:	4313      	orrs	r3, r2
 8000b32:	6063      	str	r3, [r4, #4]
 8000b34:	e78d      	b.n	8000a52 <HAL_RCC_ClockConfig+0x2e>
 8000b36:	46c0      	nop			; (mov r8, r8)
 8000b38:	40022000 	.word	0x40022000
 8000b3c:	40021000 	.word	0x40021000
 8000b40:	08002ce9 	.word	0x08002ce9
 8000b44:	20000028 	.word	0x20000028
 8000b48:	00001388 	.word	0x00001388
 8000b4c:	fffff8ff 	.word	0xfffff8ff

08000b50 <HAL_RCC_GetHCLKFreq>:
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
  return SystemCoreClock;
 8000b50:	4b01      	ldr	r3, [pc, #4]	; (8000b58 <HAL_RCC_GetHCLKFreq+0x8>)
 8000b52:	6818      	ldr	r0, [r3, #0]
}
 8000b54:	4770      	bx	lr
 8000b56:	46c0      	nop			; (mov r8, r8)
 8000b58:	20000028 	.word	0x20000028

08000b5c <HAL_RCC_GetPCLK1Freq>:
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE) >> RCC_CFGR_PPRE_BITNUMBER]);
 8000b5c:	4b04      	ldr	r3, [pc, #16]	; (8000b70 <HAL_RCC_GetPCLK1Freq+0x14>)
 8000b5e:	4a05      	ldr	r2, [pc, #20]	; (8000b74 <HAL_RCC_GetPCLK1Freq+0x18>)
 8000b60:	685b      	ldr	r3, [r3, #4]
 8000b62:	055b      	lsls	r3, r3, #21
 8000b64:	0f5b      	lsrs	r3, r3, #29
 8000b66:	5cd3      	ldrb	r3, [r2, r3]
 8000b68:	4a03      	ldr	r2, [pc, #12]	; (8000b78 <HAL_RCC_GetPCLK1Freq+0x1c>)
 8000b6a:	6810      	ldr	r0, [r2, #0]
 8000b6c:	40d8      	lsrs	r0, r3
}    
 8000b6e:	4770      	bx	lr
 8000b70:	40021000 	.word	0x40021000
 8000b74:	08002cf9 	.word	0x08002cf9
 8000b78:	20000028 	.word	0x20000028

08000b7c <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) and RCC_BDCR register are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8000b7c:	b5f0      	push	{r4, r5, r6, r7, lr}

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8000b7e:	6803      	ldr	r3, [r0, #0]
{
 8000b80:	b085      	sub	sp, #20
 8000b82:	0005      	movs	r5, r0
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8000b84:	03db      	lsls	r3, r3, #15
 8000b86:	d528      	bpl.n	8000bda <HAL_RCCEx_PeriphCLKConfig+0x5e>
    FlagStatus       pwrclkchanged = RESET;

    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8000b88:	2280      	movs	r2, #128	; 0x80
    FlagStatus       pwrclkchanged = RESET;
 8000b8a:	2100      	movs	r1, #0
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8000b8c:	4c37      	ldr	r4, [pc, #220]	; (8000c6c <HAL_RCCEx_PeriphCLKConfig+0xf0>)
 8000b8e:	0552      	lsls	r2, r2, #21
 8000b90:	69e3      	ldr	r3, [r4, #28]
    FlagStatus       pwrclkchanged = RESET;
 8000b92:	9100      	str	r1, [sp, #0]
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8000b94:	4213      	tst	r3, r2
 8000b96:	d108      	bne.n	8000baa <HAL_RCCEx_PeriphCLKConfig+0x2e>
    {
    __HAL_RCC_PWR_CLK_ENABLE();
 8000b98:	69e3      	ldr	r3, [r4, #28]
 8000b9a:	4313      	orrs	r3, r2
 8000b9c:	61e3      	str	r3, [r4, #28]
 8000b9e:	69e3      	ldr	r3, [r4, #28]
 8000ba0:	4013      	ands	r3, r2
 8000ba2:	9303      	str	r3, [sp, #12]
 8000ba4:	9b03      	ldr	r3, [sp, #12]
      pwrclkchanged = SET;
 8000ba6:	2301      	movs	r3, #1
 8000ba8:	9300      	str	r3, [sp, #0]
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8000baa:	2780      	movs	r7, #128	; 0x80
 8000bac:	4e30      	ldr	r6, [pc, #192]	; (8000c70 <HAL_RCCEx_PeriphCLKConfig+0xf4>)
 8000bae:	007f      	lsls	r7, r7, #1
 8000bb0:	6833      	ldr	r3, [r6, #0]
 8000bb2:	423b      	tst	r3, r7
 8000bb4:	d026      	beq.n	8000c04 <HAL_RCCEx_PeriphCLKConfig+0x88>
        }
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8000bb6:	22c0      	movs	r2, #192	; 0xc0
 8000bb8:	6a23      	ldr	r3, [r4, #32]
 8000bba:	0092      	lsls	r2, r2, #2
 8000bbc:	4013      	ands	r3, r2
 8000bbe:	4e2d      	ldr	r6, [pc, #180]	; (8000c74 <HAL_RCCEx_PeriphCLKConfig+0xf8>)
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8000bc0:	d132      	bne.n	8000c28 <HAL_RCCEx_PeriphCLKConfig+0xac>
            return HAL_TIMEOUT;
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8000bc2:	6a23      	ldr	r3, [r4, #32]
 8000bc4:	401e      	ands	r6, r3
 8000bc6:	686b      	ldr	r3, [r5, #4]
 8000bc8:	431e      	orrs	r6, r3

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8000bca:	9b00      	ldr	r3, [sp, #0]
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8000bcc:	6226      	str	r6, [r4, #32]
    if(pwrclkchanged == SET)
 8000bce:	2b01      	cmp	r3, #1
 8000bd0:	d103      	bne.n	8000bda <HAL_RCCEx_PeriphCLKConfig+0x5e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8000bd2:	69e3      	ldr	r3, [r4, #28]
 8000bd4:	4a28      	ldr	r2, [pc, #160]	; (8000c78 <HAL_RCCEx_PeriphCLKConfig+0xfc>)
 8000bd6:	4013      	ands	r3, r2
 8000bd8:	61e3      	str	r3, [r4, #28]
    }
  }

  /*------------------------------- USART1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8000bda:	682a      	ldr	r2, [r5, #0]
 8000bdc:	07d3      	lsls	r3, r2, #31
 8000bde:	d506      	bpl.n	8000bee <HAL_RCCEx_PeriphCLKConfig+0x72>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8000be0:	2003      	movs	r0, #3
 8000be2:	4922      	ldr	r1, [pc, #136]	; (8000c6c <HAL_RCCEx_PeriphCLKConfig+0xf0>)
 8000be4:	6b0b      	ldr	r3, [r1, #48]	; 0x30
 8000be6:	4383      	bics	r3, r0
 8000be8:	68a8      	ldr	r0, [r5, #8]
 8000bea:	4303      	orrs	r3, r0
 8000bec:	630b      	str	r3, [r1, #48]	; 0x30
#endif /* STM32F042x6 || STM32F048xx ||                */
       /* STM32F051x8 || STM32F058xx ||                */
       /* STM32F071xB || STM32F072xB || STM32F078xx || */
       /* STM32F091xC || STM32F098xx */
  
  return HAL_OK;
 8000bee:	2000      	movs	r0, #0
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8000bf0:	0693      	lsls	r3, r2, #26
 8000bf2:	d517      	bpl.n	8000c24 <HAL_RCCEx_PeriphCLKConfig+0xa8>
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8000bf4:	2110      	movs	r1, #16
 8000bf6:	4a1d      	ldr	r2, [pc, #116]	; (8000c6c <HAL_RCCEx_PeriphCLKConfig+0xf0>)
 8000bf8:	6b13      	ldr	r3, [r2, #48]	; 0x30
 8000bfa:	438b      	bics	r3, r1
 8000bfc:	68e9      	ldr	r1, [r5, #12]
 8000bfe:	430b      	orrs	r3, r1
 8000c00:	6313      	str	r3, [r2, #48]	; 0x30
 8000c02:	e00f      	b.n	8000c24 <HAL_RCCEx_PeriphCLKConfig+0xa8>
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8000c04:	6833      	ldr	r3, [r6, #0]
 8000c06:	433b      	orrs	r3, r7
 8000c08:	6033      	str	r3, [r6, #0]
      tickstart = HAL_GetTick();
 8000c0a:	f7ff fb3d 	bl	8000288 <HAL_GetTick>
 8000c0e:	9001      	str	r0, [sp, #4]
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8000c10:	6833      	ldr	r3, [r6, #0]
 8000c12:	423b      	tst	r3, r7
 8000c14:	d1cf      	bne.n	8000bb6 <HAL_RCCEx_PeriphCLKConfig+0x3a>
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8000c16:	f7ff fb37 	bl	8000288 <HAL_GetTick>
 8000c1a:	9b01      	ldr	r3, [sp, #4]
 8000c1c:	1ac0      	subs	r0, r0, r3
 8000c1e:	2864      	cmp	r0, #100	; 0x64
 8000c20:	d9f6      	bls.n	8000c10 <HAL_RCCEx_PeriphCLKConfig+0x94>
          return HAL_TIMEOUT;
 8000c22:	2003      	movs	r0, #3
}
 8000c24:	b005      	add	sp, #20
 8000c26:	bdf0      	pop	{r4, r5, r6, r7, pc}
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8000c28:	6869      	ldr	r1, [r5, #4]
 8000c2a:	400a      	ands	r2, r1
 8000c2c:	4293      	cmp	r3, r2
 8000c2e:	d0c8      	beq.n	8000bc2 <HAL_RCCEx_PeriphCLKConfig+0x46>
      __HAL_RCC_BACKUPRESET_FORCE();
 8000c30:	2380      	movs	r3, #128	; 0x80
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8000c32:	6a22      	ldr	r2, [r4, #32]
      __HAL_RCC_BACKUPRESET_FORCE();
 8000c34:	6a20      	ldr	r0, [r4, #32]
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8000c36:	0011      	movs	r1, r2
      __HAL_RCC_BACKUPRESET_FORCE();
 8000c38:	025b      	lsls	r3, r3, #9
 8000c3a:	4303      	orrs	r3, r0
 8000c3c:	6223      	str	r3, [r4, #32]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8000c3e:	6a23      	ldr	r3, [r4, #32]
 8000c40:	480e      	ldr	r0, [pc, #56]	; (8000c7c <HAL_RCCEx_PeriphCLKConfig+0x100>)
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8000c42:	4031      	ands	r1, r6
      __HAL_RCC_BACKUPRESET_RELEASE();
 8000c44:	4003      	ands	r3, r0
 8000c46:	6223      	str	r3, [r4, #32]
      RCC->BDCR = temp_reg;
 8000c48:	6221      	str	r1, [r4, #32]
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8000c4a:	07d3      	lsls	r3, r2, #31
 8000c4c:	d5b9      	bpl.n	8000bc2 <HAL_RCCEx_PeriphCLKConfig+0x46>
        tickstart = HAL_GetTick();
 8000c4e:	f7ff fb1b 	bl	8000288 <HAL_GetTick>
 8000c52:	0007      	movs	r7, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8000c54:	2202      	movs	r2, #2
 8000c56:	6a23      	ldr	r3, [r4, #32]
 8000c58:	4213      	tst	r3, r2
 8000c5a:	d1b2      	bne.n	8000bc2 <HAL_RCCEx_PeriphCLKConfig+0x46>
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8000c5c:	f7ff fb14 	bl	8000288 <HAL_GetTick>
 8000c60:	4b07      	ldr	r3, [pc, #28]	; (8000c80 <HAL_RCCEx_PeriphCLKConfig+0x104>)
 8000c62:	1bc0      	subs	r0, r0, r7
 8000c64:	4298      	cmp	r0, r3
 8000c66:	d9f5      	bls.n	8000c54 <HAL_RCCEx_PeriphCLKConfig+0xd8>
 8000c68:	e7db      	b.n	8000c22 <HAL_RCCEx_PeriphCLKConfig+0xa6>
 8000c6a:	46c0      	nop			; (mov r8, r8)
 8000c6c:	40021000 	.word	0x40021000
 8000c70:	40007000 	.word	0x40007000
 8000c74:	fffffcff 	.word	0xfffffcff
 8000c78:	efffffff 	.word	0xefffffff
 8000c7c:	fffeffff 	.word	0xfffeffff
 8000c80:	00001388 	.word	0x00001388

08000c84 <SPI_WaitFifoStateUntilTimeout.part.1>:
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8000c84:	21e0      	movs	r1, #224	; 0xe0
 8000c86:	6803      	ldr	r3, [r0, #0]
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
 8000c88:	b510      	push	{r4, lr}
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8000c8a:	685a      	ldr	r2, [r3, #4]
 8000c8c:	438a      	bics	r2, r1
 8000c8e:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8000c90:	2282      	movs	r2, #130	; 0x82
 8000c92:	6841      	ldr	r1, [r0, #4]
 8000c94:	0052      	lsls	r2, r2, #1
 8000c96:	4291      	cmp	r1, r2
 8000c98:	d10c      	bne.n	8000cb4 <SPI_WaitFifoStateUntilTimeout.part.1+0x30>
 8000c9a:	2180      	movs	r1, #128	; 0x80
 8000c9c:	6882      	ldr	r2, [r0, #8]
 8000c9e:	0209      	lsls	r1, r1, #8
 8000ca0:	428a      	cmp	r2, r1
 8000ca2:	d003      	beq.n	8000cac <SPI_WaitFifoStateUntilTimeout.part.1+0x28>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8000ca4:	2180      	movs	r1, #128	; 0x80
 8000ca6:	00c9      	lsls	r1, r1, #3
 8000ca8:	428a      	cmp	r2, r1
 8000caa:	d103      	bne.n	8000cb4 <SPI_WaitFifoStateUntilTimeout.part.1+0x30>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8000cac:	2140      	movs	r1, #64	; 0x40
 8000cae:	681a      	ldr	r2, [r3, #0]
 8000cb0:	438a      	bics	r2, r1
 8000cb2:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8000cb4:	2180      	movs	r1, #128	; 0x80
 8000cb6:	6a82      	ldr	r2, [r0, #40]	; 0x28
 8000cb8:	0189      	lsls	r1, r1, #6
 8000cba:	428a      	cmp	r2, r1
 8000cbc:	d106      	bne.n	8000ccc <SPI_WaitFifoStateUntilTimeout.part.1+0x48>
        {
          SPI_RESET_CRC(hspi);
 8000cbe:	6819      	ldr	r1, [r3, #0]
 8000cc0:	4c07      	ldr	r4, [pc, #28]	; (8000ce0 <SPI_WaitFifoStateUntilTimeout.part.1+0x5c>)
 8000cc2:	4021      	ands	r1, r4
 8000cc4:	6019      	str	r1, [r3, #0]
 8000cc6:	6819      	ldr	r1, [r3, #0]
 8000cc8:	430a      	orrs	r2, r1
 8000cca:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8000ccc:	0003      	movs	r3, r0
 8000cce:	2201      	movs	r2, #1
 8000cd0:	335d      	adds	r3, #93	; 0x5d
 8000cd2:	701a      	strb	r2, [r3, #0]

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8000cd4:	2300      	movs	r3, #0
 8000cd6:	305c      	adds	r0, #92	; 0x5c
 8000cd8:	7003      	strb	r3, [r0, #0]
      }
    }
  }

  return HAL_OK;
}
 8000cda:	2003      	movs	r0, #3
 8000cdc:	bd10      	pop	{r4, pc}
 8000cde:	46c0      	nop			; (mov r8, r8)
 8000ce0:	ffffdfff 	.word	0xffffdfff

08000ce4 <SPI_WaitFlagStateUntilTimeout.constprop.9>:
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, uint32_t State,
 8000ce4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000ce6:	0005      	movs	r5, r0
 8000ce8:	000c      	movs	r4, r1
 8000cea:	0016      	movs	r6, r2
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8000cec:	2780      	movs	r7, #128	; 0x80
 8000cee:	682b      	ldr	r3, [r5, #0]
 8000cf0:	6898      	ldr	r0, [r3, #8]
 8000cf2:	4038      	ands	r0, r7
 8000cf4:	d006      	beq.n	8000d04 <SPI_WaitFlagStateUntilTimeout.constprop.9+0x20>
    if (Timeout != HAL_MAX_DELAY)
 8000cf6:	1c62      	adds	r2, r4, #1
 8000cf8:	d0fa      	beq.n	8000cf0 <SPI_WaitFlagStateUntilTimeout.constprop.9+0xc>
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) >= Timeout))
 8000cfa:	2c00      	cmp	r4, #0
 8000cfc:	d103      	bne.n	8000d06 <SPI_WaitFlagStateUntilTimeout.constprop.9+0x22>
 8000cfe:	0028      	movs	r0, r5
 8000d00:	f7ff ffc0 	bl	8000c84 <SPI_WaitFifoStateUntilTimeout.part.1>
}
 8000d04:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) >= Timeout))
 8000d06:	f7ff fabf 	bl	8000288 <HAL_GetTick>
 8000d0a:	1b80      	subs	r0, r0, r6
 8000d0c:	4284      	cmp	r4, r0
 8000d0e:	d8ee      	bhi.n	8000cee <SPI_WaitFlagStateUntilTimeout.constprop.9+0xa>
 8000d10:	e7f5      	b.n	8000cfe <SPI_WaitFlagStateUntilTimeout.constprop.9+0x1a>

08000d12 <SPI_WaitFifoStateUntilTimeout.constprop.10>:
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
 8000d12:	b5f0      	push	{r4, r5, r6, r7, lr}
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 8000d14:	27c0      	movs	r7, #192	; 0xc0
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
 8000d16:	0006      	movs	r6, r0
 8000d18:	000d      	movs	r5, r1
 8000d1a:	0014      	movs	r4, r2
 8000d1c:	b085      	sub	sp, #20
 8000d1e:	9301      	str	r3, [sp, #4]
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 8000d20:	00ff      	lsls	r7, r7, #3
      tmpreg = *((__IO uint8_t *)&hspi->Instance->DR);
 8000d22:	ab02      	add	r3, sp, #8
  while ((hspi->Instance->SR & Fifo) != State)
 8000d24:	6831      	ldr	r1, [r6, #0]
      tmpreg = *((__IO uint8_t *)&hspi->Instance->DR);
 8000d26:	1dda      	adds	r2, r3, #7
  while ((hspi->Instance->SR & Fifo) != State)
 8000d28:	6888      	ldr	r0, [r1, #8]
 8000d2a:	4028      	ands	r0, r5
 8000d2c:	d00c      	beq.n	8000d48 <SPI_WaitFifoStateUntilTimeout.constprop.10+0x36>
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 8000d2e:	42bd      	cmp	r5, r7
 8000d30:	d103      	bne.n	8000d3a <SPI_WaitFifoStateUntilTimeout.constprop.10+0x28>
      tmpreg = *((__IO uint8_t *)&hspi->Instance->DR);
 8000d32:	7b0b      	ldrb	r3, [r1, #12]
 8000d34:	b2db      	uxtb	r3, r3
 8000d36:	7013      	strb	r3, [r2, #0]
      UNUSED(tmpreg);
 8000d38:	7813      	ldrb	r3, [r2, #0]
    if (Timeout != HAL_MAX_DELAY)
 8000d3a:	1c63      	adds	r3, r4, #1
 8000d3c:	d0f4      	beq.n	8000d28 <SPI_WaitFifoStateUntilTimeout.constprop.10+0x16>
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) >= Timeout))
 8000d3e:	2c00      	cmp	r4, #0
 8000d40:	d104      	bne.n	8000d4c <SPI_WaitFifoStateUntilTimeout.constprop.10+0x3a>
 8000d42:	0030      	movs	r0, r6
 8000d44:	f7ff ff9e 	bl	8000c84 <SPI_WaitFifoStateUntilTimeout.part.1>
}
 8000d48:	b005      	add	sp, #20
 8000d4a:	bdf0      	pop	{r4, r5, r6, r7, pc}
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) >= Timeout))
 8000d4c:	f7ff fa9c 	bl	8000288 <HAL_GetTick>
 8000d50:	9b01      	ldr	r3, [sp, #4]
 8000d52:	1ac0      	subs	r0, r0, r3
 8000d54:	4284      	cmp	r4, r0
 8000d56:	d8e4      	bhi.n	8000d22 <SPI_WaitFifoStateUntilTimeout.constprop.10+0x10>
 8000d58:	e7f3      	b.n	8000d42 <SPI_WaitFifoStateUntilTimeout.constprop.10+0x30>

08000d5a <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8000d5a:	b570      	push	{r4, r5, r6, lr}
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8000d5c:	0013      	movs	r3, r2
{
 8000d5e:	000d      	movs	r5, r1
 8000d60:	0016      	movs	r6, r2
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8000d62:	000a      	movs	r2, r1
 8000d64:	21c0      	movs	r1, #192	; 0xc0
 8000d66:	0149      	lsls	r1, r1, #5
{
 8000d68:	0004      	movs	r4, r0
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8000d6a:	f7ff ffd2 	bl	8000d12 <SPI_WaitFifoStateUntilTimeout.constprop.10>
 8000d6e:	2800      	cmp	r0, #0
 8000d70:	d005      	beq.n	8000d7e <SPI_EndRxTxTransaction+0x24>
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8000d72:	2320      	movs	r3, #32
 8000d74:	6e22      	ldr	r2, [r4, #96]	; 0x60
      return HAL_TIMEOUT;
 8000d76:	2003      	movs	r0, #3
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8000d78:	4313      	orrs	r3, r2
 8000d7a:	6623      	str	r3, [r4, #96]	; 0x60
 8000d7c:	e00f      	b.n	8000d9e <SPI_EndRxTxTransaction+0x44>
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
    return HAL_TIMEOUT;
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8000d7e:	0032      	movs	r2, r6
 8000d80:	0029      	movs	r1, r5
 8000d82:	0020      	movs	r0, r4
 8000d84:	f7ff ffae 	bl	8000ce4 <SPI_WaitFlagStateUntilTimeout.constprop.9>
 8000d88:	2800      	cmp	r0, #0
 8000d8a:	d1f2      	bne.n	8000d72 <SPI_EndRxTxTransaction+0x18>
    if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8000d8c:	21c0      	movs	r1, #192	; 0xc0
 8000d8e:	0033      	movs	r3, r6
 8000d90:	002a      	movs	r2, r5
 8000d92:	00c9      	lsls	r1, r1, #3
 8000d94:	0020      	movs	r0, r4
 8000d96:	f7ff ffbc 	bl	8000d12 <SPI_WaitFifoStateUntilTimeout.constprop.10>
 8000d9a:	2800      	cmp	r0, #0
 8000d9c:	d1e9      	bne.n	8000d72 <SPI_EndRxTxTransaction+0x18>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
    return HAL_TIMEOUT;
  }
  return HAL_OK;
}
 8000d9e:	bd70      	pop	{r4, r5, r6, pc}

08000da0 <SPI_EndRxTransaction>:
{
 8000da0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8000da2:	2382      	movs	r3, #130	; 0x82
{
 8000da4:	0017      	movs	r7, r2
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8000da6:	6842      	ldr	r2, [r0, #4]
{
 8000da8:	0004      	movs	r4, r0
 8000daa:	000e      	movs	r6, r1
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8000dac:	005b      	lsls	r3, r3, #1
 8000dae:	429a      	cmp	r2, r3
 8000db0:	d10d      	bne.n	8000dce <SPI_EndRxTransaction+0x2e>
 8000db2:	2280      	movs	r2, #128	; 0x80
 8000db4:	6883      	ldr	r3, [r0, #8]
 8000db6:	0212      	lsls	r2, r2, #8
 8000db8:	4293      	cmp	r3, r2
 8000dba:	d003      	beq.n	8000dc4 <SPI_EndRxTransaction+0x24>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8000dbc:	2280      	movs	r2, #128	; 0x80
 8000dbe:	00d2      	lsls	r2, r2, #3
 8000dc0:	4293      	cmp	r3, r2
 8000dc2:	d104      	bne.n	8000dce <SPI_EndRxTransaction+0x2e>
    __HAL_SPI_DISABLE(hspi);
 8000dc4:	2140      	movs	r1, #64	; 0x40
 8000dc6:	6822      	ldr	r2, [r4, #0]
 8000dc8:	6813      	ldr	r3, [r2, #0]
 8000dca:	438b      	bics	r3, r1
 8000dcc:	6013      	str	r3, [r2, #0]
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8000dce:	003a      	movs	r2, r7
 8000dd0:	0031      	movs	r1, r6
 8000dd2:	0020      	movs	r0, r4
 8000dd4:	f7ff ff86 	bl	8000ce4 <SPI_WaitFlagStateUntilTimeout.constprop.9>
 8000dd8:	1e05      	subs	r5, r0, #0
 8000dda:	d005      	beq.n	8000de8 <SPI_EndRxTransaction+0x48>
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8000ddc:	2320      	movs	r3, #32
 8000dde:	6e22      	ldr	r2, [r4, #96]	; 0x60
      return HAL_TIMEOUT;
 8000de0:	2503      	movs	r5, #3
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8000de2:	4313      	orrs	r3, r2
 8000de4:	6623      	str	r3, [r4, #96]	; 0x60
 8000de6:	e016      	b.n	8000e16 <SPI_EndRxTransaction+0x76>
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8000de8:	2382      	movs	r3, #130	; 0x82
 8000dea:	6862      	ldr	r2, [r4, #4]
 8000dec:	005b      	lsls	r3, r3, #1
 8000dee:	429a      	cmp	r2, r3
 8000df0:	d111      	bne.n	8000e16 <SPI_EndRxTransaction+0x76>
 8000df2:	2280      	movs	r2, #128	; 0x80
 8000df4:	68a3      	ldr	r3, [r4, #8]
 8000df6:	0212      	lsls	r2, r2, #8
 8000df8:	4293      	cmp	r3, r2
 8000dfa:	d003      	beq.n	8000e04 <SPI_EndRxTransaction+0x64>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8000dfc:	2280      	movs	r2, #128	; 0x80
 8000dfe:	00d2      	lsls	r2, r2, #3
 8000e00:	4293      	cmp	r3, r2
 8000e02:	d108      	bne.n	8000e16 <SPI_EndRxTransaction+0x76>
    if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8000e04:	21c0      	movs	r1, #192	; 0xc0
 8000e06:	003b      	movs	r3, r7
 8000e08:	0032      	movs	r2, r6
 8000e0a:	00c9      	lsls	r1, r1, #3
 8000e0c:	0020      	movs	r0, r4
 8000e0e:	f7ff ff80 	bl	8000d12 <SPI_WaitFifoStateUntilTimeout.constprop.10>
 8000e12:	2800      	cmp	r0, #0
 8000e14:	d1e2      	bne.n	8000ddc <SPI_EndRxTransaction+0x3c>
}
 8000e16:	0028      	movs	r0, r5
 8000e18:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08000e1c <HAL_SPI_Init>:
{
 8000e1c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000e1e:	0004      	movs	r4, r0
    return HAL_ERROR;
 8000e20:	2001      	movs	r0, #1
  if (hspi == NULL)
 8000e22:	2c00      	cmp	r4, #0
 8000e24:	d04b      	beq.n	8000ebe <HAL_SPI_Init+0xa2>
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000e26:	2300      	movs	r3, #0
  if (hspi->State == HAL_SPI_STATE_RESET)
 8000e28:	0025      	movs	r5, r4
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000e2a:	62a3      	str	r3, [r4, #40]	; 0x28
  if (hspi->State == HAL_SPI_STATE_RESET)
 8000e2c:	355d      	adds	r5, #93	; 0x5d
 8000e2e:	782b      	ldrb	r3, [r5, #0]
 8000e30:	b2db      	uxtb	r3, r3
 8000e32:	2b00      	cmp	r3, #0
 8000e34:	d105      	bne.n	8000e42 <HAL_SPI_Init+0x26>
    hspi->Lock = HAL_UNLOCKED;
 8000e36:	0022      	movs	r2, r4
 8000e38:	325c      	adds	r2, #92	; 0x5c
 8000e3a:	7013      	strb	r3, [r2, #0]
    HAL_SPI_MspInit(hspi);
 8000e3c:	0020      	movs	r0, r4
 8000e3e:	f001 f927 	bl	8002090 <HAL_SPI_MspInit>
  hspi->State = HAL_SPI_STATE_BUSY;
 8000e42:	2302      	movs	r3, #2
  __HAL_SPI_DISABLE(hspi);
 8000e44:	2240      	movs	r2, #64	; 0x40
 8000e46:	6821      	ldr	r1, [r4, #0]
  hspi->State = HAL_SPI_STATE_BUSY;
 8000e48:	702b      	strb	r3, [r5, #0]
  __HAL_SPI_DISABLE(hspi);
 8000e4a:	680b      	ldr	r3, [r1, #0]
 8000e4c:	2000      	movs	r0, #0
 8000e4e:	4393      	bics	r3, r2
 8000e50:	600b      	str	r3, [r1, #0]
 8000e52:	23e0      	movs	r3, #224	; 0xe0
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8000e54:	68e2      	ldr	r2, [r4, #12]
 8000e56:	00db      	lsls	r3, r3, #3
 8000e58:	429a      	cmp	r2, r3
 8000e5a:	d931      	bls.n	8000ec0 <HAL_SPI_Init+0xa4>
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8000e5c:	26f0      	movs	r6, #240	; 0xf0
 8000e5e:	0136      	lsls	r6, r6, #4
 8000e60:	42b2      	cmp	r2, r6
 8000e62:	d133      	bne.n	8000ecc <HAL_SPI_Init+0xb0>
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8000e64:	0006      	movs	r6, r0
  if (hspi->Init.CRCLength == SPI_CRC_LENGTH_DATASIZE)
 8000e66:	6b20      	ldr	r0, [r4, #48]	; 0x30
 8000e68:	2800      	cmp	r0, #0
 8000e6a:	d103      	bne.n	8000e74 <HAL_SPI_Init+0x58>
    if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8000e6c:	429a      	cmp	r2, r3
 8000e6e:	d92f      	bls.n	8000ed0 <HAL_SPI_Init+0xb4>
      hspi->Init.CRCLength = SPI_CRC_LENGTH_16BIT;
 8000e70:	2302      	movs	r3, #2
      hspi->Init.CRCLength = SPI_CRC_LENGTH_8BIT;
 8000e72:	6323      	str	r3, [r4, #48]	; 0x30
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction |
 8000e74:	68a7      	ldr	r7, [r4, #8]
 8000e76:	6863      	ldr	r3, [r4, #4]
 8000e78:	69a0      	ldr	r0, [r4, #24]
 8000e7a:	433b      	orrs	r3, r7
 8000e7c:	6927      	ldr	r7, [r4, #16]
 8000e7e:	433b      	orrs	r3, r7
 8000e80:	6967      	ldr	r7, [r4, #20]
 8000e82:	433b      	orrs	r3, r7
 8000e84:	69e7      	ldr	r7, [r4, #28]
 8000e86:	433b      	orrs	r3, r7
 8000e88:	6a27      	ldr	r7, [r4, #32]
 8000e8a:	433b      	orrs	r3, r7
 8000e8c:	6aa7      	ldr	r7, [r4, #40]	; 0x28
 8000e8e:	433b      	orrs	r3, r7
 8000e90:	2780      	movs	r7, #128	; 0x80
 8000e92:	00bf      	lsls	r7, r7, #2
 8000e94:	4007      	ands	r7, r0
 8000e96:	433b      	orrs	r3, r7
 8000e98:	600b      	str	r3, [r1, #0]
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | hspi->Init.TIMode |
 8000e9a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8000e9c:	0c00      	lsrs	r0, r0, #16
 8000e9e:	431a      	orrs	r2, r3
 8000ea0:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8000ea2:	431a      	orrs	r2, r3
 8000ea4:	2304      	movs	r3, #4
 8000ea6:	4018      	ands	r0, r3
 8000ea8:	4310      	orrs	r0, r2
 8000eaa:	4306      	orrs	r6, r0
 8000eac:	604e      	str	r6, [r1, #4]
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8000eae:	69cb      	ldr	r3, [r1, #28]
 8000eb0:	4a08      	ldr	r2, [pc, #32]	; (8000ed4 <HAL_SPI_Init+0xb8>)
  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8000eb2:	2000      	movs	r0, #0
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8000eb4:	4013      	ands	r3, r2
 8000eb6:	61cb      	str	r3, [r1, #28]
  hspi->State     = HAL_SPI_STATE_READY;
 8000eb8:	2301      	movs	r3, #1
  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8000eba:	6620      	str	r0, [r4, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8000ebc:	702b      	strb	r3, [r5, #0]
}
 8000ebe:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8000ec0:	2680      	movs	r6, #128	; 0x80
 8000ec2:	0176      	lsls	r6, r6, #5
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8000ec4:	429a      	cmp	r2, r3
 8000ec6:	d0ce      	beq.n	8000e66 <HAL_SPI_Init+0x4a>
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000ec8:	62a0      	str	r0, [r4, #40]	; 0x28
 8000eca:	e7cc      	b.n	8000e66 <HAL_SPI_Init+0x4a>
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8000ecc:	0006      	movs	r6, r0
 8000ece:	e7fb      	b.n	8000ec8 <HAL_SPI_Init+0xac>
      hspi->Init.CRCLength = SPI_CRC_LENGTH_8BIT;
 8000ed0:	2301      	movs	r3, #1
 8000ed2:	e7ce      	b.n	8000e72 <HAL_SPI_Init+0x56>
 8000ed4:	fffff7ff 	.word	0xfffff7ff

08000ed8 <HAL_SPI_Transmit>:
{
 8000ed8:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000eda:	001f      	movs	r7, r3
  __HAL_LOCK(hspi);
 8000edc:	0003      	movs	r3, r0
{
 8000ede:	b087      	sub	sp, #28
  __HAL_LOCK(hspi);
 8000ee0:	335c      	adds	r3, #92	; 0x5c
{
 8000ee2:	9201      	str	r2, [sp, #4]
  __HAL_LOCK(hspi);
 8000ee4:	9302      	str	r3, [sp, #8]
 8000ee6:	781b      	ldrb	r3, [r3, #0]
{
 8000ee8:	0004      	movs	r4, r0
 8000eea:	000d      	movs	r5, r1
  __HAL_LOCK(hspi);
 8000eec:	2602      	movs	r6, #2
 8000eee:	2b01      	cmp	r3, #1
 8000ef0:	d100      	bne.n	8000ef4 <HAL_SPI_Transmit+0x1c>
 8000ef2:	e07a      	b.n	8000fea <HAL_SPI_Transmit+0x112>
 8000ef4:	2301      	movs	r3, #1
 8000ef6:	9a02      	ldr	r2, [sp, #8]
 8000ef8:	7013      	strb	r3, [r2, #0]
  tickstart = HAL_GetTick();
 8000efa:	f7ff f9c5 	bl	8000288 <HAL_GetTick>
  if (hspi->State != HAL_SPI_STATE_READY)
 8000efe:	0023      	movs	r3, r4
 8000f00:	335d      	adds	r3, #93	; 0x5d
  tickstart = HAL_GetTick();
 8000f02:	9000      	str	r0, [sp, #0]
  if (hspi->State != HAL_SPI_STATE_READY)
 8000f04:	9303      	str	r3, [sp, #12]
 8000f06:	781b      	ldrb	r3, [r3, #0]
 8000f08:	b2db      	uxtb	r3, r3
 8000f0a:	2b01      	cmp	r3, #1
 8000f0c:	d167      	bne.n	8000fde <HAL_SPI_Transmit+0x106>
    errorcode = HAL_ERROR;
 8000f0e:	001e      	movs	r6, r3
  if ((pData == NULL) || (Size == 0U))
 8000f10:	2d00      	cmp	r5, #0
 8000f12:	d064      	beq.n	8000fde <HAL_SPI_Transmit+0x106>
 8000f14:	9b01      	ldr	r3, [sp, #4]
 8000f16:	2b00      	cmp	r3, #0
 8000f18:	d061      	beq.n	8000fde <HAL_SPI_Transmit+0x106>
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8000f1a:	2303      	movs	r3, #3
 8000f1c:	9a03      	ldr	r2, [sp, #12]
 8000f1e:	7013      	strb	r3, [r2, #0]
  hspi->TxXferSize  = Size;
 8000f20:	466a      	mov	r2, sp
 8000f22:	8892      	ldrh	r2, [r2, #4]
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8000f24:	2300      	movs	r3, #0
  hspi->TxXferSize  = Size;
 8000f26:	87a2      	strh	r2, [r4, #60]	; 0x3c
  hspi->TxXferCount = Size;
 8000f28:	466a      	mov	r2, sp
 8000f2a:	8892      	ldrh	r2, [r2, #4]
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8000f2c:	6623      	str	r3, [r4, #96]	; 0x60
  hspi->TxXferCount = Size;
 8000f2e:	87e2      	strh	r2, [r4, #62]	; 0x3e
  hspi->RxXferSize  = 0U;
 8000f30:	1da2      	adds	r2, r4, #6
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8000f32:	6423      	str	r3, [r4, #64]	; 0x40
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8000f34:	63a5      	str	r5, [r4, #56]	; 0x38
  hspi->RxXferCount = 0U;
 8000f36:	3202      	adds	r2, #2
  hspi->RxXferSize  = 0U;
 8000f38:	8793      	strh	r3, [r2, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 8000f3a:	87d3      	strh	r3, [r2, #62]	; 0x3e
  hspi->TxISR       = NULL;
 8000f3c:	6523      	str	r3, [r4, #80]	; 0x50
  hspi->RxISR       = NULL;
 8000f3e:	64e3      	str	r3, [r4, #76]	; 0x4c
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8000f40:	2380      	movs	r3, #128	; 0x80
 8000f42:	68a2      	ldr	r2, [r4, #8]
 8000f44:	021b      	lsls	r3, r3, #8
 8000f46:	429a      	cmp	r2, r3
 8000f48:	d105      	bne.n	8000f56 <HAL_SPI_Transmit+0x7e>
    SPI_1LINE_TX(hspi);
 8000f4a:	2380      	movs	r3, #128	; 0x80
 8000f4c:	6822      	ldr	r2, [r4, #0]
 8000f4e:	01db      	lsls	r3, r3, #7
 8000f50:	6811      	ldr	r1, [r2, #0]
 8000f52:	430b      	orrs	r3, r1
 8000f54:	6013      	str	r3, [r2, #0]
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8000f56:	2240      	movs	r2, #64	; 0x40
 8000f58:	6823      	ldr	r3, [r4, #0]
 8000f5a:	6819      	ldr	r1, [r3, #0]
 8000f5c:	4211      	tst	r1, r2
 8000f5e:	d102      	bne.n	8000f66 <HAL_SPI_Transmit+0x8e>
    __HAL_SPI_ENABLE(hspi);
 8000f60:	6819      	ldr	r1, [r3, #0]
 8000f62:	430a      	orrs	r2, r1
 8000f64:	601a      	str	r2, [r3, #0]
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8000f66:	21e0      	movs	r1, #224	; 0xe0
 8000f68:	68e0      	ldr	r0, [r4, #12]
 8000f6a:	00c9      	lsls	r1, r1, #3
 8000f6c:	6862      	ldr	r2, [r4, #4]
 8000f6e:	4288      	cmp	r0, r1
 8000f70:	d947      	bls.n	8001002 <HAL_SPI_Transmit+0x12a>
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (hspi->TxXferCount == 0x01U))
 8000f72:	2a00      	cmp	r2, #0
 8000f74:	d002      	beq.n	8000f7c <HAL_SPI_Transmit+0xa4>
 8000f76:	8fe2      	ldrh	r2, [r4, #62]	; 0x3e
 8000f78:	2a01      	cmp	r2, #1
 8000f7a:	d106      	bne.n	8000f8a <HAL_SPI_Transmit+0xb2>
      hspi->Instance->DR = *((uint16_t *)pData);
 8000f7c:	882a      	ldrh	r2, [r5, #0]
      pData += sizeof(uint16_t);
 8000f7e:	3502      	adds	r5, #2
      hspi->Instance->DR = *((uint16_t *)pData);
 8000f80:	60da      	str	r2, [r3, #12]
      hspi->TxXferCount--;
 8000f82:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 8000f84:	3b01      	subs	r3, #1
 8000f86:	b29b      	uxth	r3, r3
 8000f88:	87e3      	strh	r3, [r4, #62]	; 0x3e
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8000f8a:	2602      	movs	r6, #2
    while (hspi->TxXferCount > 0U)
 8000f8c:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 8000f8e:	2b00      	cmp	r3, #0
 8000f90:	d116      	bne.n	8000fc0 <HAL_SPI_Transmit+0xe8>
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8000f92:	9a00      	ldr	r2, [sp, #0]
 8000f94:	0039      	movs	r1, r7
 8000f96:	0020      	movs	r0, r4
 8000f98:	f7ff fedf 	bl	8000d5a <SPI_EndRxTxTransaction>
 8000f9c:	2800      	cmp	r0, #0
 8000f9e:	d000      	beq.n	8000fa2 <HAL_SPI_Transmit+0xca>
 8000fa0:	e06c      	b.n	800107c <HAL_SPI_Transmit+0x1a4>
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8000fa2:	68a3      	ldr	r3, [r4, #8]
 8000fa4:	2b00      	cmp	r3, #0
 8000fa6:	d106      	bne.n	8000fb6 <HAL_SPI_Transmit+0xde>
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8000fa8:	9305      	str	r3, [sp, #20]
 8000faa:	6823      	ldr	r3, [r4, #0]
 8000fac:	68da      	ldr	r2, [r3, #12]
 8000fae:	9205      	str	r2, [sp, #20]
 8000fb0:	689b      	ldr	r3, [r3, #8]
 8000fb2:	9305      	str	r3, [sp, #20]
 8000fb4:	9b05      	ldr	r3, [sp, #20]
  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8000fb6:	6e26      	ldr	r6, [r4, #96]	; 0x60
 8000fb8:	1e73      	subs	r3, r6, #1
 8000fba:	419e      	sbcs	r6, r3
    errorcode = HAL_BUSY;
 8000fbc:	b2f6      	uxtb	r6, r6
 8000fbe:	e00e      	b.n	8000fde <HAL_SPI_Transmit+0x106>
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8000fc0:	6823      	ldr	r3, [r4, #0]
 8000fc2:	689a      	ldr	r2, [r3, #8]
 8000fc4:	4232      	tst	r2, r6
 8000fc6:	d007      	beq.n	8000fd8 <HAL_SPI_Transmit+0x100>
        hspi->Instance->DR = *((uint16_t *)pData);
 8000fc8:	882a      	ldrh	r2, [r5, #0]
        pData += sizeof(uint16_t);
 8000fca:	3502      	adds	r5, #2
        hspi->Instance->DR = *((uint16_t *)pData);
 8000fcc:	60da      	str	r2, [r3, #12]
        hspi->TxXferCount--;
 8000fce:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 8000fd0:	3b01      	subs	r3, #1
 8000fd2:	b29b      	uxth	r3, r3
 8000fd4:	87e3      	strh	r3, [r4, #62]	; 0x3e
 8000fd6:	e7d9      	b.n	8000f8c <HAL_SPI_Transmit+0xb4>
        if ((Timeout == 0U) || ((Timeout != HAL_MAX_DELAY) && ((HAL_GetTick() - tickstart) >=  Timeout)))
 8000fd8:	2f00      	cmp	r7, #0
 8000fda:	d109      	bne.n	8000ff0 <HAL_SPI_Transmit+0x118>
          errorcode = HAL_TIMEOUT;
 8000fdc:	2603      	movs	r6, #3
  hspi->State = HAL_SPI_STATE_READY;
 8000fde:	2301      	movs	r3, #1
 8000fe0:	9a03      	ldr	r2, [sp, #12]
 8000fe2:	7013      	strb	r3, [r2, #0]
  __HAL_UNLOCK(hspi);
 8000fe4:	2300      	movs	r3, #0
 8000fe6:	9a02      	ldr	r2, [sp, #8]
 8000fe8:	7013      	strb	r3, [r2, #0]
}
 8000fea:	0030      	movs	r0, r6
 8000fec:	b007      	add	sp, #28
 8000fee:	bdf0      	pop	{r4, r5, r6, r7, pc}
        if ((Timeout == 0U) || ((Timeout != HAL_MAX_DELAY) && ((HAL_GetTick() - tickstart) >=  Timeout)))
 8000ff0:	1c7b      	adds	r3, r7, #1
 8000ff2:	d0cb      	beq.n	8000f8c <HAL_SPI_Transmit+0xb4>
 8000ff4:	f7ff f948 	bl	8000288 <HAL_GetTick>
 8000ff8:	9b00      	ldr	r3, [sp, #0]
 8000ffa:	1ac0      	subs	r0, r0, r3
 8000ffc:	4287      	cmp	r7, r0
 8000ffe:	d8c5      	bhi.n	8000f8c <HAL_SPI_Transmit+0xb4>
 8001000:	e7ec      	b.n	8000fdc <HAL_SPI_Transmit+0x104>
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (hspi->TxXferCount == 0x01U))
 8001002:	2a00      	cmp	r2, #0
 8001004:	d002      	beq.n	800100c <HAL_SPI_Transmit+0x134>
 8001006:	8fe2      	ldrh	r2, [r4, #62]	; 0x3e
 8001008:	2a01      	cmp	r2, #1
 800100a:	d109      	bne.n	8001020 <HAL_SPI_Transmit+0x148>
      if (hspi->TxXferCount > 1U)
 800100c:	8fe2      	ldrh	r2, [r4, #62]	; 0x3e
 800100e:	2a01      	cmp	r2, #1
 8001010:	d919      	bls.n	8001046 <HAL_SPI_Transmit+0x16e>
        hspi->Instance->DR = *((uint16_t *)pData);
 8001012:	882a      	ldrh	r2, [r5, #0]
        pData += sizeof(uint16_t);
 8001014:	3502      	adds	r5, #2
        hspi->Instance->DR = *((uint16_t *)pData);
 8001016:	60da      	str	r2, [r3, #12]
        hspi->TxXferCount -= 2U;
 8001018:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 800101a:	3b02      	subs	r3, #2
 800101c:	b29b      	uxth	r3, r3
 800101e:	87e3      	strh	r3, [r4, #62]	; 0x3e
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8001020:	2602      	movs	r6, #2
    while (hspi->TxXferCount > 0U)
 8001022:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 8001024:	2b00      	cmp	r3, #0
 8001026:	d0b4      	beq.n	8000f92 <HAL_SPI_Transmit+0xba>
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8001028:	6823      	ldr	r3, [r4, #0]
 800102a:	689a      	ldr	r2, [r3, #8]
 800102c:	4232      	tst	r2, r6
 800102e:	d01a      	beq.n	8001066 <HAL_SPI_Transmit+0x18e>
        if (hspi->TxXferCount > 1U)
 8001030:	8fe2      	ldrh	r2, [r4, #62]	; 0x3e
 8001032:	2a01      	cmp	r2, #1
 8001034:	d90f      	bls.n	8001056 <HAL_SPI_Transmit+0x17e>
          hspi->Instance->DR = *((uint16_t *)pData);
 8001036:	882a      	ldrh	r2, [r5, #0]
          pData += sizeof(uint16_t);
 8001038:	3502      	adds	r5, #2
          hspi->Instance->DR = *((uint16_t *)pData);
 800103a:	60da      	str	r2, [r3, #12]
          hspi->TxXferCount -= 2U;
 800103c:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 800103e:	3b02      	subs	r3, #2
 8001040:	b29b      	uxth	r3, r3
 8001042:	87e3      	strh	r3, [r4, #62]	; 0x3e
 8001044:	e7ed      	b.n	8001022 <HAL_SPI_Transmit+0x14a>
        *((__IO uint8_t *)&hspi->Instance->DR) = (*pData++);
 8001046:	782a      	ldrb	r2, [r5, #0]
 8001048:	3501      	adds	r5, #1
 800104a:	731a      	strb	r2, [r3, #12]
        hspi->TxXferCount--;
 800104c:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 800104e:	3b01      	subs	r3, #1
 8001050:	b29b      	uxth	r3, r3
 8001052:	87e3      	strh	r3, [r4, #62]	; 0x3e
 8001054:	e7e4      	b.n	8001020 <HAL_SPI_Transmit+0x148>
          *((__IO uint8_t *)&hspi->Instance->DR) = (*pData++);
 8001056:	782a      	ldrb	r2, [r5, #0]
 8001058:	3501      	adds	r5, #1
 800105a:	731a      	strb	r2, [r3, #12]
          hspi->TxXferCount--;
 800105c:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 800105e:	3b01      	subs	r3, #1
 8001060:	b29b      	uxth	r3, r3
 8001062:	87e3      	strh	r3, [r4, #62]	; 0x3e
 8001064:	e7dd      	b.n	8001022 <HAL_SPI_Transmit+0x14a>
        if ((Timeout == 0U) || ((Timeout != HAL_MAX_DELAY) && ((HAL_GetTick() - tickstart) >=  Timeout)))
 8001066:	2f00      	cmp	r7, #0
 8001068:	d0b8      	beq.n	8000fdc <HAL_SPI_Transmit+0x104>
 800106a:	1c7b      	adds	r3, r7, #1
 800106c:	d0d9      	beq.n	8001022 <HAL_SPI_Transmit+0x14a>
 800106e:	f7ff f90b 	bl	8000288 <HAL_GetTick>
 8001072:	9b00      	ldr	r3, [sp, #0]
 8001074:	1ac0      	subs	r0, r0, r3
 8001076:	4287      	cmp	r7, r0
 8001078:	d8d3      	bhi.n	8001022 <HAL_SPI_Transmit+0x14a>
 800107a:	e7af      	b.n	8000fdc <HAL_SPI_Transmit+0x104>
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800107c:	2320      	movs	r3, #32
 800107e:	6623      	str	r3, [r4, #96]	; 0x60
 8001080:	e78f      	b.n	8000fa2 <HAL_SPI_Transmit+0xca>
	...

08001084 <HAL_SPI_TransmitReceive>:
{
 8001084:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8001086:	001f      	movs	r7, r3
  __HAL_LOCK(hspi);
 8001088:	0003      	movs	r3, r0
{
 800108a:	9200      	str	r2, [sp, #0]
  __HAL_LOCK(hspi);
 800108c:	335c      	adds	r3, #92	; 0x5c
 800108e:	781a      	ldrb	r2, [r3, #0]
{
 8001090:	0004      	movs	r4, r0
 8001092:	000d      	movs	r5, r1
  __HAL_LOCK(hspi);
 8001094:	2602      	movs	r6, #2
 8001096:	2a01      	cmp	r2, #1
 8001098:	d100      	bne.n	800109c <HAL_SPI_TransmitReceive+0x18>
 800109a:	e0ae      	b.n	80011fa <HAL_SPI_TransmitReceive+0x176>
 800109c:	2201      	movs	r2, #1
 800109e:	701a      	strb	r2, [r3, #0]
  tickstart = HAL_GetTick();
 80010a0:	f7ff f8f2 	bl	8000288 <HAL_GetTick>
  tmp  = hspi->State;
 80010a4:	0023      	movs	r3, r4
  tickstart = HAL_GetTick();
 80010a6:	9001      	str	r0, [sp, #4]
  tmp  = hspi->State;
 80010a8:	335d      	adds	r3, #93	; 0x5d
 80010aa:	781b      	ldrb	r3, [r3, #0]
  tmp1 = hspi->Init.Mode;
 80010ac:	6861      	ldr	r1, [r4, #4]
  tmp  = hspi->State;
 80010ae:	b2db      	uxtb	r3, r3
  if (!((tmp == HAL_SPI_STATE_READY) || \
 80010b0:	2b01      	cmp	r3, #1
 80010b2:	d00b      	beq.n	80010cc <HAL_SPI_TransmitReceive+0x48>
 80010b4:	2282      	movs	r2, #130	; 0x82
 80010b6:	0052      	lsls	r2, r2, #1
 80010b8:	4291      	cmp	r1, r2
 80010ba:	d000      	beq.n	80010be <HAL_SPI_TransmitReceive+0x3a>
 80010bc:	e096      	b.n	80011ec <HAL_SPI_TransmitReceive+0x168>
        ((tmp1 == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp == HAL_SPI_STATE_BUSY_RX))))
 80010be:	68a2      	ldr	r2, [r4, #8]
 80010c0:	2a00      	cmp	r2, #0
 80010c2:	d000      	beq.n	80010c6 <HAL_SPI_TransmitReceive+0x42>
 80010c4:	e092      	b.n	80011ec <HAL_SPI_TransmitReceive+0x168>
 80010c6:	2b04      	cmp	r3, #4
 80010c8:	d000      	beq.n	80010cc <HAL_SPI_TransmitReceive+0x48>
 80010ca:	e08f      	b.n	80011ec <HAL_SPI_TransmitReceive+0x168>
    errorcode = HAL_ERROR;
 80010cc:	2601      	movs	r6, #1
  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 80010ce:	2d00      	cmp	r5, #0
 80010d0:	d100      	bne.n	80010d4 <HAL_SPI_TransmitReceive+0x50>
 80010d2:	e08b      	b.n	80011ec <HAL_SPI_TransmitReceive+0x168>
 80010d4:	9b00      	ldr	r3, [sp, #0]
 80010d6:	2b00      	cmp	r3, #0
 80010d8:	d100      	bne.n	80010dc <HAL_SPI_TransmitReceive+0x58>
 80010da:	e087      	b.n	80011ec <HAL_SPI_TransmitReceive+0x168>
 80010dc:	2f00      	cmp	r7, #0
 80010de:	d100      	bne.n	80010e2 <HAL_SPI_TransmitReceive+0x5e>
 80010e0:	e084      	b.n	80011ec <HAL_SPI_TransmitReceive+0x168>
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 80010e2:	0023      	movs	r3, r4
 80010e4:	335d      	adds	r3, #93	; 0x5d
 80010e6:	781a      	ldrb	r2, [r3, #0]
 80010e8:	2a04      	cmp	r2, #4
 80010ea:	d001      	beq.n	80010f0 <HAL_SPI_TransmitReceive+0x6c>
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 80010ec:	2205      	movs	r2, #5
 80010ee:	701a      	strb	r2, [r3, #0]
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 80010f0:	9a00      	ldr	r2, [sp, #0]
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80010f2:	2300      	movs	r3, #0
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 80010f4:	6422      	str	r2, [r4, #64]	; 0x40
  hspi->RxXferCount = Size;
 80010f6:	0022      	movs	r2, r4
  if ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) || (hspi->RxXferCount > 1U))
 80010f8:	26e0      	movs	r6, #224	; 0xe0
  hspi->RxXferSize  = Size;
 80010fa:	1da0      	adds	r0, r4, #6
  hspi->RxXferCount = Size;
 80010fc:	3208      	adds	r2, #8
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80010fe:	6623      	str	r3, [r4, #96]	; 0x60
  hspi->RxXferCount = Size;
 8001100:	87d7      	strh	r7, [r2, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 8001102:	87c7      	strh	r7, [r0, #62]	; 0x3e
  if ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) || (hspi->RxXferCount > 1U))
 8001104:	68e0      	ldr	r0, [r4, #12]
  hspi->RxISR       = NULL;
 8001106:	64e3      	str	r3, [r4, #76]	; 0x4c
  hspi->TxISR       = NULL;
 8001108:	6523      	str	r3, [r4, #80]	; 0x50
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 800110a:	63a5      	str	r5, [r4, #56]	; 0x38
  hspi->TxXferCount = Size;
 800110c:	87e7      	strh	r7, [r4, #62]	; 0x3e
  hspi->TxXferSize  = Size;
 800110e:	87a7      	strh	r7, [r4, #60]	; 0x3c
  if ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) || (hspi->RxXferCount > 1U))
 8001110:	00f6      	lsls	r6, r6, #3
 8001112:	6823      	ldr	r3, [r4, #0]
 8001114:	42b0      	cmp	r0, r6
 8001116:	d802      	bhi.n	800111e <HAL_SPI_TransmitReceive+0x9a>
 8001118:	8fd2      	ldrh	r2, [r2, #62]	; 0x3e
 800111a:	2a01      	cmp	r2, #1
 800111c:	d931      	bls.n	8001182 <HAL_SPI_TransmitReceive+0xfe>
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 800111e:	685a      	ldr	r2, [r3, #4]
 8001120:	4e71      	ldr	r6, [pc, #452]	; (80012e8 <HAL_SPI_TransmitReceive+0x264>)
 8001122:	4032      	ands	r2, r6
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8001124:	605a      	str	r2, [r3, #4]
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8001126:	2240      	movs	r2, #64	; 0x40
 8001128:	6823      	ldr	r3, [r4, #0]
 800112a:	681e      	ldr	r6, [r3, #0]
 800112c:	4216      	tst	r6, r2
 800112e:	d102      	bne.n	8001136 <HAL_SPI_TransmitReceive+0xb2>
    __HAL_SPI_ENABLE(hspi);
 8001130:	681e      	ldr	r6, [r3, #0]
 8001132:	4332      	orrs	r2, r6
 8001134:	601a      	str	r2, [r3, #0]
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8001136:	22e0      	movs	r2, #224	; 0xe0
 8001138:	0026      	movs	r6, r4
 800113a:	00d2      	lsls	r2, r2, #3
 800113c:	3608      	adds	r6, #8
 800113e:	4290      	cmp	r0, r2
 8001140:	d95d      	bls.n	80011fe <HAL_SPI_TransmitReceive+0x17a>
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (hspi->TxXferCount == 0x01U))
 8001142:	2900      	cmp	r1, #0
 8001144:	d002      	beq.n	800114c <HAL_SPI_TransmitReceive+0xc8>
 8001146:	8fe2      	ldrh	r2, [r4, #62]	; 0x3e
 8001148:	2a01      	cmp	r2, #1
 800114a:	d106      	bne.n	800115a <HAL_SPI_TransmitReceive+0xd6>
      hspi->Instance->DR = *((uint16_t *)pTxData);
 800114c:	882a      	ldrh	r2, [r5, #0]
      pTxData += sizeof(uint16_t);
 800114e:	3502      	adds	r5, #2
      hspi->Instance->DR = *((uint16_t *)pTxData);
 8001150:	60da      	str	r2, [r3, #12]
      hspi->TxXferCount--;
 8001152:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 8001154:	3b01      	subs	r3, #1
 8001156:	b29b      	uxth	r3, r3
 8001158:	87e3      	strh	r3, [r4, #62]	; 0x3e
        txallowed = 1U;
 800115a:	2701      	movs	r7, #1
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800115c:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 800115e:	2b00      	cmp	r3, #0
 8001160:	d114      	bne.n	800118c <HAL_SPI_TransmitReceive+0x108>
 8001162:	8ff3      	ldrh	r3, [r6, #62]	; 0x3e
 8001164:	2b00      	cmp	r3, #0
 8001166:	d111      	bne.n	800118c <HAL_SPI_TransmitReceive+0x108>
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8001168:	9a01      	ldr	r2, [sp, #4]
 800116a:	9908      	ldr	r1, [sp, #32]
 800116c:	0020      	movs	r0, r4
 800116e:	f7ff fdf4 	bl	8000d5a <SPI_EndRxTxTransaction>
 8001172:	2800      	cmp	r0, #0
 8001174:	d000      	beq.n	8001178 <HAL_SPI_TransmitReceive+0xf4>
 8001176:	e0b3      	b.n	80012e0 <HAL_SPI_TransmitReceive+0x25c>
  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8001178:	6e26      	ldr	r6, [r4, #96]	; 0x60
 800117a:	1e73      	subs	r3, r6, #1
 800117c:	419e      	sbcs	r6, r3
    errorcode = HAL_BUSY;
 800117e:	b2f6      	uxtb	r6, r6
 8001180:	e034      	b.n	80011ec <HAL_SPI_TransmitReceive+0x168>
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8001182:	2280      	movs	r2, #128	; 0x80
 8001184:	685e      	ldr	r6, [r3, #4]
 8001186:	0152      	lsls	r2, r2, #5
 8001188:	4332      	orrs	r2, r6
 800118a:	e7cb      	b.n	8001124 <HAL_SPI_TransmitReceive+0xa0>
      if (txallowed && (hspi->TxXferCount > 0U) && (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)))
 800118c:	2f00      	cmp	r7, #0
 800118e:	d00f      	beq.n	80011b0 <HAL_SPI_TransmitReceive+0x12c>
 8001190:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 8001192:	2b00      	cmp	r3, #0
 8001194:	d00c      	beq.n	80011b0 <HAL_SPI_TransmitReceive+0x12c>
 8001196:	2102      	movs	r1, #2
 8001198:	6823      	ldr	r3, [r4, #0]
 800119a:	689a      	ldr	r2, [r3, #8]
 800119c:	420a      	tst	r2, r1
 800119e:	d007      	beq.n	80011b0 <HAL_SPI_TransmitReceive+0x12c>
        txallowed = 0U;
 80011a0:	2700      	movs	r7, #0
        hspi->Instance->DR = *((uint16_t *)pTxData);
 80011a2:	882a      	ldrh	r2, [r5, #0]
        pTxData += sizeof(uint16_t);
 80011a4:	186d      	adds	r5, r5, r1
        hspi->Instance->DR = *((uint16_t *)pTxData);
 80011a6:	60da      	str	r2, [r3, #12]
        hspi->TxXferCount--;
 80011a8:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 80011aa:	3b01      	subs	r3, #1
 80011ac:	b29b      	uxth	r3, r3
 80011ae:	87e3      	strh	r3, [r4, #62]	; 0x3e
      if ((hspi->RxXferCount > 0U) && (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)))
 80011b0:	8ff3      	ldrh	r3, [r6, #62]	; 0x3e
 80011b2:	2b00      	cmp	r3, #0
 80011b4:	d00f      	beq.n	80011d6 <HAL_SPI_TransmitReceive+0x152>
 80011b6:	2101      	movs	r1, #1
 80011b8:	6823      	ldr	r3, [r4, #0]
 80011ba:	689a      	ldr	r2, [r3, #8]
 80011bc:	420a      	tst	r2, r1
 80011be:	d00a      	beq.n	80011d6 <HAL_SPI_TransmitReceive+0x152>
        *((uint16_t *)pRxData) = hspi->Instance->DR;
 80011c0:	68db      	ldr	r3, [r3, #12]
 80011c2:	9a00      	ldr	r2, [sp, #0]
        txallowed = 1U;
 80011c4:	000f      	movs	r7, r1
        *((uint16_t *)pRxData) = hspi->Instance->DR;
 80011c6:	8013      	strh	r3, [r2, #0]
        pRxData += sizeof(uint16_t);
 80011c8:	0013      	movs	r3, r2
 80011ca:	3302      	adds	r3, #2
 80011cc:	9300      	str	r3, [sp, #0]
        hspi->RxXferCount--;
 80011ce:	8ff3      	ldrh	r3, [r6, #62]	; 0x3e
 80011d0:	3b01      	subs	r3, #1
 80011d2:	b29b      	uxth	r3, r3
 80011d4:	87f3      	strh	r3, [r6, #62]	; 0x3e
      if ((Timeout != HAL_MAX_DELAY) && ((HAL_GetTick() - tickstart) >=  Timeout))
 80011d6:	9b08      	ldr	r3, [sp, #32]
 80011d8:	3301      	adds	r3, #1
 80011da:	d0bf      	beq.n	800115c <HAL_SPI_TransmitReceive+0xd8>
 80011dc:	f7ff f854 	bl	8000288 <HAL_GetTick>
 80011e0:	9b01      	ldr	r3, [sp, #4]
 80011e2:	1ac0      	subs	r0, r0, r3
 80011e4:	9b08      	ldr	r3, [sp, #32]
 80011e6:	4283      	cmp	r3, r0
 80011e8:	d8b8      	bhi.n	800115c <HAL_SPI_TransmitReceive+0xd8>
        errorcode = HAL_TIMEOUT;
 80011ea:	2603      	movs	r6, #3
  hspi->State = HAL_SPI_STATE_READY;
 80011ec:	0023      	movs	r3, r4
 80011ee:	2201      	movs	r2, #1
 80011f0:	335d      	adds	r3, #93	; 0x5d
 80011f2:	701a      	strb	r2, [r3, #0]
  __HAL_UNLOCK(hspi);
 80011f4:	2300      	movs	r3, #0
 80011f6:	345c      	adds	r4, #92	; 0x5c
 80011f8:	7023      	strb	r3, [r4, #0]
}
 80011fa:	0030      	movs	r0, r6
 80011fc:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (hspi->TxXferCount == 0x01U))
 80011fe:	2900      	cmp	r1, #0
 8001200:	d002      	beq.n	8001208 <HAL_SPI_TransmitReceive+0x184>
 8001202:	8fe2      	ldrh	r2, [r4, #62]	; 0x3e
 8001204:	2a01      	cmp	r2, #1
 8001206:	d109      	bne.n	800121c <HAL_SPI_TransmitReceive+0x198>
      if (hspi->TxXferCount > 1U)
 8001208:	8fe2      	ldrh	r2, [r4, #62]	; 0x3e
 800120a:	2a01      	cmp	r2, #1
 800120c:	d94c      	bls.n	80012a8 <HAL_SPI_TransmitReceive+0x224>
        hspi->Instance->DR = *((uint16_t *)pTxData);
 800120e:	882a      	ldrh	r2, [r5, #0]
        pTxData += sizeof(uint16_t);
 8001210:	3502      	adds	r5, #2
        hspi->Instance->DR = *((uint16_t *)pTxData);
 8001212:	60da      	str	r2, [r3, #12]
        hspi->TxXferCount -= 2U;
 8001214:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 8001216:	3b02      	subs	r3, #2
 8001218:	b29b      	uxth	r3, r3
 800121a:	87e3      	strh	r3, [r4, #62]	; 0x3e
        txallowed = 1U;
 800121c:	2701      	movs	r7, #1
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800121e:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 8001220:	2b00      	cmp	r3, #0
 8001222:	d103      	bne.n	800122c <HAL_SPI_TransmitReceive+0x1a8>
 8001224:	8ff3      	ldrh	r3, [r6, #62]	; 0x3e
 8001226:	2b00      	cmp	r3, #0
 8001228:	d100      	bne.n	800122c <HAL_SPI_TransmitReceive+0x1a8>
 800122a:	e79d      	b.n	8001168 <HAL_SPI_TransmitReceive+0xe4>
      if (txallowed && (hspi->TxXferCount > 0U) && (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)))
 800122c:	2f00      	cmp	r7, #0
 800122e:	d012      	beq.n	8001256 <HAL_SPI_TransmitReceive+0x1d2>
 8001230:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 8001232:	2b00      	cmp	r3, #0
 8001234:	d00f      	beq.n	8001256 <HAL_SPI_TransmitReceive+0x1d2>
 8001236:	2102      	movs	r1, #2
 8001238:	6823      	ldr	r3, [r4, #0]
 800123a:	689a      	ldr	r2, [r3, #8]
 800123c:	420a      	tst	r2, r1
 800123e:	d00a      	beq.n	8001256 <HAL_SPI_TransmitReceive+0x1d2>
        if (hspi->TxXferCount > 1U)
 8001240:	8fe2      	ldrh	r2, [r4, #62]	; 0x3e
 8001242:	2a01      	cmp	r2, #1
 8001244:	d938      	bls.n	80012b8 <HAL_SPI_TransmitReceive+0x234>
          hspi->Instance->DR = *((uint16_t *)pTxData);
 8001246:	882a      	ldrh	r2, [r5, #0]
          pTxData += sizeof(uint16_t);
 8001248:	186d      	adds	r5, r5, r1
          hspi->Instance->DR = *((uint16_t *)pTxData);
 800124a:	60da      	str	r2, [r3, #12]
          hspi->TxXferCount -= 2U;
 800124c:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 800124e:	3b02      	subs	r3, #2
 8001250:	b29b      	uxth	r3, r3
 8001252:	87e3      	strh	r3, [r4, #62]	; 0x3e
        txallowed = 0U;
 8001254:	2700      	movs	r7, #0
      if ((hspi->RxXferCount > 0U) && (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)))
 8001256:	8ff3      	ldrh	r3, [r6, #62]	; 0x3e
 8001258:	2b00      	cmp	r3, #0
 800125a:	d01a      	beq.n	8001292 <HAL_SPI_TransmitReceive+0x20e>
 800125c:	2101      	movs	r1, #1
 800125e:	6823      	ldr	r3, [r4, #0]
 8001260:	689a      	ldr	r2, [r3, #8]
 8001262:	420a      	tst	r2, r1
 8001264:	d015      	beq.n	8001292 <HAL_SPI_TransmitReceive+0x20e>
        if (hspi->RxXferCount > 1U)
 8001266:	8ff2      	ldrh	r2, [r6, #62]	; 0x3e
 8001268:	428a      	cmp	r2, r1
 800126a:	d92d      	bls.n	80012c8 <HAL_SPI_TransmitReceive+0x244>
          *((uint16_t *)pRxData) = hspi->Instance->DR;
 800126c:	68da      	ldr	r2, [r3, #12]
 800126e:	9900      	ldr	r1, [sp, #0]
        txallowed = 1U;
 8001270:	2701      	movs	r7, #1
          *((uint16_t *)pRxData) = hspi->Instance->DR;
 8001272:	800a      	strh	r2, [r1, #0]
          pRxData += sizeof(uint16_t);
 8001274:	000a      	movs	r2, r1
 8001276:	3202      	adds	r2, #2
 8001278:	9200      	str	r2, [sp, #0]
          hspi->RxXferCount -= 2U;
 800127a:	8ff2      	ldrh	r2, [r6, #62]	; 0x3e
 800127c:	3a02      	subs	r2, #2
 800127e:	b292      	uxth	r2, r2
 8001280:	87f2      	strh	r2, [r6, #62]	; 0x3e
          if (hspi->RxXferCount <= 1U)
 8001282:	8ff2      	ldrh	r2, [r6, #62]	; 0x3e
 8001284:	42ba      	cmp	r2, r7
 8001286:	d804      	bhi.n	8001292 <HAL_SPI_TransmitReceive+0x20e>
            SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8001288:	2280      	movs	r2, #128	; 0x80
 800128a:	6859      	ldr	r1, [r3, #4]
 800128c:	0152      	lsls	r2, r2, #5
 800128e:	430a      	orrs	r2, r1
 8001290:	605a      	str	r2, [r3, #4]
      if ((Timeout != HAL_MAX_DELAY) && ((HAL_GetTick() - tickstart) >=  Timeout))
 8001292:	9b08      	ldr	r3, [sp, #32]
 8001294:	3301      	adds	r3, #1
 8001296:	d0c2      	beq.n	800121e <HAL_SPI_TransmitReceive+0x19a>
 8001298:	f7fe fff6 	bl	8000288 <HAL_GetTick>
 800129c:	9b01      	ldr	r3, [sp, #4]
 800129e:	1ac0      	subs	r0, r0, r3
 80012a0:	9b08      	ldr	r3, [sp, #32]
 80012a2:	4283      	cmp	r3, r0
 80012a4:	d8bb      	bhi.n	800121e <HAL_SPI_TransmitReceive+0x19a>
 80012a6:	e7a0      	b.n	80011ea <HAL_SPI_TransmitReceive+0x166>
        *(__IO uint8_t *)&hspi->Instance->DR = (*pTxData++);
 80012a8:	782a      	ldrb	r2, [r5, #0]
 80012aa:	3501      	adds	r5, #1
 80012ac:	731a      	strb	r2, [r3, #12]
        hspi->TxXferCount--;
 80012ae:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 80012b0:	3b01      	subs	r3, #1
 80012b2:	b29b      	uxth	r3, r3
 80012b4:	87e3      	strh	r3, [r4, #62]	; 0x3e
 80012b6:	e7b1      	b.n	800121c <HAL_SPI_TransmitReceive+0x198>
          *(__IO uint8_t *)&hspi->Instance->DR = (*pTxData++);
 80012b8:	782a      	ldrb	r2, [r5, #0]
 80012ba:	3501      	adds	r5, #1
 80012bc:	731a      	strb	r2, [r3, #12]
          hspi->TxXferCount--;
 80012be:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 80012c0:	3b01      	subs	r3, #1
 80012c2:	b29b      	uxth	r3, r3
 80012c4:	87e3      	strh	r3, [r4, #62]	; 0x3e
 80012c6:	e7c5      	b.n	8001254 <HAL_SPI_TransmitReceive+0x1d0>
          (*(uint8_t *)pRxData++) = *(__IO uint8_t *)&hspi->Instance->DR;
 80012c8:	7b1b      	ldrb	r3, [r3, #12]
 80012ca:	9a00      	ldr	r2, [sp, #0]
        txallowed = 1U;
 80012cc:	2701      	movs	r7, #1
          (*(uint8_t *)pRxData++) = *(__IO uint8_t *)&hspi->Instance->DR;
 80012ce:	7013      	strb	r3, [r2, #0]
          hspi->RxXferCount--;
 80012d0:	8ff3      	ldrh	r3, [r6, #62]	; 0x3e
 80012d2:	3b01      	subs	r3, #1
 80012d4:	b29b      	uxth	r3, r3
 80012d6:	87f3      	strh	r3, [r6, #62]	; 0x3e
          (*(uint8_t *)pRxData++) = *(__IO uint8_t *)&hspi->Instance->DR;
 80012d8:	0013      	movs	r3, r2
 80012da:	3301      	adds	r3, #1
 80012dc:	9300      	str	r3, [sp, #0]
 80012de:	e7d8      	b.n	8001292 <HAL_SPI_TransmitReceive+0x20e>
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80012e0:	2320      	movs	r3, #32
 80012e2:	6623      	str	r3, [r4, #96]	; 0x60
 80012e4:	e748      	b.n	8001178 <HAL_SPI_TransmitReceive+0xf4>
 80012e6:	46c0      	nop			; (mov r8, r8)
 80012e8:	ffffefff 	.word	0xffffefff

080012ec <HAL_SPI_Receive>:
{
 80012ec:	b5f0      	push	{r4, r5, r6, r7, lr}
 80012ee:	001f      	movs	r7, r3
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 80012f0:	2382      	movs	r3, #130	; 0x82
{
 80012f2:	b087      	sub	sp, #28
 80012f4:	9203      	str	r2, [sp, #12]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 80012f6:	6842      	ldr	r2, [r0, #4]
{
 80012f8:	0004      	movs	r4, r0
 80012fa:	000e      	movs	r6, r1
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 80012fc:	005b      	lsls	r3, r3, #1
 80012fe:	429a      	cmp	r2, r3
 8001300:	d10f      	bne.n	8001322 <HAL_SPI_Receive+0x36>
 8001302:	6883      	ldr	r3, [r0, #8]
 8001304:	2b00      	cmp	r3, #0
 8001306:	d10c      	bne.n	8001322 <HAL_SPI_Receive+0x36>
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 8001308:	0003      	movs	r3, r0
 800130a:	2204      	movs	r2, #4
 800130c:	335d      	adds	r3, #93	; 0x5d
 800130e:	701a      	strb	r2, [r3, #0]
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 8001310:	9700      	str	r7, [sp, #0]
 8001312:	9b03      	ldr	r3, [sp, #12]
 8001314:	000a      	movs	r2, r1
 8001316:	f7ff feb5 	bl	8001084 <HAL_SPI_TransmitReceive>
 800131a:	0005      	movs	r5, r0
}
 800131c:	0028      	movs	r0, r5
 800131e:	b007      	add	sp, #28
 8001320:	bdf0      	pop	{r4, r5, r6, r7, pc}
  __HAL_LOCK(hspi);
 8001322:	0023      	movs	r3, r4
 8001324:	335c      	adds	r3, #92	; 0x5c
 8001326:	9305      	str	r3, [sp, #20]
 8001328:	781b      	ldrb	r3, [r3, #0]
 800132a:	2502      	movs	r5, #2
 800132c:	2b01      	cmp	r3, #1
 800132e:	d0f5      	beq.n	800131c <HAL_SPI_Receive+0x30>
 8001330:	2301      	movs	r3, #1
 8001332:	9a05      	ldr	r2, [sp, #20]
 8001334:	7013      	strb	r3, [r2, #0]
  tickstart = HAL_GetTick();
 8001336:	f7fe ffa7 	bl	8000288 <HAL_GetTick>
  if (hspi->State != HAL_SPI_STATE_READY)
 800133a:	0022      	movs	r2, r4
  tickstart = HAL_GetTick();
 800133c:	9004      	str	r0, [sp, #16]
  if (hspi->State != HAL_SPI_STATE_READY)
 800133e:	325d      	adds	r2, #93	; 0x5d
 8001340:	7813      	ldrb	r3, [r2, #0]
 8001342:	b2db      	uxtb	r3, r3
 8001344:	2b01      	cmp	r3, #1
 8001346:	d15d      	bne.n	8001404 <HAL_SPI_Receive+0x118>
    errorcode = HAL_ERROR;
 8001348:	001d      	movs	r5, r3
  if ((pData == NULL) || (Size == 0U))
 800134a:	2e00      	cmp	r6, #0
 800134c:	d05a      	beq.n	8001404 <HAL_SPI_Receive+0x118>
 800134e:	9b03      	ldr	r3, [sp, #12]
 8001350:	2b00      	cmp	r3, #0
 8001352:	d057      	beq.n	8001404 <HAL_SPI_Receive+0x118>
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 8001354:	2304      	movs	r3, #4
  hspi->RxXferSize  = Size;
 8001356:	4669      	mov	r1, sp
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 8001358:	7013      	strb	r3, [r2, #0]
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800135a:	2300      	movs	r3, #0
  hspi->RxXferSize  = Size;
 800135c:	8989      	ldrh	r1, [r1, #12]
 800135e:	1da2      	adds	r2, r4, #6
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8001360:	6623      	str	r3, [r4, #96]	; 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 8001362:	6426      	str	r6, [r4, #64]	; 0x40
  hspi->RxXferSize  = Size;
 8001364:	87d1      	strh	r1, [r2, #62]	; 0x3e
  hspi->RxXferCount = Size;
 8001366:	4669      	mov	r1, sp
 8001368:	8989      	ldrh	r1, [r1, #12]
 800136a:	3202      	adds	r2, #2
 800136c:	87d1      	strh	r1, [r2, #62]	; 0x3e
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800136e:	22e0      	movs	r2, #224	; 0xe0
 8001370:	68e1      	ldr	r1, [r4, #12]
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 8001372:	63a3      	str	r3, [r4, #56]	; 0x38
  hspi->TxXferSize  = 0U;
 8001374:	87a3      	strh	r3, [r4, #60]	; 0x3c
  hspi->TxXferCount = 0U;
 8001376:	87e3      	strh	r3, [r4, #62]	; 0x3e
  hspi->RxISR       = NULL;
 8001378:	64e3      	str	r3, [r4, #76]	; 0x4c
  hspi->TxISR       = NULL;
 800137a:	6523      	str	r3, [r4, #80]	; 0x50
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800137c:	00d2      	lsls	r2, r2, #3
 800137e:	6823      	ldr	r3, [r4, #0]
 8001380:	4291      	cmp	r1, r2
 8001382:	d92a      	bls.n	80013da <HAL_SPI_Receive+0xee>
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8001384:	685a      	ldr	r2, [r3, #4]
 8001386:	4836      	ldr	r0, [pc, #216]	; (8001460 <HAL_SPI_Receive+0x174>)
 8001388:	4002      	ands	r2, r0
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 800138a:	605a      	str	r2, [r3, #4]
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800138c:	2380      	movs	r3, #128	; 0x80
 800138e:	68a2      	ldr	r2, [r4, #8]
 8001390:	021b      	lsls	r3, r3, #8
 8001392:	429a      	cmp	r2, r3
 8001394:	d104      	bne.n	80013a0 <HAL_SPI_Receive+0xb4>
    SPI_1LINE_RX(hspi);
 8001396:	6822      	ldr	r2, [r4, #0]
 8001398:	4832      	ldr	r0, [pc, #200]	; (8001464 <HAL_SPI_Receive+0x178>)
 800139a:	6813      	ldr	r3, [r2, #0]
 800139c:	4003      	ands	r3, r0
 800139e:	6013      	str	r3, [r2, #0]
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80013a0:	2340      	movs	r3, #64	; 0x40
 80013a2:	6822      	ldr	r2, [r4, #0]
 80013a4:	6810      	ldr	r0, [r2, #0]
 80013a6:	4218      	tst	r0, r3
 80013a8:	d102      	bne.n	80013b0 <HAL_SPI_Receive+0xc4>
    __HAL_SPI_ENABLE(hspi);
 80013aa:	6810      	ldr	r0, [r2, #0]
 80013ac:	4303      	orrs	r3, r0
 80013ae:	6013      	str	r3, [r2, #0]
  if (hspi->Init.DataSize <= SPI_DATASIZE_8BIT)
 80013b0:	23e0      	movs	r3, #224	; 0xe0
 80013b2:	0025      	movs	r5, r4
 80013b4:	00db      	lsls	r3, r3, #3
 80013b6:	3508      	adds	r5, #8
 80013b8:	4299      	cmp	r1, r3
 80013ba:	d83f      	bhi.n	800143c <HAL_SPI_Receive+0x150>
    while (hspi->RxXferCount > 0U)
 80013bc:	8feb      	ldrh	r3, [r5, #62]	; 0x3e
 80013be:	2b00      	cmp	r3, #0
 80013c0:	d110      	bne.n	80013e4 <HAL_SPI_Receive+0xf8>
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80013c2:	9a04      	ldr	r2, [sp, #16]
 80013c4:	0039      	movs	r1, r7
 80013c6:	0020      	movs	r0, r4
 80013c8:	f7ff fcea 	bl	8000da0 <SPI_EndRxTransaction>
 80013cc:	2800      	cmp	r0, #0
 80013ce:	d144      	bne.n	800145a <HAL_SPI_Receive+0x16e>
  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80013d0:	6e25      	ldr	r5, [r4, #96]	; 0x60
 80013d2:	1e6b      	subs	r3, r5, #1
 80013d4:	419d      	sbcs	r5, r3
    errorcode = HAL_BUSY;
 80013d6:	b2ed      	uxtb	r5, r5
 80013d8:	e014      	b.n	8001404 <HAL_SPI_Receive+0x118>
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 80013da:	2280      	movs	r2, #128	; 0x80
 80013dc:	6858      	ldr	r0, [r3, #4]
 80013de:	0152      	lsls	r2, r2, #5
 80013e0:	4302      	orrs	r2, r0
 80013e2:	e7d2      	b.n	800138a <HAL_SPI_Receive+0x9e>
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 80013e4:	2101      	movs	r1, #1
 80013e6:	6823      	ldr	r3, [r4, #0]
 80013e8:	689a      	ldr	r2, [r3, #8]
 80013ea:	420a      	tst	r2, r1
 80013ec:	d007      	beq.n	80013fe <HAL_SPI_Receive+0x112>
        (* (uint8_t *)pData) = *(__IO uint8_t *)&hspi->Instance->DR;
 80013ee:	7b1b      	ldrb	r3, [r3, #12]
 80013f0:	7033      	strb	r3, [r6, #0]
        hspi->RxXferCount--;
 80013f2:	8feb      	ldrh	r3, [r5, #62]	; 0x3e
        pData += sizeof(uint8_t);
 80013f4:	1876      	adds	r6, r6, r1
        hspi->RxXferCount--;
 80013f6:	3b01      	subs	r3, #1
 80013f8:	b29b      	uxth	r3, r3
 80013fa:	87eb      	strh	r3, [r5, #62]	; 0x3e
 80013fc:	e7de      	b.n	80013bc <HAL_SPI_Receive+0xd0>
        if ((Timeout == 0U) || ((Timeout != HAL_MAX_DELAY) && ((HAL_GetTick() - tickstart) >=  Timeout)))
 80013fe:	2f00      	cmp	r7, #0
 8001400:	d107      	bne.n	8001412 <HAL_SPI_Receive+0x126>
          errorcode = HAL_TIMEOUT;
 8001402:	2503      	movs	r5, #3
  hspi->State = HAL_SPI_STATE_READY;
 8001404:	2301      	movs	r3, #1
 8001406:	345d      	adds	r4, #93	; 0x5d
 8001408:	7023      	strb	r3, [r4, #0]
  __HAL_UNLOCK(hspi);
 800140a:	2300      	movs	r3, #0
 800140c:	9a05      	ldr	r2, [sp, #20]
 800140e:	7013      	strb	r3, [r2, #0]
  return errorcode;
 8001410:	e784      	b.n	800131c <HAL_SPI_Receive+0x30>
        if ((Timeout == 0U) || ((Timeout != HAL_MAX_DELAY) && ((HAL_GetTick() - tickstart) >=  Timeout)))
 8001412:	1c7b      	adds	r3, r7, #1
 8001414:	d0d2      	beq.n	80013bc <HAL_SPI_Receive+0xd0>
 8001416:	f7fe ff37 	bl	8000288 <HAL_GetTick>
 800141a:	9b04      	ldr	r3, [sp, #16]
 800141c:	1ac0      	subs	r0, r0, r3
 800141e:	4287      	cmp	r7, r0
 8001420:	d8cc      	bhi.n	80013bc <HAL_SPI_Receive+0xd0>
 8001422:	e7ee      	b.n	8001402 <HAL_SPI_Receive+0x116>
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8001424:	2101      	movs	r1, #1
 8001426:	6823      	ldr	r3, [r4, #0]
 8001428:	689a      	ldr	r2, [r3, #8]
 800142a:	420a      	tst	r2, r1
 800142c:	d00a      	beq.n	8001444 <HAL_SPI_Receive+0x158>
        *((uint16_t *)pData) = hspi->Instance->DR;
 800142e:	68db      	ldr	r3, [r3, #12]
 8001430:	8033      	strh	r3, [r6, #0]
        hspi->RxXferCount--;
 8001432:	8feb      	ldrh	r3, [r5, #62]	; 0x3e
        pData += sizeof(uint16_t);
 8001434:	3602      	adds	r6, #2
        hspi->RxXferCount--;
 8001436:	3b01      	subs	r3, #1
 8001438:	b29b      	uxth	r3, r3
 800143a:	87eb      	strh	r3, [r5, #62]	; 0x3e
    while (hspi->RxXferCount > 0U)
 800143c:	8feb      	ldrh	r3, [r5, #62]	; 0x3e
 800143e:	2b00      	cmp	r3, #0
 8001440:	d1f0      	bne.n	8001424 <HAL_SPI_Receive+0x138>
 8001442:	e7be      	b.n	80013c2 <HAL_SPI_Receive+0xd6>
        if ((Timeout == 0U) || ((Timeout != HAL_MAX_DELAY) && ((HAL_GetTick() - tickstart) >=  Timeout)))
 8001444:	2f00      	cmp	r7, #0
 8001446:	d0dc      	beq.n	8001402 <HAL_SPI_Receive+0x116>
 8001448:	1c7b      	adds	r3, r7, #1
 800144a:	d0f7      	beq.n	800143c <HAL_SPI_Receive+0x150>
 800144c:	f7fe ff1c 	bl	8000288 <HAL_GetTick>
 8001450:	9b04      	ldr	r3, [sp, #16]
 8001452:	1ac0      	subs	r0, r0, r3
 8001454:	4287      	cmp	r7, r0
 8001456:	d8f1      	bhi.n	800143c <HAL_SPI_Receive+0x150>
 8001458:	e7d3      	b.n	8001402 <HAL_SPI_Receive+0x116>
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800145a:	2320      	movs	r3, #32
 800145c:	6623      	str	r3, [r4, #96]	; 0x60
 800145e:	e7b7      	b.n	80013d0 <HAL_SPI_Receive+0xe4>
 8001460:	ffffefff 	.word	0xffffefff
 8001464:	ffffbfff 	.word	0xffffbfff

08001468 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8001468:	b570      	push	{r4, r5, r6, lr}
 800146a:	0004      	movs	r4, r0
   *  set the M bits according to huart->Init.WordLength value
   *  set PCE and PS bits according to huart->Init.Parity value
   *  set TE and RE bits according to huart->Init.Mode value
   *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
  MODIFY_REG(huart->Instance->CR1, UART_CR1_FIELDS, tmpreg);
 800146c:	6805      	ldr	r5, [r0, #0]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800146e:	69c2      	ldr	r2, [r0, #28]
 8001470:	6883      	ldr	r3, [r0, #8]
 8001472:	6900      	ldr	r0, [r0, #16]
  MODIFY_REG(huart->Instance->CR1, UART_CR1_FIELDS, tmpreg);
 8001474:	6829      	ldr	r1, [r5, #0]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8001476:	4303      	orrs	r3, r0
 8001478:	6960      	ldr	r0, [r4, #20]
 800147a:	4303      	orrs	r3, r0
  MODIFY_REG(huart->Instance->CR1, UART_CR1_FIELDS, tmpreg);
 800147c:	4835      	ldr	r0, [pc, #212]	; (8001554 <UART_SetConfig+0xec>)
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800147e:	4313      	orrs	r3, r2
  MODIFY_REG(huart->Instance->CR1, UART_CR1_FIELDS, tmpreg);
 8001480:	4001      	ands	r1, r0
 8001482:	430b      	orrs	r3, r1
 8001484:	602b      	str	r3, [r5, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
   * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8001486:	686b      	ldr	r3, [r5, #4]
 8001488:	4933      	ldr	r1, [pc, #204]	; (8001558 <UART_SetConfig+0xf0>)
  /* Configure
   * - UART HardWare Flow Control: set CTSE and RTSE bits according
   *   to huart->Init.HwFlowCtl value
   * - one-bit sampling method versus three samples' majority rule according
   *   to huart->Init.OneBitSampling */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl | huart->Init.OneBitSampling ;
 800148a:	6a20      	ldr	r0, [r4, #32]
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800148c:	400b      	ands	r3, r1
 800148e:	68e1      	ldr	r1, [r4, #12]
 8001490:	430b      	orrs	r3, r1
 8001492:	606b      	str	r3, [r5, #4]
  tmpreg = (uint32_t)huart->Init.HwFlowCtl | huart->Init.OneBitSampling ;
 8001494:	69a3      	ldr	r3, [r4, #24]
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE | USART_CR3_ONEBIT), tmpreg);
 8001496:	68a9      	ldr	r1, [r5, #8]
  tmpreg = (uint32_t)huart->Init.HwFlowCtl | huart->Init.OneBitSampling ;
 8001498:	4303      	orrs	r3, r0
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE | USART_CR3_ONEBIT), tmpreg);
 800149a:	4830      	ldr	r0, [pc, #192]	; (800155c <UART_SetConfig+0xf4>)
 800149c:	4001      	ands	r1, r0
 800149e:	430b      	orrs	r3, r1

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80014a0:	2103      	movs	r1, #3
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE | USART_CR3_ONEBIT), tmpreg);
 80014a2:	60ab      	str	r3, [r5, #8]
  UART_GETCLOCKSOURCE(huart, clocksource);
 80014a4:	4b2e      	ldr	r3, [pc, #184]	; (8001560 <UART_SetConfig+0xf8>)
 80014a6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80014a8:	400b      	ands	r3, r1
 80014aa:	492e      	ldr	r1, [pc, #184]	; (8001564 <UART_SetConfig+0xfc>)
 80014ac:	5cc8      	ldrb	r0, [r1, r3]
  
  /* Check UART Over Sampling to set Baud Rate Register */
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80014ae:	2380      	movs	r3, #128	; 0x80
 80014b0:	021b      	lsls	r3, r3, #8
 80014b2:	429a      	cmp	r2, r3
 80014b4:	d12c      	bne.n	8001510 <UART_SetConfig+0xa8>
  {
    switch (clocksource)
 80014b6:	2808      	cmp	r0, #8
 80014b8:	d827      	bhi.n	800150a <UART_SetConfig+0xa2>
 80014ba:	f7fe fe25 	bl	8000108 <__gnu_thumb1_case_uqi>
 80014be:	2605      	.short	0x2605
 80014c0:	261e260b 	.word	0x261e260b
 80014c4:	2626      	.short	0x2626
 80014c6:	21          	.byte	0x21
 80014c7:	00          	.byte	0x00
    {
      case UART_CLOCKSOURCE_PCLK1:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate));
 80014c8:	f7ff fb48 	bl	8000b5c <HAL_RCC_GetPCLK1Freq>
        break;
      case UART_CLOCKSOURCE_HSI:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HSI_VALUE, huart->Init.BaudRate));
        break;
      case UART_CLOCKSOURCE_SYSCLK:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate));
 80014cc:	6863      	ldr	r3, [r4, #4]
 80014ce:	0040      	lsls	r0, r0, #1
 80014d0:	085b      	lsrs	r3, r3, #1
 80014d2:	e002      	b.n	80014da <UART_SetConfig+0x72>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HSI_VALUE, huart->Init.BaudRate));
 80014d4:	6863      	ldr	r3, [r4, #4]
 80014d6:	0858      	lsrs	r0, r3, #1
 80014d8:	4b23      	ldr	r3, [pc, #140]	; (8001568 <UART_SetConfig+0x100>)
        break;
      case UART_CLOCKSOURCE_LSE:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(LSE_VALUE, huart->Init.BaudRate));
 80014da:	18c0      	adds	r0, r0, r3
 80014dc:	6861      	ldr	r1, [r4, #4]
 80014de:	f7fe fe1d 	bl	800011c <__udivsi3>
 80014e2:	b283      	uxth	r3, r0
  HAL_StatusTypeDef ret               = HAL_OK;
 80014e4:	2000      	movs	r0, #0
      default:
        ret = HAL_ERROR;
        break;
    }

    brrtemp = usartdiv & 0xFFF0U;
 80014e6:	220f      	movs	r2, #15
 80014e8:	0019      	movs	r1, r3
 80014ea:	4391      	bics	r1, r2
 80014ec:	000a      	movs	r2, r1
    brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80014ee:	071b      	lsls	r3, r3, #28
    huart->Instance->BRR = brrtemp;
 80014f0:	6821      	ldr	r1, [r4, #0]
    brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80014f2:	0f5b      	lsrs	r3, r3, #29
    huart->Instance->BRR = brrtemp;
 80014f4:	4313      	orrs	r3, r2
 80014f6:	60cb      	str	r3, [r1, #12]
    }
  }

  return ret;

}
 80014f8:	bd70      	pop	{r4, r5, r6, pc}
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate));
 80014fa:	f7ff fa61 	bl	80009c0 <HAL_RCC_GetSysClockFreq>
 80014fe:	e7e5      	b.n	80014cc <UART_SetConfig+0x64>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(LSE_VALUE, huart->Init.BaudRate));
 8001500:	6863      	ldr	r3, [r4, #4]
 8001502:	0858      	lsrs	r0, r3, #1
 8001504:	2380      	movs	r3, #128	; 0x80
 8001506:	025b      	lsls	r3, r3, #9
 8001508:	e7e7      	b.n	80014da <UART_SetConfig+0x72>
        ret = HAL_ERROR;
 800150a:	2001      	movs	r0, #1
  uint16_t usartdiv                   = 0x0000U;
 800150c:	2300      	movs	r3, #0
 800150e:	e7ea      	b.n	80014e6 <UART_SetConfig+0x7e>
    switch (clocksource)
 8001510:	2808      	cmp	r0, #8
 8001512:	d81d      	bhi.n	8001550 <UART_SetConfig+0xe8>
 8001514:	f7fe fdf8 	bl	8000108 <__gnu_thumb1_case_uqi>
 8001518:	1c0a1c05 	.word	0x1c0a1c05
 800151c:	1c1c1c14 	.word	0x1c1c1c14
 8001520:	17          	.byte	0x17
 8001521:	00          	.byte	0x00
        huart->Instance->BRR = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate));
 8001522:	f7ff fb1b 	bl	8000b5c <HAL_RCC_GetPCLK1Freq>
        huart->Instance->BRR = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate));
 8001526:	6861      	ldr	r1, [r4, #4]
 8001528:	084b      	lsrs	r3, r1, #1
 800152a:	e002      	b.n	8001532 <UART_SetConfig+0xca>
        huart->Instance->BRR = (uint16_t)(UART_DIV_SAMPLING16(HSI_VALUE, huart->Init.BaudRate));
 800152c:	6861      	ldr	r1, [r4, #4]
 800152e:	4b0f      	ldr	r3, [pc, #60]	; (800156c <UART_SetConfig+0x104>)
 8001530:	0848      	lsrs	r0, r1, #1
        huart->Instance->BRR = (uint16_t)(UART_DIV_SAMPLING16(LSE_VALUE, huart->Init.BaudRate));
 8001532:	18c0      	adds	r0, r0, r3
 8001534:	f7fe fdf2 	bl	800011c <__udivsi3>
 8001538:	b280      	uxth	r0, r0
 800153a:	60e8      	str	r0, [r5, #12]
  HAL_StatusTypeDef ret               = HAL_OK;
 800153c:	2000      	movs	r0, #0
        break;
 800153e:	e7db      	b.n	80014f8 <UART_SetConfig+0x90>
        huart->Instance->BRR = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate));
 8001540:	f7ff fa3e 	bl	80009c0 <HAL_RCC_GetSysClockFreq>
 8001544:	e7ef      	b.n	8001526 <UART_SetConfig+0xbe>
        huart->Instance->BRR = (uint16_t)(UART_DIV_SAMPLING16(LSE_VALUE, huart->Init.BaudRate));
 8001546:	2380      	movs	r3, #128	; 0x80
 8001548:	6861      	ldr	r1, [r4, #4]
 800154a:	021b      	lsls	r3, r3, #8
 800154c:	0848      	lsrs	r0, r1, #1
 800154e:	e7f0      	b.n	8001532 <UART_SetConfig+0xca>
        ret = HAL_ERROR;
 8001550:	2001      	movs	r0, #1
 8001552:	e7d1      	b.n	80014f8 <UART_SetConfig+0x90>
 8001554:	ffff69f3 	.word	0xffff69f3
 8001558:	ffffcfff 	.word	0xffffcfff
 800155c:	fffff4ff 	.word	0xfffff4ff
 8001560:	40021000 	.word	0x40021000
 8001564:	08002cb0 	.word	0x08002cb0
 8001568:	00f42400 	.word	0x00f42400
 800156c:	007a1200 	.word	0x007a1200

08001570 <UART_AdvFeatureConfig>:
{
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8001570:	6a43      	ldr	r3, [r0, #36]	; 0x24
{
 8001572:	b530      	push	{r4, r5, lr}
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8001574:	07da      	lsls	r2, r3, #31
 8001576:	d506      	bpl.n	8001586 <UART_AdvFeatureConfig+0x16>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8001578:	6801      	ldr	r1, [r0, #0]
 800157a:	4c28      	ldr	r4, [pc, #160]	; (800161c <UART_AdvFeatureConfig+0xac>)
 800157c:	684a      	ldr	r2, [r1, #4]
 800157e:	4022      	ands	r2, r4
 8001580:	6a84      	ldr	r4, [r0, #40]	; 0x28
 8001582:	4322      	orrs	r2, r4
 8001584:	604a      	str	r2, [r1, #4]
  }

  /* if required, configure RX pin active level inversion */
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8001586:	079a      	lsls	r2, r3, #30
 8001588:	d506      	bpl.n	8001598 <UART_AdvFeatureConfig+0x28>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800158a:	6801      	ldr	r1, [r0, #0]
 800158c:	4c24      	ldr	r4, [pc, #144]	; (8001620 <UART_AdvFeatureConfig+0xb0>)
 800158e:	684a      	ldr	r2, [r1, #4]
 8001590:	4022      	ands	r2, r4
 8001592:	6ac4      	ldr	r4, [r0, #44]	; 0x2c
 8001594:	4322      	orrs	r2, r4
 8001596:	604a      	str	r2, [r1, #4]
  }

  /* if required, configure data inversion */
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8001598:	075a      	lsls	r2, r3, #29
 800159a:	d506      	bpl.n	80015aa <UART_AdvFeatureConfig+0x3a>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800159c:	6801      	ldr	r1, [r0, #0]
 800159e:	4c21      	ldr	r4, [pc, #132]	; (8001624 <UART_AdvFeatureConfig+0xb4>)
 80015a0:	684a      	ldr	r2, [r1, #4]
 80015a2:	4022      	ands	r2, r4
 80015a4:	6b04      	ldr	r4, [r0, #48]	; 0x30
 80015a6:	4322      	orrs	r2, r4
 80015a8:	604a      	str	r2, [r1, #4]
  }

  /* if required, configure RX/TX pins swap */
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80015aa:	071a      	lsls	r2, r3, #28
 80015ac:	d506      	bpl.n	80015bc <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80015ae:	6801      	ldr	r1, [r0, #0]
 80015b0:	4c1d      	ldr	r4, [pc, #116]	; (8001628 <UART_AdvFeatureConfig+0xb8>)
 80015b2:	684a      	ldr	r2, [r1, #4]
 80015b4:	4022      	ands	r2, r4
 80015b6:	6b44      	ldr	r4, [r0, #52]	; 0x34
 80015b8:	4322      	orrs	r2, r4
 80015ba:	604a      	str	r2, [r1, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80015bc:	06da      	lsls	r2, r3, #27
 80015be:	d506      	bpl.n	80015ce <UART_AdvFeatureConfig+0x5e>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80015c0:	6801      	ldr	r1, [r0, #0]
 80015c2:	4c1a      	ldr	r4, [pc, #104]	; (800162c <UART_AdvFeatureConfig+0xbc>)
 80015c4:	688a      	ldr	r2, [r1, #8]
 80015c6:	4022      	ands	r2, r4
 80015c8:	6b84      	ldr	r4, [r0, #56]	; 0x38
 80015ca:	4322      	orrs	r2, r4
 80015cc:	608a      	str	r2, [r1, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80015ce:	069a      	lsls	r2, r3, #26
 80015d0:	d506      	bpl.n	80015e0 <UART_AdvFeatureConfig+0x70>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80015d2:	6801      	ldr	r1, [r0, #0]
 80015d4:	4c16      	ldr	r4, [pc, #88]	; (8001630 <UART_AdvFeatureConfig+0xc0>)
 80015d6:	688a      	ldr	r2, [r1, #8]
 80015d8:	4022      	ands	r2, r4
 80015da:	6bc4      	ldr	r4, [r0, #60]	; 0x3c
 80015dc:	4322      	orrs	r2, r4
 80015de:	608a      	str	r2, [r1, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80015e0:	065a      	lsls	r2, r3, #25
 80015e2:	d510      	bpl.n	8001606 <UART_AdvFeatureConfig+0x96>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80015e4:	6801      	ldr	r1, [r0, #0]
 80015e6:	4d13      	ldr	r5, [pc, #76]	; (8001634 <UART_AdvFeatureConfig+0xc4>)
 80015e8:	684a      	ldr	r2, [r1, #4]
 80015ea:	6c04      	ldr	r4, [r0, #64]	; 0x40
 80015ec:	402a      	ands	r2, r5
 80015ee:	4322      	orrs	r2, r4
 80015f0:	604a      	str	r2, [r1, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if(huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80015f2:	2280      	movs	r2, #128	; 0x80
 80015f4:	0352      	lsls	r2, r2, #13
 80015f6:	4294      	cmp	r4, r2
 80015f8:	d105      	bne.n	8001606 <UART_AdvFeatureConfig+0x96>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80015fa:	684a      	ldr	r2, [r1, #4]
 80015fc:	4c0e      	ldr	r4, [pc, #56]	; (8001638 <UART_AdvFeatureConfig+0xc8>)
 80015fe:	4022      	ands	r2, r4
 8001600:	6c44      	ldr	r4, [r0, #68]	; 0x44
 8001602:	4322      	orrs	r2, r4
 8001604:	604a      	str	r2, [r1, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8001606:	061b      	lsls	r3, r3, #24
 8001608:	d506      	bpl.n	8001618 <UART_AdvFeatureConfig+0xa8>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800160a:	6802      	ldr	r2, [r0, #0]
 800160c:	490b      	ldr	r1, [pc, #44]	; (800163c <UART_AdvFeatureConfig+0xcc>)
 800160e:	6853      	ldr	r3, [r2, #4]
 8001610:	400b      	ands	r3, r1
 8001612:	6c81      	ldr	r1, [r0, #72]	; 0x48
 8001614:	430b      	orrs	r3, r1
 8001616:	6053      	str	r3, [r2, #4]
  }
}
 8001618:	bd30      	pop	{r4, r5, pc}
 800161a:	46c0      	nop			; (mov r8, r8)
 800161c:	fffdffff 	.word	0xfffdffff
 8001620:	fffeffff 	.word	0xfffeffff
 8001624:	fffbffff 	.word	0xfffbffff
 8001628:	ffff7fff 	.word	0xffff7fff
 800162c:	ffffefff 	.word	0xffffefff
 8001630:	ffffdfff 	.word	0xffffdfff
 8001634:	ffefffff 	.word	0xffefffff
 8001638:	ff9fffff 	.word	0xff9fffff
 800163c:	fff7ffff 	.word	0xfff7ffff

08001640 <HAL_UART_Init>:
{
 8001640:	b570      	push	{r4, r5, r6, lr}
 8001642:	1e04      	subs	r4, r0, #0
  if(huart == NULL)
 8001644:	d101      	bne.n	800164a <HAL_UART_Init+0xa>
    return HAL_ERROR;
 8001646:	2001      	movs	r0, #1
}
 8001648:	bd70      	pop	{r4, r5, r6, pc}
  if(huart->gState == HAL_UART_STATE_RESET)
 800164a:	0005      	movs	r5, r0
 800164c:	3569      	adds	r5, #105	; 0x69
 800164e:	782b      	ldrb	r3, [r5, #0]
 8001650:	b2db      	uxtb	r3, r3
 8001652:	2b00      	cmp	r3, #0
 8001654:	d104      	bne.n	8001660 <HAL_UART_Init+0x20>
    huart->Lock = HAL_UNLOCKED;
 8001656:	0002      	movs	r2, r0
 8001658:	3268      	adds	r2, #104	; 0x68
 800165a:	7013      	strb	r3, [r2, #0]
    HAL_UART_MspInit(huart);
 800165c:	f000 fd48 	bl	80020f0 <HAL_UART_MspInit>
  huart->gState = HAL_UART_STATE_BUSY;
 8001660:	2324      	movs	r3, #36	; 0x24
  __HAL_UART_DISABLE(huart);
 8001662:	2101      	movs	r1, #1
 8001664:	6822      	ldr	r2, [r4, #0]
  huart->gState = HAL_UART_STATE_BUSY;
 8001666:	702b      	strb	r3, [r5, #0]
  __HAL_UART_DISABLE(huart);
 8001668:	6813      	ldr	r3, [r2, #0]
  if (UART_SetConfig(huart) == HAL_ERROR)
 800166a:	0020      	movs	r0, r4
  __HAL_UART_DISABLE(huart);
 800166c:	438b      	bics	r3, r1
 800166e:	6013      	str	r3, [r2, #0]
  if (UART_SetConfig(huart) == HAL_ERROR)
 8001670:	f7ff fefa 	bl	8001468 <UART_SetConfig>
 8001674:	2801      	cmp	r0, #1
 8001676:	d0e6      	beq.n	8001646 <HAL_UART_Init+0x6>
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8001678:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800167a:	2b00      	cmp	r3, #0
 800167c:	d002      	beq.n	8001684 <HAL_UART_Init+0x44>
    UART_AdvFeatureConfig(huart);
 800167e:	0020      	movs	r0, r4
 8001680:	f7ff ff76 	bl	8001570 <UART_AdvFeatureConfig>
  CLEAR_BIT(huart->Instance->CR2, USART_CR2_CLKEN);
 8001684:	6823      	ldr	r3, [r4, #0]
 8001686:	490b      	ldr	r1, [pc, #44]	; (80016b4 <HAL_UART_Init+0x74>)
 8001688:	685a      	ldr	r2, [r3, #4]
#if !defined(STM32F030x6) && !defined(STM32F030x8)&& !defined(STM32F070xB)&& !defined(STM32F070x6)&& !defined(STM32F030xC)
  uint32_t tickstart = 0U;
#endif /* !defined(STM32F030x6) && !defined(STM32F030x8)&& !defined(STM32F070xB)&& !defined(STM32F070x6)&& !defined(STM32F030xC) */

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800168a:	2000      	movs	r0, #0
  CLEAR_BIT(huart->Instance->CR2, USART_CR2_CLKEN);
 800168c:	400a      	ands	r2, r1
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_HDSEL);
 800168e:	2108      	movs	r1, #8
  CLEAR_BIT(huart->Instance->CR2, USART_CR2_CLKEN);
 8001690:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_HDSEL);
 8001692:	689a      	ldr	r2, [r3, #8]
 8001694:	438a      	bics	r2, r1
 8001696:	609a      	str	r2, [r3, #8]
  __HAL_UART_ENABLE(huart);
 8001698:	2201      	movs	r2, #1
 800169a:	6819      	ldr	r1, [r3, #0]
 800169c:	430a      	orrs	r2, r1
 800169e:	601a      	str	r2, [r3, #0]
  }
#endif /* !defined(STM32F030x6) && !defined(STM32F030x8)&& !defined(STM32F070xB)&& !defined(STM32F070x6)&& !defined(STM32F030xC) */

  /* Initialize the UART State */
  huart->gState  = HAL_UART_STATE_READY;
  huart->RxState = HAL_UART_STATE_READY;
 80016a0:	0022      	movs	r2, r4
  huart->gState  = HAL_UART_STATE_READY;
 80016a2:	2320      	movs	r3, #32
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80016a4:	66e0      	str	r0, [r4, #108]	; 0x6c
  huart->RxState = HAL_UART_STATE_READY;
 80016a6:	326a      	adds	r2, #106	; 0x6a

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80016a8:	3468      	adds	r4, #104	; 0x68
  huart->gState  = HAL_UART_STATE_READY;
 80016aa:	702b      	strb	r3, [r5, #0]
  huart->RxState = HAL_UART_STATE_READY;
 80016ac:	7013      	strb	r3, [r2, #0]
  __HAL_UNLOCK(huart);
 80016ae:	7020      	strb	r0, [r4, #0]
  return (UART_CheckIdleState(huart));
 80016b0:	e7ca      	b.n	8001648 <HAL_UART_Init+0x8>
 80016b2:	46c0      	nop			; (mov r8, r8)
 80016b4:	fffff7ff 	.word	0xfffff7ff

080016b8 <WIZCHIP_READ>:

#if   (_WIZCHIP_ == 5500)
////////////////////////////////////////////////////

uint8_t  WIZCHIP_READ(uint32_t AddrSel)
{
 80016b8:	b573      	push	{r0, r1, r4, r5, r6, lr}
 80016ba:	0005      	movs	r5, r0
   uint8_t ret;
   uint8_t spi_data[3];

   WIZCHIP_CRITICAL_ENTER();
 80016bc:	4c12      	ldr	r4, [pc, #72]	; (8001708 <WIZCHIP_READ+0x50>)
 80016be:	0a2e      	lsrs	r6, r5, #8
 80016c0:	68a3      	ldr	r3, [r4, #8]
 80016c2:	4798      	blx	r3
   WIZCHIP.CS._select();
 80016c4:	6923      	ldr	r3, [r4, #16]
 80016c6:	4798      	blx	r3

   AddrSel |= (_W5500_SPI_READ_ | _W5500_SPI_VDM_OP_);

   if(!WIZCHIP.IF.SPI._read_burst || !WIZCHIP.IF.SPI._write_burst) 	// byte operation
 80016c8:	6a22      	ldr	r2, [r4, #32]
 80016ca:	0c2b      	lsrs	r3, r5, #16
 80016cc:	2a00      	cmp	r2, #0
 80016ce:	d002      	beq.n	80016d6 <WIZCHIP_READ+0x1e>
 80016d0:	6a62      	ldr	r2, [r4, #36]	; 0x24
 80016d2:	2a00      	cmp	r2, #0
 80016d4:	d111      	bne.n	80016fa <WIZCHIP_READ+0x42>
   {
	   WIZCHIP.IF.SPI._write_byte((AddrSel & 0x00FF0000) >> 16);
 80016d6:	b2d8      	uxtb	r0, r3
 80016d8:	69e3      	ldr	r3, [r4, #28]
 80016da:	4798      	blx	r3
		WIZCHIP.IF.SPI._write_byte((AddrSel & 0x0000FF00) >>  8);
 80016dc:	b2f0      	uxtb	r0, r6
 80016de:	69e3      	ldr	r3, [r4, #28]
 80016e0:	4798      	blx	r3
		WIZCHIP.IF.SPI._write_byte((AddrSel & 0x000000FF) >>  0);
 80016e2:	b2e8      	uxtb	r0, r5
 80016e4:	69e3      	ldr	r3, [r4, #28]
 80016e6:	4798      	blx	r3
		spi_data[0] = (AddrSel & 0x00FF0000) >> 16;
		spi_data[1] = (AddrSel & 0x0000FF00) >> 8;
		spi_data[2] = (AddrSel & 0x000000FF) >> 0;
		WIZCHIP.IF.SPI._write_burst(spi_data, 3);
   }
   ret = WIZCHIP.IF.SPI._read_byte();
 80016e8:	69a3      	ldr	r3, [r4, #24]
 80016ea:	4798      	blx	r3
 80016ec:	0005      	movs	r5, r0

   WIZCHIP.CS._deselect();
 80016ee:	6963      	ldr	r3, [r4, #20]
 80016f0:	4798      	blx	r3
   WIZCHIP_CRITICAL_EXIT();
 80016f2:	68e3      	ldr	r3, [r4, #12]
 80016f4:	4798      	blx	r3
   return ret;
}
 80016f6:	0028      	movs	r0, r5
 80016f8:	bd76      	pop	{r1, r2, r4, r5, r6, pc}
		spi_data[0] = (AddrSel & 0x00FF0000) >> 16;
 80016fa:	a801      	add	r0, sp, #4
 80016fc:	7003      	strb	r3, [r0, #0]
		spi_data[1] = (AddrSel & 0x0000FF00) >> 8;
 80016fe:	7046      	strb	r6, [r0, #1]
		spi_data[2] = (AddrSel & 0x000000FF) >> 0;
 8001700:	7085      	strb	r5, [r0, #2]
		WIZCHIP.IF.SPI._write_burst(spi_data, 3);
 8001702:	2103      	movs	r1, #3
 8001704:	4790      	blx	r2
 8001706:	e7ef      	b.n	80016e8 <WIZCHIP_READ+0x30>
 8001708:	20000000 	.word	0x20000000

0800170c <WIZCHIP_WRITE>:

void     WIZCHIP_WRITE(uint32_t AddrSel, uint8_t wb )
{
 800170c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   uint8_t spi_data[4];

   WIZCHIP_CRITICAL_ENTER();
 800170e:	4c13      	ldr	r4, [pc, #76]	; (800175c <WIZCHIP_WRITE+0x50>)
{
 8001710:	0005      	movs	r5, r0
   WIZCHIP_CRITICAL_ENTER();
 8001712:	68a3      	ldr	r3, [r4, #8]
{
 8001714:	000f      	movs	r7, r1
   WIZCHIP_CRITICAL_ENTER();
 8001716:	4798      	blx	r3
   WIZCHIP.CS._select();
 8001718:	6923      	ldr	r3, [r4, #16]
 800171a:	4798      	blx	r3

   AddrSel |= (_W5500_SPI_WRITE_ | _W5500_SPI_VDM_OP_);
 800171c:	2104      	movs	r1, #4

   //if(!WIZCHIP.IF.SPI._read_burst || !WIZCHIP.IF.SPI._write_burst) 	// byte operation
   if(!WIZCHIP.IF.SPI._write_burst) 	// byte operation
 800171e:	6a63      	ldr	r3, [r4, #36]	; 0x24
   AddrSel |= (_W5500_SPI_WRITE_ | _W5500_SPI_VDM_OP_);
 8001720:	430d      	orrs	r5, r1
 8001722:	0c2a      	lsrs	r2, r5, #16
 8001724:	0a2e      	lsrs	r6, r5, #8
   if(!WIZCHIP.IF.SPI._write_burst) 	// byte operation
 8001726:	2b00      	cmp	r3, #0
 8001728:	d110      	bne.n	800174c <WIZCHIP_WRITE+0x40>
   {
		WIZCHIP.IF.SPI._write_byte((AddrSel & 0x00FF0000) >> 16);
 800172a:	b2d0      	uxtb	r0, r2
 800172c:	69e3      	ldr	r3, [r4, #28]
 800172e:	4798      	blx	r3
		WIZCHIP.IF.SPI._write_byte((AddrSel & 0x0000FF00) >>  8);
 8001730:	b2f0      	uxtb	r0, r6
 8001732:	69e3      	ldr	r3, [r4, #28]
 8001734:	4798      	blx	r3
		WIZCHIP.IF.SPI._write_byte((AddrSel & 0x000000FF) >>  0);
 8001736:	b2e8      	uxtb	r0, r5
 8001738:	69e3      	ldr	r3, [r4, #28]
 800173a:	4798      	blx	r3
		WIZCHIP.IF.SPI._write_byte(wb);
 800173c:	0038      	movs	r0, r7
 800173e:	69e3      	ldr	r3, [r4, #28]
 8001740:	4798      	blx	r3
		spi_data[2] = (AddrSel & 0x000000FF) >> 0;
		spi_data[3] = wb;
		WIZCHIP.IF.SPI._write_burst(spi_data, 4);
   }

   WIZCHIP.CS._deselect();
 8001742:	6963      	ldr	r3, [r4, #20]
 8001744:	4798      	blx	r3
   WIZCHIP_CRITICAL_EXIT();
 8001746:	68e3      	ldr	r3, [r4, #12]
 8001748:	4798      	blx	r3
}
 800174a:	bdf7      	pop	{r0, r1, r2, r4, r5, r6, r7, pc}
		spi_data[0] = (AddrSel & 0x00FF0000) >> 16;
 800174c:	a801      	add	r0, sp, #4
 800174e:	7002      	strb	r2, [r0, #0]
		spi_data[1] = (AddrSel & 0x0000FF00) >> 8;
 8001750:	7046      	strb	r6, [r0, #1]
		spi_data[2] = (AddrSel & 0x000000FF) >> 0;
 8001752:	7085      	strb	r5, [r0, #2]
		spi_data[3] = wb;
 8001754:	70c7      	strb	r7, [r0, #3]
		WIZCHIP.IF.SPI._write_burst(spi_data, 4);
 8001756:	4798      	blx	r3
 8001758:	e7f3      	b.n	8001742 <WIZCHIP_WRITE+0x36>
 800175a:	46c0      	nop			; (mov r8, r8)
 800175c:	20000000 	.word	0x20000000

08001760 <WIZCHIP_READ_BUF>:
         
void     WIZCHIP_READ_BUF (uint32_t AddrSel, uint8_t* pBuf, uint16_t len)
{
 8001760:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001762:	0006      	movs	r6, r0
   uint8_t spi_data[3];
   uint16_t i;

   WIZCHIP_CRITICAL_ENTER();
 8001764:	4c1a      	ldr	r4, [pc, #104]	; (80017d0 <WIZCHIP_READ_BUF+0x70>)
{
 8001766:	b085      	sub	sp, #20
   WIZCHIP_CRITICAL_ENTER();
 8001768:	68a3      	ldr	r3, [r4, #8]
{
 800176a:	0017      	movs	r7, r2
 800176c:	000d      	movs	r5, r1
   WIZCHIP_CRITICAL_ENTER();
 800176e:	4798      	blx	r3
   WIZCHIP.CS._select();
 8001770:	6923      	ldr	r3, [r4, #16]
 8001772:	4798      	blx	r3
 8001774:	0a33      	lsrs	r3, r6, #8
 8001776:	9301      	str	r3, [sp, #4]

   AddrSel |= (_W5500_SPI_READ_ | _W5500_SPI_VDM_OP_);

   if(!WIZCHIP.IF.SPI._read_burst || !WIZCHIP.IF.SPI._write_burst) 	// byte operation
 8001778:	6a23      	ldr	r3, [r4, #32]
 800177a:	0c32      	lsrs	r2, r6, #16
 800177c:	2b00      	cmp	r3, #0
 800177e:	d002      	beq.n	8001786 <WIZCHIP_READ_BUF+0x26>
 8001780:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8001782:	2b00      	cmp	r3, #0
 8001784:	d117      	bne.n	80017b6 <WIZCHIP_READ_BUF+0x56>
   {
		WIZCHIP.IF.SPI._write_byte((AddrSel & 0x00FF0000) >> 16);
 8001786:	b2d0      	uxtb	r0, r2
 8001788:	69e3      	ldr	r3, [r4, #28]
 800178a:	4798      	blx	r3
		WIZCHIP.IF.SPI._write_byte((AddrSel & 0x0000FF00) >>  8);
 800178c:	466b      	mov	r3, sp
 800178e:	7918      	ldrb	r0, [r3, #4]
 8001790:	69e3      	ldr	r3, [r4, #28]
 8001792:	4798      	blx	r3
		WIZCHIP.IF.SPI._write_byte((AddrSel & 0x000000FF) >>  0);
 8001794:	b2f0      	uxtb	r0, r6
 8001796:	69e3      	ldr	r3, [r4, #28]
 8001798:	4798      	blx	r3
 800179a:	19ef      	adds	r7, r5, r7
		for(i = 0; i < len; i++)
 800179c:	42bd      	cmp	r5, r7
 800179e:	d105      	bne.n	80017ac <WIZCHIP_READ_BUF+0x4c>
		spi_data[2] = (AddrSel & 0x000000FF) >> 0;
		WIZCHIP.IF.SPI._write_burst(spi_data, 3);
		WIZCHIP.IF.SPI._read_burst(pBuf, len);
   }

   WIZCHIP.CS._deselect();
 80017a0:	6963      	ldr	r3, [r4, #20]
 80017a2:	4798      	blx	r3
   WIZCHIP_CRITICAL_EXIT();
 80017a4:	68e3      	ldr	r3, [r4, #12]
 80017a6:	4798      	blx	r3
}
 80017a8:	b005      	add	sp, #20
 80017aa:	bdf0      	pop	{r4, r5, r6, r7, pc}
		   pBuf[i] = WIZCHIP.IF.SPI._read_byte();
 80017ac:	69a3      	ldr	r3, [r4, #24]
 80017ae:	4798      	blx	r3
 80017b0:	7028      	strb	r0, [r5, #0]
 80017b2:	3501      	adds	r5, #1
 80017b4:	e7f2      	b.n	800179c <WIZCHIP_READ_BUF+0x3c>
		spi_data[0] = (AddrSel & 0x00FF0000) >> 16;
 80017b6:	a803      	add	r0, sp, #12
 80017b8:	7002      	strb	r2, [r0, #0]
		spi_data[1] = (AddrSel & 0x0000FF00) >> 8;
 80017ba:	466a      	mov	r2, sp
 80017bc:	7912      	ldrb	r2, [r2, #4]
		spi_data[2] = (AddrSel & 0x000000FF) >> 0;
 80017be:	7086      	strb	r6, [r0, #2]
		spi_data[1] = (AddrSel & 0x0000FF00) >> 8;
 80017c0:	7042      	strb	r2, [r0, #1]
		WIZCHIP.IF.SPI._write_burst(spi_data, 3);
 80017c2:	2103      	movs	r1, #3
 80017c4:	4798      	blx	r3
		WIZCHIP.IF.SPI._read_burst(pBuf, len);
 80017c6:	0039      	movs	r1, r7
 80017c8:	0028      	movs	r0, r5
 80017ca:	6a23      	ldr	r3, [r4, #32]
 80017cc:	4798      	blx	r3
 80017ce:	e7e7      	b.n	80017a0 <WIZCHIP_READ_BUF+0x40>
 80017d0:	20000000 	.word	0x20000000

080017d4 <WIZCHIP_WRITE_BUF>:

void     WIZCHIP_WRITE_BUF(uint32_t AddrSel, uint8_t* pBuf, uint16_t len)
{
 80017d4:	b5f0      	push	{r4, r5, r6, r7, lr}
   uint8_t spi_data[3];
   uint16_t i;

   WIZCHIP_CRITICAL_ENTER();
 80017d6:	4c1b      	ldr	r4, [pc, #108]	; (8001844 <WIZCHIP_WRITE_BUF+0x70>)
{
 80017d8:	b085      	sub	sp, #20
   WIZCHIP_CRITICAL_ENTER();
 80017da:	68a3      	ldr	r3, [r4, #8]
{
 80017dc:	0006      	movs	r6, r0
 80017de:	000d      	movs	r5, r1
 80017e0:	0017      	movs	r7, r2
   WIZCHIP_CRITICAL_ENTER();
 80017e2:	4798      	blx	r3
   WIZCHIP.CS._select();
 80017e4:	6923      	ldr	r3, [r4, #16]
 80017e6:	4798      	blx	r3

   AddrSel |= (_W5500_SPI_WRITE_ | _W5500_SPI_VDM_OP_);
 80017e8:	2004      	movs	r0, #4

   if(!WIZCHIP.IF.SPI._write_burst) 	// byte operation
 80017ea:	6a63      	ldr	r3, [r4, #36]	; 0x24
   AddrSel |= (_W5500_SPI_WRITE_ | _W5500_SPI_VDM_OP_);
 80017ec:	4306      	orrs	r6, r0
 80017ee:	0a31      	lsrs	r1, r6, #8
 80017f0:	0c32      	lsrs	r2, r6, #16
 80017f2:	9101      	str	r1, [sp, #4]
   if(!WIZCHIP.IF.SPI._write_burst) 	// byte operation
 80017f4:	2b00      	cmp	r3, #0
 80017f6:	d117      	bne.n	8001828 <WIZCHIP_WRITE_BUF+0x54>
   {
		WIZCHIP.IF.SPI._write_byte((AddrSel & 0x00FF0000) >> 16);
 80017f8:	b2d0      	uxtb	r0, r2
 80017fa:	69e3      	ldr	r3, [r4, #28]
 80017fc:	4798      	blx	r3
		WIZCHIP.IF.SPI._write_byte((AddrSel & 0x0000FF00) >>  8);
 80017fe:	466b      	mov	r3, sp
 8001800:	7918      	ldrb	r0, [r3, #4]
 8001802:	69e3      	ldr	r3, [r4, #28]
 8001804:	4798      	blx	r3
		WIZCHIP.IF.SPI._write_byte((AddrSel & 0x000000FF) >>  0);
 8001806:	b2f0      	uxtb	r0, r6
 8001808:	69e3      	ldr	r3, [r4, #28]
 800180a:	4798      	blx	r3
 800180c:	19ef      	adds	r7, r5, r7
		for(i = 0; i < len; i++)
 800180e:	42bd      	cmp	r5, r7
 8001810:	d105      	bne.n	800181e <WIZCHIP_WRITE_BUF+0x4a>
		spi_data[2] = (AddrSel & 0x000000FF) >> 0;
		WIZCHIP.IF.SPI._write_burst(spi_data, 3);
		WIZCHIP.IF.SPI._write_burst(pBuf, len);
   }

   WIZCHIP.CS._deselect();
 8001812:	6963      	ldr	r3, [r4, #20]
 8001814:	4798      	blx	r3
   WIZCHIP_CRITICAL_EXIT();
 8001816:	68e3      	ldr	r3, [r4, #12]
 8001818:	4798      	blx	r3
}
 800181a:	b005      	add	sp, #20
 800181c:	bdf0      	pop	{r4, r5, r6, r7, pc}
			WIZCHIP.IF.SPI._write_byte(pBuf[i]);
 800181e:	7828      	ldrb	r0, [r5, #0]
 8001820:	69e3      	ldr	r3, [r4, #28]
 8001822:	4798      	blx	r3
 8001824:	3501      	adds	r5, #1
 8001826:	e7f2      	b.n	800180e <WIZCHIP_WRITE_BUF+0x3a>
		spi_data[0] = (AddrSel & 0x00FF0000) >> 16;
 8001828:	a803      	add	r0, sp, #12
 800182a:	7002      	strb	r2, [r0, #0]
		spi_data[1] = (AddrSel & 0x0000FF00) >> 8;
 800182c:	466a      	mov	r2, sp
 800182e:	7912      	ldrb	r2, [r2, #4]
		spi_data[2] = (AddrSel & 0x000000FF) >> 0;
 8001830:	7086      	strb	r6, [r0, #2]
		spi_data[1] = (AddrSel & 0x0000FF00) >> 8;
 8001832:	7042      	strb	r2, [r0, #1]
		WIZCHIP.IF.SPI._write_burst(spi_data, 3);
 8001834:	2103      	movs	r1, #3
 8001836:	4798      	blx	r3
		WIZCHIP.IF.SPI._write_burst(pBuf, len);
 8001838:	0039      	movs	r1, r7
 800183a:	0028      	movs	r0, r5
 800183c:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800183e:	4798      	blx	r3
 8001840:	e7e7      	b.n	8001812 <WIZCHIP_WRITE_BUF+0x3e>
 8001842:	46c0      	nop			; (mov r8, r8)
 8001844:	20000000 	.word	0x20000000

08001848 <wizchip_cs_deselect>:
 * @brief Default function to deselect chip.
 * @note This function help not to access wrong address. If you do not describe this function or register any functions,
 * null function is called.
 */
//void     wizchip_cs_deselect(void)          {};
void wizchip_cs_deselect(void) { }
 8001848:	4770      	bx	lr

0800184a <wizchip_bus_readdata>:
 * @note This function help not to access wrong address. If you do not describe this function or register any functions,
 * null function is called.
 */
 //M20150601 : Rename the function for integrating with W5300
//uint8_t wizchip_bus_readbyte(uint32_t AddrSel) { return * ((volatile uint8_t *)((ptrdiff_t) AddrSel)); }
iodata_t wizchip_bus_readdata(uint32_t AddrSel) { return * ((volatile iodata_t *)((ptrdiff_t) AddrSel)); }
 800184a:	7800      	ldrb	r0, [r0, #0]
 800184c:	b2c0      	uxtb	r0, r0
 800184e:	4770      	bx	lr

08001850 <wizchip_bus_writedata>:
 * @note This function help not to access wrong address. If you do not describe this function or register any functions,
 * null function is called.
 */
//M20150601 : Rename the function for integrating with W5300
//void     wizchip_bus_writebyte(uint32_t AddrSel, uint8_t wb)  { *((volatile uint8_t*)((ptrdiff_t)AddrSel)) = wb; }
void     wizchip_bus_writedata(uint32_t AddrSel, iodata_t wb)  { *((volatile iodata_t*)((ptrdiff_t)AddrSel)) = wb; }
 8001850:	7001      	strb	r1, [r0, #0]
 8001852:	4770      	bx	lr

08001854 <wizchip_spi_readbyte>:
 * @brief Default function to read in SPI interface.
 * @note This function help not to access wrong address. If you do not describe this function or register any functions,
 * null function is called.
 */
//uint8_t wizchip_spi_readbyte(void)        {return 0;};
uint8_t wizchip_spi_readbyte(void)        {return 0;}
 8001854:	2000      	movs	r0, #0
 8001856:	4770      	bx	lr

08001858 <wizchip_spi_writebyte>:
 * @brief Default function to write in SPI interface.
 * @note This function help not to access wrong address. If you do not describe this function or register any functions,
 * null function is called.
 */
//void     wizchip_spi_writebyte(uint8_t wb) {};
void     wizchip_spi_writebyte(uint8_t wb) {}
 8001858:	4770      	bx	lr

0800185a <wizchip_spi_writeburst>:
 * @brief Default function to burst write in SPI interface.
 * @note This function help not to access wrong address. If you do not describe this function or register any functions,
 * null function is called.
 */
//void     wizchip_spi_writeburst(uint8_t* pBuf, uint16_t len) {};
void     wizchip_spi_writeburst(uint8_t* pBuf, uint16_t len) {}
 800185a:	4770      	bx	lr

0800185c <wizchip_spi_readburst>:
 800185c:	4770      	bx	lr

0800185e <wizchip_cris_enter>:
 800185e:	4770      	bx	lr

08001860 <wizchip_cris_exit>:
 8001860:	4770      	bx	lr

08001862 <wizchip_cs_select>:
 8001862:	4770      	bx	lr

08001864 <reg_wizchip_cs_cbfunc>:
      WIZCHIP.CRIS._exit  = cris_ex;
   }
}

void reg_wizchip_cs_cbfunc(void(*cs_sel)(void), void(*cs_desel)(void))
{
 8001864:	4b06      	ldr	r3, [pc, #24]	; (8001880 <reg_wizchip_cs_cbfunc+0x1c>)
   if(!cs_sel || !cs_desel)
 8001866:	2800      	cmp	r0, #0
 8001868:	d001      	beq.n	800186e <reg_wizchip_cs_cbfunc+0xa>
 800186a:	2900      	cmp	r1, #0
 800186c:	d104      	bne.n	8001878 <reg_wizchip_cs_cbfunc+0x14>
   {
      WIZCHIP.CS._select   = wizchip_cs_select;
 800186e:	4a05      	ldr	r2, [pc, #20]	; (8001884 <reg_wizchip_cs_cbfunc+0x20>)
 8001870:	611a      	str	r2, [r3, #16]
      WIZCHIP.CS._deselect = wizchip_cs_deselect;
 8001872:	4a05      	ldr	r2, [pc, #20]	; (8001888 <reg_wizchip_cs_cbfunc+0x24>)
 8001874:	615a      	str	r2, [r3, #20]
   else
   {
      WIZCHIP.CS._select   = cs_sel;
      WIZCHIP.CS._deselect = cs_desel;
   }
}
 8001876:	4770      	bx	lr
      WIZCHIP.CS._select   = cs_sel;
 8001878:	6118      	str	r0, [r3, #16]
      WIZCHIP.CS._deselect = cs_desel;
 800187a:	6159      	str	r1, [r3, #20]
}
 800187c:	e7fb      	b.n	8001876 <reg_wizchip_cs_cbfunc+0x12>
 800187e:	46c0      	nop			; (mov r8, r8)
 8001880:	20000000 	.word	0x20000000
 8001884:	08001863 	.word	0x08001863
 8001888:	08001849 	.word	0x08001849

0800188c <reg_wizchip_spi_cbfunc>:
   }
}

void reg_wizchip_spi_cbfunc(uint8_t (*spi_rb)(void), void (*spi_wb)(uint8_t wb))
{
   while(!(WIZCHIP.if_mode & _WIZCHIP_IO_MODE_SPI_));
 800188c:	4b08      	ldr	r3, [pc, #32]	; (80018b0 <reg_wizchip_spi_cbfunc+0x24>)
 800188e:	881a      	ldrh	r2, [r3, #0]
 8001890:	0592      	lsls	r2, r2, #22
 8001892:	d400      	bmi.n	8001896 <reg_wizchip_spi_cbfunc+0xa>
 8001894:	e7fe      	b.n	8001894 <reg_wizchip_spi_cbfunc+0x8>
   
   if(!spi_rb || !spi_wb)
 8001896:	2800      	cmp	r0, #0
 8001898:	d001      	beq.n	800189e <reg_wizchip_spi_cbfunc+0x12>
 800189a:	2900      	cmp	r1, #0
 800189c:	d104      	bne.n	80018a8 <reg_wizchip_spi_cbfunc+0x1c>
   {
      WIZCHIP.IF.SPI._read_byte   = wizchip_spi_readbyte;
 800189e:	4a05      	ldr	r2, [pc, #20]	; (80018b4 <reg_wizchip_spi_cbfunc+0x28>)
 80018a0:	619a      	str	r2, [r3, #24]
      WIZCHIP.IF.SPI._write_byte  = wizchip_spi_writebyte;
 80018a2:	4a05      	ldr	r2, [pc, #20]	; (80018b8 <reg_wizchip_spi_cbfunc+0x2c>)
 80018a4:	61da      	str	r2, [r3, #28]
   else
   {
      WIZCHIP.IF.SPI._read_byte   = spi_rb;
      WIZCHIP.IF.SPI._write_byte  = spi_wb;
   }
}
 80018a6:	4770      	bx	lr
      WIZCHIP.IF.SPI._read_byte   = spi_rb;
 80018a8:	6198      	str	r0, [r3, #24]
      WIZCHIP.IF.SPI._write_byte  = spi_wb;
 80018aa:	61d9      	str	r1, [r3, #28]
}
 80018ac:	e7fb      	b.n	80018a6 <reg_wizchip_spi_cbfunc+0x1a>
 80018ae:	46c0      	nop			; (mov r8, r8)
 80018b0:	20000000 	.word	0x20000000
 80018b4:	08001855 	.word	0x08001855
 80018b8:	08001859 	.word	0x08001859

080018bc <reg_wizchip_spiburst_cbfunc>:

// 20140626 Eric Added for SPI burst operations
void reg_wizchip_spiburst_cbfunc(void (*spi_rb)(uint8_t* pBuf, uint16_t len), void (*spi_wb)(uint8_t* pBuf, uint16_t len))
{
   while(!(WIZCHIP.if_mode & _WIZCHIP_IO_MODE_SPI_));
 80018bc:	4b08      	ldr	r3, [pc, #32]	; (80018e0 <reg_wizchip_spiburst_cbfunc+0x24>)
 80018be:	881a      	ldrh	r2, [r3, #0]
 80018c0:	0592      	lsls	r2, r2, #22
 80018c2:	d400      	bmi.n	80018c6 <reg_wizchip_spiburst_cbfunc+0xa>
 80018c4:	e7fe      	b.n	80018c4 <reg_wizchip_spiburst_cbfunc+0x8>

   if(!spi_rb || !spi_wb)
 80018c6:	2800      	cmp	r0, #0
 80018c8:	d001      	beq.n	80018ce <reg_wizchip_spiburst_cbfunc+0x12>
 80018ca:	2900      	cmp	r1, #0
 80018cc:	d104      	bne.n	80018d8 <reg_wizchip_spiburst_cbfunc+0x1c>
   {
      WIZCHIP.IF.SPI._read_burst   = wizchip_spi_readburst;
 80018ce:	4a05      	ldr	r2, [pc, #20]	; (80018e4 <reg_wizchip_spiburst_cbfunc+0x28>)
 80018d0:	621a      	str	r2, [r3, #32]
      WIZCHIP.IF.SPI._write_burst  = wizchip_spi_writeburst;
 80018d2:	4a05      	ldr	r2, [pc, #20]	; (80018e8 <reg_wizchip_spiburst_cbfunc+0x2c>)
 80018d4:	625a      	str	r2, [r3, #36]	; 0x24
   else
   {
      WIZCHIP.IF.SPI._read_burst   = spi_rb;
      WIZCHIP.IF.SPI._write_burst  = spi_wb;
   }
}
 80018d6:	4770      	bx	lr
      WIZCHIP.IF.SPI._read_burst   = spi_rb;
 80018d8:	6218      	str	r0, [r3, #32]
      WIZCHIP.IF.SPI._write_burst  = spi_wb;
 80018da:	6259      	str	r1, [r3, #36]	; 0x24
}
 80018dc:	e7fb      	b.n	80018d6 <reg_wizchip_spiburst_cbfunc+0x1a>
 80018de:	46c0      	nop			; (mov r8, r8)
 80018e0:	20000000 	.word	0x20000000
 80018e4:	0800185d 	.word	0x0800185d
 80018e8:	0800185b 	.word	0x0800185b

080018ec <wizchip_sw_reset>:
   }
   return 0;
}

void wizchip_sw_reset(void)
{
 80018ec:	b5f0      	push	{r4, r5, r6, r7, lr}
#if _WIZCHIP_IO_MODE_  == _WIZCHIP_IO_MODE_BUS_INDIR_
   uint16_t mr = (uint16_t)getMR();
   setMR(mr | MR_IND);
#endif
//
   getSHAR(mac);
 80018ee:	2790      	movs	r7, #144	; 0x90
   getGAR(gw);  getSUBR(sn);  getSIPR(sip);
 80018f0:	2680      	movs	r6, #128	; 0x80
 80018f2:	25a0      	movs	r5, #160	; 0xa0
 80018f4:	24f0      	movs	r4, #240	; 0xf0
{
 80018f6:	b087      	sub	sp, #28
   getSHAR(mac);
 80018f8:	013f      	lsls	r7, r7, #4
 80018fa:	a904      	add	r1, sp, #16
 80018fc:	0038      	movs	r0, r7
   getGAR(gw);  getSUBR(sn);  getSIPR(sip);
 80018fe:	0076      	lsls	r6, r6, #1
   getSHAR(mac);
 8001900:	2206      	movs	r2, #6
 8001902:	f7ff ff2d 	bl	8001760 <WIZCHIP_READ_BUF>
   getGAR(gw);  getSUBR(sn);  getSIPR(sip);
 8001906:	00ed      	lsls	r5, r5, #3
 8001908:	a901      	add	r1, sp, #4
 800190a:	0030      	movs	r0, r6
 800190c:	2204      	movs	r2, #4
 800190e:	f7ff ff27 	bl	8001760 <WIZCHIP_READ_BUF>
 8001912:	0124      	lsls	r4, r4, #4
 8001914:	a902      	add	r1, sp, #8
 8001916:	0028      	movs	r0, r5
 8001918:	2204      	movs	r2, #4
 800191a:	f7ff ff21 	bl	8001760 <WIZCHIP_READ_BUF>
 800191e:	2204      	movs	r2, #4
 8001920:	a903      	add	r1, sp, #12
 8001922:	0020      	movs	r0, r4
 8001924:	f7ff ff1c 	bl	8001760 <WIZCHIP_READ_BUF>
   setMR(MR_RST);
 8001928:	2180      	movs	r1, #128	; 0x80
 800192a:	2000      	movs	r0, #0
 800192c:	f7ff feee 	bl	800170c <WIZCHIP_WRITE>
   getMR(); // for delay
 8001930:	2000      	movs	r0, #0
 8001932:	f7ff fec1 	bl	80016b8 <WIZCHIP_READ>
//A2015051 : For indirect bus mode 
#if _WIZCHIP_IO_MODE_  == _WIZCHIP_IO_MODE_BUS_INDIR_
   setMR(mr | MR_IND);
#endif
//
   setSHAR(mac);
 8001936:	a904      	add	r1, sp, #16
 8001938:	0038      	movs	r0, r7
 800193a:	2206      	movs	r2, #6
 800193c:	f7ff ff4a 	bl	80017d4 <WIZCHIP_WRITE_BUF>
   setGAR(gw);
 8001940:	a901      	add	r1, sp, #4
 8001942:	0030      	movs	r0, r6
 8001944:	2204      	movs	r2, #4
 8001946:	f7ff ff45 	bl	80017d4 <WIZCHIP_WRITE_BUF>
   setSUBR(sn);
 800194a:	a902      	add	r1, sp, #8
 800194c:	0028      	movs	r0, r5
 800194e:	2204      	movs	r2, #4
 8001950:	f7ff ff40 	bl	80017d4 <WIZCHIP_WRITE_BUF>
   setSIPR(sip);
 8001954:	2204      	movs	r2, #4
 8001956:	a903      	add	r1, sp, #12
 8001958:	0020      	movs	r0, r4
 800195a:	f7ff ff3b 	bl	80017d4 <WIZCHIP_WRITE_BUF>
}
 800195e:	b007      	add	sp, #28
 8001960:	bdf0      	pop	{r4, r5, r6, r7, pc}
	...

08001964 <wizchip_init>:

int8_t wizchip_init(uint8_t* txsize, uint8_t* rxsize)
{
 8001964:	b570      	push	{r4, r5, r6, lr}
 8001966:	0005      	movs	r5, r0
 8001968:	000c      	movs	r4, r1
   int8_t i;
#if _WIZCHIP_ < W5200
   int8_t j;
#endif
   int8_t tmp = 0;
   wizchip_sw_reset();
 800196a:	f7ff ffbf 	bl	80018ec <wizchip_sw_reset>
   if(txsize)
 800196e:	2d00      	cmp	r5, #0
 8001970:	d103      	bne.n	800197a <wizchip_init+0x16>
        }

    #endif
   }

   if(rxsize)
 8001972:	2c00      	cmp	r4, #0
 8001974:	d11b      	bne.n	80019ae <wizchip_init+0x4a>
            setSn_RXBUF_SIZE(i, rxsize[i]);
        #endif
        }
    #endif
   }
   return 0;
 8001976:	2000      	movs	r0, #0
 8001978:	e00a      	b.n	8001990 <wizchip_init+0x2c>
 800197a:	0029      	movs	r1, r5
   if(txsize)
 800197c:	002a      	movs	r2, r5
 800197e:	2300      	movs	r3, #0
 8001980:	3108      	adds	r1, #8
            tmp += txsize[i];
 8001982:	7810      	ldrb	r0, [r2, #0]
 8001984:	18c3      	adds	r3, r0, r3
 8001986:	b25b      	sxtb	r3, r3
            if(tmp > 16) return -1;
 8001988:	2b10      	cmp	r3, #16
 800198a:	dd02      	ble.n	8001992 <wizchip_init+0x2e>
 800198c:	2001      	movs	r0, #1
 800198e:	4240      	negs	r0, r0
}
 8001990:	bd70      	pop	{r4, r5, r6, pc}
 8001992:	3201      	adds	r2, #1
        for(i = 0 ; i < _WIZCHIP_SOCK_NUM_; i++)
 8001994:	4291      	cmp	r1, r2
 8001996:	d1f4      	bne.n	8001982 <wizchip_init+0x1e>
 8001998:	4e10      	ldr	r6, [pc, #64]	; (80019dc <wizchip_init+0x78>)
            setSn_TXBUF_SIZE(i, txsize[i]);
 800199a:	7829      	ldrb	r1, [r5, #0]
 800199c:	0030      	movs	r0, r6
 800199e:	f7ff feb5 	bl	800170c <WIZCHIP_WRITE>
        for(i = 0 ; i < _WIZCHIP_SOCK_NUM_; i++)
 80019a2:	4b0f      	ldr	r3, [pc, #60]	; (80019e0 <wizchip_init+0x7c>)
 80019a4:	3620      	adds	r6, #32
 80019a6:	3501      	adds	r5, #1
 80019a8:	429e      	cmp	r6, r3
 80019aa:	d1f6      	bne.n	800199a <wizchip_init+0x36>
 80019ac:	e7e1      	b.n	8001972 <wizchip_init+0xe>
 80019ae:	0021      	movs	r1, r4
   if(rxsize)
 80019b0:	0022      	movs	r2, r4
 80019b2:	2300      	movs	r3, #0
 80019b4:	3108      	adds	r1, #8
            tmp += rxsize[i];
 80019b6:	7810      	ldrb	r0, [r2, #0]
 80019b8:	18c3      	adds	r3, r0, r3
 80019ba:	b25b      	sxtb	r3, r3
            if(tmp > 16) return -1;
 80019bc:	2b10      	cmp	r3, #16
 80019be:	dce5      	bgt.n	800198c <wizchip_init+0x28>
 80019c0:	3201      	adds	r2, #1
        for(i = 0 ; i < _WIZCHIP_SOCK_NUM_; i++)
 80019c2:	4291      	cmp	r1, r2
 80019c4:	d1f7      	bne.n	80019b6 <wizchip_init+0x52>
 80019c6:	4d07      	ldr	r5, [pc, #28]	; (80019e4 <wizchip_init+0x80>)
            setSn_RXBUF_SIZE(i, rxsize[i]);
 80019c8:	7821      	ldrb	r1, [r4, #0]
 80019ca:	0028      	movs	r0, r5
 80019cc:	f7ff fe9e 	bl	800170c <WIZCHIP_WRITE>
        for(i = 0 ; i < _WIZCHIP_SOCK_NUM_; i++)
 80019d0:	4b02      	ldr	r3, [pc, #8]	; (80019dc <wizchip_init+0x78>)
 80019d2:	3520      	adds	r5, #32
 80019d4:	3401      	adds	r4, #1
 80019d6:	429d      	cmp	r5, r3
 80019d8:	d1f6      	bne.n	80019c8 <wizchip_init+0x64>
 80019da:	e7cc      	b.n	8001976 <wizchip_init+0x12>
 80019dc:	00001f08 	.word	0x00001f08
 80019e0:	00002008 	.word	0x00002008
 80019e4:	00001e08 	.word	0x00001e08

080019e8 <wizchip_clrinterrupt>:
   setIR(ir);
//A20150601 : For integrating with W5300
#elif _WIZCHIP_ == W5300
   setIR( ((((uint16_t)ir) << 8) | (((uint16_t)sir) & 0x00FF)) );
#else
   setIR(ir);
 80019e8:	21f0      	movs	r1, #240	; 0xf0
{
 80019ea:	b510      	push	{r4, lr}
   setIR(ir);
 80019ec:	4001      	ands	r1, r0
{
 80019ee:	0004      	movs	r4, r0
   setIR(ir);
 80019f0:	20a8      	movs	r0, #168	; 0xa8
 80019f2:	0140      	lsls	r0, r0, #5
 80019f4:	f7ff fe8a 	bl	800170c <WIZCHIP_WRITE>
   setSIR(sir);
 80019f8:	20b8      	movs	r0, #184	; 0xb8
 80019fa:	0a21      	lsrs	r1, r4, #8
 80019fc:	0140      	lsls	r0, r0, #5
 80019fe:	f7ff fe85 	bl	800170c <WIZCHIP_WRITE>
#endif   
}
 8001a02:	bd10      	pop	{r4, pc}

08001a04 <wizchip_getinterrupt>:
#elif _WIZCHIP_  == W5300
   ret = getIR();
   ir = (uint8_t)(ret >> 8);
   sir = (uint8_t)ret;
#else
   ir  = getIR();
 8001a04:	20a8      	movs	r0, #168	; 0xa8
{
 8001a06:	b510      	push	{r4, lr}
   ir  = getIR();
 8001a08:	0140      	lsls	r0, r0, #5
 8001a0a:	f7ff fe55 	bl	80016b8 <WIZCHIP_READ>
 8001a0e:	0004      	movs	r4, r0
   sir = getSIR();
 8001a10:	20b8      	movs	r0, #184	; 0xb8
 8001a12:	0140      	lsls	r0, r0, #5
 8001a14:	f7ff fe50 	bl	80016b8 <WIZCHIP_READ>
   ir  = getIR();
 8001a18:	23f0      	movs	r3, #240	; 0xf0
#endif
#if _WIZCHIP_ == W5200
   ir &= ~(1 << 6);
#endif
  ret = sir;
  ret = (ret << 8) + ir;
 8001a1a:	0200      	lsls	r0, r0, #8
 8001a1c:	401c      	ands	r4, r3
 8001a1e:	b280      	uxth	r0, r0
 8001a20:	1900      	adds	r0, r0, r4
  return (intr_kind)ret;
 8001a22:	b280      	uxth	r0, r0
}
 8001a24:	bd10      	pop	{r4, pc}

08001a26 <wizchip_setinterruptmask>:

void wizchip_setinterruptmask(intr_kind intr)
{
 8001a26:	b510      	push	{r4, lr}
   setIMR(imr);
//A20150601 : For integrating with W5300
#elif _WIZCHIP_ == W5300
   setIMR( ((((uint16_t)imr) << 8) | (((uint16_t)simr) & 0x00FF)) );
#else
   setIMR(imr);
 8001a28:	b2c1      	uxtb	r1, r0
{
 8001a2a:	0004      	movs	r4, r0
   setIMR(imr);
 8001a2c:	20b0      	movs	r0, #176	; 0xb0
 8001a2e:	0140      	lsls	r0, r0, #5
 8001a30:	f7ff fe6c 	bl	800170c <WIZCHIP_WRITE>
   setSIMR(simr);
 8001a34:	20c0      	movs	r0, #192	; 0xc0
 8001a36:	0a21      	lsrs	r1, r4, #8
 8001a38:	0140      	lsls	r0, r0, #5
 8001a3a:	f7ff fe67 	bl	800170c <WIZCHIP_WRITE>
#endif   
}
 8001a3e:	bd10      	pop	{r4, pc}

08001a40 <wizchip_getinterruptmask>:
#elif _WIZCHIP_ == W5300
   ret = getIMR();
   imr = (uint8_t)(ret >> 8);
   simr = (uint8_t)ret;
#else
   imr  = getIMR();
 8001a40:	20b0      	movs	r0, #176	; 0xb0
{
 8001a42:	b510      	push	{r4, lr}
   imr  = getIMR();
 8001a44:	0140      	lsls	r0, r0, #5
 8001a46:	f7ff fe37 	bl	80016b8 <WIZCHIP_READ>
 8001a4a:	0004      	movs	r4, r0
   simr = getSIMR();
 8001a4c:	20c0      	movs	r0, #192	; 0xc0
 8001a4e:	0140      	lsls	r0, r0, #5
 8001a50:	f7ff fe32 	bl	80016b8 <WIZCHIP_READ>
#endif
#if _WIZCHIP_ == W5200
   imr &= ~(1 << 6);  // IK_DEST_UNREACH
#endif
  ret = simr;
  ret = (ret << 8) + imr;
 8001a54:	0200      	lsls	r0, r0, #8
 8001a56:	1900      	adds	r0, r0, r4
  return (intr_kind)ret;
 8001a58:	b280      	uxth	r0, r0
}
 8001a5a:	bd10      	pop	{r4, pc}

08001a5c <wizphy_getphylink>:
       tmp = PHY_LINK_ON;
#elif   _WIZCHIP_ == W5200
   if(getPHYSTATUS() & PHYSTATUS_LINK)
      tmp = PHY_LINK_ON;
#elif _WIZCHIP_ == W5500
   if(getPHYCFGR() & PHYCFGR_LNK_ON)
 8001a5c:	20b8      	movs	r0, #184	; 0xb8
{
 8001a5e:	b510      	push	{r4, lr}
   if(getPHYCFGR() & PHYCFGR_LNK_ON)
 8001a60:	0180      	lsls	r0, r0, #6
 8001a62:	f7ff fe29 	bl	80016b8 <WIZCHIP_READ>
      tmp = PHY_LINK_ON;

#else
   tmp = -1;
#endif
   return tmp;
 8001a66:	2301      	movs	r3, #1
 8001a68:	4018      	ands	r0, r3
}
 8001a6a:	bd10      	pop	{r4, pc}

08001a6c <wizphy_getphypmode>:
      if(getPHYSTATUS() & PHYSTATUS_POWERDOWN)
         tmp = PHY_POWER_DOWN;
      else          
         tmp = PHY_POWER_NORM;
   #elif _WIZCHIP_ == 5500
      if((getPHYCFGR() & PHYCFGR_OPMDC_ALLA) == PHYCFGR_OPMDC_PDOWN)
 8001a6c:	20b8      	movs	r0, #184	; 0xb8
{
 8001a6e:	b510      	push	{r4, lr}
      if((getPHYCFGR() & PHYCFGR_OPMDC_ALLA) == PHYCFGR_OPMDC_PDOWN)
 8001a70:	0180      	lsls	r0, r0, #6
 8001a72:	f7ff fe21 	bl	80016b8 <WIZCHIP_READ>
 8001a76:	2338      	movs	r3, #56	; 0x38
 8001a78:	4018      	ands	r0, r3
 8001a7a:	3830      	subs	r0, #48	; 0x30
 8001a7c:	4243      	negs	r3, r0
 8001a7e:	4158      	adcs	r0, r3
      else 
         tmp = PHY_POWER_NORM;
   #else
      tmp = -1;
   #endif
   return tmp;
 8001a80:	b240      	sxtb	r0, r0
}
 8001a82:	bd10      	pop	{r4, pc}

08001a84 <wizphy_reset>:
}

#endif
#if _WIZCHIP_ == W5500
void wizphy_reset(void)
{
 8001a84:	b510      	push	{r4, lr}
   uint8_t tmp = getPHYCFGR();
 8001a86:	24b8      	movs	r4, #184	; 0xb8
 8001a88:	01a4      	lsls	r4, r4, #6
 8001a8a:	0020      	movs	r0, r4
 8001a8c:	f7ff fe14 	bl	80016b8 <WIZCHIP_READ>
   tmp &= PHYCFGR_RST;
   setPHYCFGR(tmp);
 8001a90:	217f      	movs	r1, #127	; 0x7f
 8001a92:	4001      	ands	r1, r0
 8001a94:	0020      	movs	r0, r4
 8001a96:	f7ff fe39 	bl	800170c <WIZCHIP_WRITE>
   tmp = getPHYCFGR();
 8001a9a:	0020      	movs	r0, r4
 8001a9c:	f7ff fe0c 	bl	80016b8 <WIZCHIP_READ>
   tmp |= ~PHYCFGR_RST;
 8001aa0:	2180      	movs	r1, #128	; 0x80
 8001aa2:	4249      	negs	r1, r1
 8001aa4:	4301      	orrs	r1, r0
   setPHYCFGR(tmp);
 8001aa6:	b2c9      	uxtb	r1, r1
 8001aa8:	0020      	movs	r0, r4
 8001aaa:	f7ff fe2f 	bl	800170c <WIZCHIP_WRITE>
}
 8001aae:	bd10      	pop	{r4, pc}

08001ab0 <wizphy_setphyconf>:

void wizphy_setphyconf(wiz_PhyConf* phyconf)
{
   uint8_t tmp = 0;
   if(phyconf->by == PHY_CONFBY_SW)
 8001ab0:	7801      	ldrb	r1, [r0, #0]
{
 8001ab2:	b510      	push	{r4, lr}
      tmp |= PHYCFGR_OPMD;
   else
      tmp &= ~PHYCFGR_OPMD;
 8001ab4:	3901      	subs	r1, #1
 8001ab6:	424b      	negs	r3, r1
 8001ab8:	4159      	adcs	r1, r3
   if(phyconf->mode == PHY_MODE_AUTONEGO)
 8001aba:	7843      	ldrb	r3, [r0, #1]
      tmp &= ~PHYCFGR_OPMD;
 8001abc:	0189      	lsls	r1, r1, #6
   if(phyconf->mode == PHY_MODE_AUTONEGO)
 8001abe:	2b01      	cmp	r3, #1
 8001ac0:	d108      	bne.n	8001ad4 <wizphy_setphyconf+0x24>
      tmp |= PHYCFGR_OPMDC_ALLA;
 8001ac2:	3337      	adds	r3, #55	; 0x37
            tmp |= PHYCFGR_OPMDC_10F;
      }   
      else
      {
         if(phyconf->speed == PHY_SPEED_100)
            tmp |= PHYCFGR_OPMDC_100H;
 8001ac4:	4319      	orrs	r1, r3
         else
            tmp |= PHYCFGR_OPMDC_10H;
      }
   }
   setPHYCFGR(tmp);
 8001ac6:	20b8      	movs	r0, #184	; 0xb8
 8001ac8:	0180      	lsls	r0, r0, #6
 8001aca:	f7ff fe1f 	bl	800170c <WIZCHIP_WRITE>
   wizphy_reset();
 8001ace:	f7ff ffd9 	bl	8001a84 <wizphy_reset>
}
 8001ad2:	bd10      	pop	{r4, pc}
      if(phyconf->duplex == PHY_DUPLEX_FULL)
 8001ad4:	78c2      	ldrb	r2, [r0, #3]
 8001ad6:	7883      	ldrb	r3, [r0, #2]
 8001ad8:	2a01      	cmp	r2, #1
 8001ada:	d105      	bne.n	8001ae8 <wizphy_setphyconf+0x38>
         if(phyconf->speed == PHY_SPEED_100)
 8001adc:	2b01      	cmp	r3, #1
 8001ade:	d101      	bne.n	8001ae4 <wizphy_setphyconf+0x34>
            tmp |= PHYCFGR_OPMDC_100F;
 8001ae0:	3317      	adds	r3, #23
 8001ae2:	e7ef      	b.n	8001ac4 <wizphy_setphyconf+0x14>
            tmp |= PHYCFGR_OPMDC_10F;
 8001ae4:	2308      	movs	r3, #8
 8001ae6:	e7ed      	b.n	8001ac4 <wizphy_setphyconf+0x14>
         if(phyconf->speed == PHY_SPEED_100)
 8001ae8:	2b01      	cmp	r3, #1
 8001aea:	d1ec      	bne.n	8001ac6 <wizphy_setphyconf+0x16>
            tmp |= PHYCFGR_OPMDC_100H;
 8001aec:	330f      	adds	r3, #15
 8001aee:	e7e9      	b.n	8001ac4 <wizphy_setphyconf+0x14>

08001af0 <wizphy_getphyconf>:

void wizphy_getphyconf(wiz_PhyConf* phyconf)
{
 8001af0:	b510      	push	{r4, lr}
 8001af2:	0004      	movs	r4, r0
   uint8_t tmp = 0;
   tmp = getPHYCFGR();
 8001af4:	20b8      	movs	r0, #184	; 0xb8
 8001af6:	0180      	lsls	r0, r0, #6
 8001af8:	f7ff fdde 	bl	80016b8 <WIZCHIP_READ>
   phyconf->by   = (tmp & PHYCFGR_OPMD) ? PHY_CONFBY_SW : PHY_CONFBY_HW;
 8001afc:	2301      	movs	r3, #1
 8001afe:	0982      	lsrs	r2, r0, #6
 8001b00:	401a      	ands	r2, r3
 8001b02:	7022      	strb	r2, [r4, #0]
 8001b04:	2238      	movs	r2, #56	; 0x38
 8001b06:	4010      	ands	r0, r2
   switch(tmp & PHYCFGR_OPMDC_ALLA)
 8001b08:	2820      	cmp	r0, #32
 8001b0a:	d001      	beq.n	8001b10 <wizphy_getphyconf+0x20>
 8001b0c:	4290      	cmp	r0, r2
 8001b0e:	d118      	bne.n	8001b42 <wizphy_getphyconf+0x52>
      case PHYCFGR_OPMDC_ALLA:
      case PHYCFGR_OPMDC_100FA: 
         phyconf->mode = PHY_MODE_AUTONEGO;
         break;
      default:
         phyconf->mode = PHY_MODE_MANUAL;
 8001b10:	7063      	strb	r3, [r4, #1]
 8001b12:	0003      	movs	r3, r0
 8001b14:	3b10      	subs	r3, #16
 8001b16:	b2db      	uxtb	r3, r3
 8001b18:	2b10      	cmp	r3, #16
 8001b1a:	d814      	bhi.n	8001b46 <wizphy_getphyconf+0x56>
 8001b1c:	2201      	movs	r2, #1
 8001b1e:	0011      	movs	r1, r2
 8001b20:	4099      	lsls	r1, r3
 8001b22:	4b0b      	ldr	r3, [pc, #44]	; (8001b50 <wizphy_getphyconf+0x60>)
 8001b24:	4219      	tst	r1, r3
 8001b26:	d00e      	beq.n	8001b46 <wizphy_getphyconf+0x56>
   switch(tmp & PHYCFGR_OPMDC_ALLA)
   {
      case PHYCFGR_OPMDC_100FA:
      case PHYCFGR_OPMDC_100F:
      case PHYCFGR_OPMDC_100H:
         phyconf->speed = PHY_SPEED_100;
 8001b28:	70a2      	strb	r2, [r4, #2]
 8001b2a:	3808      	subs	r0, #8
 8001b2c:	b2c0      	uxtb	r0, r0
 8001b2e:	2818      	cmp	r0, #24
 8001b30:	d80c      	bhi.n	8001b4c <wizphy_getphyconf+0x5c>
 8001b32:	2301      	movs	r3, #1
 8001b34:	0019      	movs	r1, r3
 8001b36:	4081      	lsls	r1, r0
 8001b38:	4a06      	ldr	r2, [pc, #24]	; (8001b54 <wizphy_getphyconf+0x64>)
 8001b3a:	4211      	tst	r1, r2
 8001b3c:	d006      	beq.n	8001b4c <wizphy_getphyconf+0x5c>
      case PHYCFGR_OPMDC_100F:
      case PHYCFGR_OPMDC_10F:
         phyconf->duplex = PHY_DUPLEX_FULL;
         break;
      default:
         phyconf->duplex = PHY_DUPLEX_HALF;
 8001b3e:	70e3      	strb	r3, [r4, #3]
         break;
   }
}
 8001b40:	bd10      	pop	{r4, pc}
         phyconf->mode = PHY_MODE_MANUAL;
 8001b42:	2300      	movs	r3, #0
 8001b44:	e7e4      	b.n	8001b10 <wizphy_getphyconf+0x20>
         phyconf->speed = PHY_SPEED_10;
 8001b46:	2300      	movs	r3, #0
 8001b48:	70a3      	strb	r3, [r4, #2]
         break;
 8001b4a:	e7ee      	b.n	8001b2a <wizphy_getphyconf+0x3a>
         phyconf->duplex = PHY_DUPLEX_HALF;
 8001b4c:	2300      	movs	r3, #0
 8001b4e:	e7f6      	b.n	8001b3e <wizphy_getphyconf+0x4e>
 8001b50:	00010101 	.word	0x00010101
 8001b54:	01010001 	.word	0x01010001

08001b58 <wizphy_setphypmode>:
   phyconf->duplex = (tmp & PHYCFGR_DPX_FULL) ? PHY_DUPLEX_FULL : PHY_DUPLEX_HALF;
   phyconf->speed  = (tmp & PHYCFGR_SPD_100) ? PHY_SPEED_100 : PHY_SPEED_10;
}

int8_t wizphy_setphypmode(uint8_t pmode)
{
 8001b58:	b510      	push	{r4, lr}
 8001b5a:	0004      	movs	r4, r0
   uint8_t tmp = 0;
   tmp = getPHYCFGR();
 8001b5c:	20b8      	movs	r0, #184	; 0xb8
 8001b5e:	0180      	lsls	r0, r0, #6
 8001b60:	f7ff fdaa 	bl	80016b8 <WIZCHIP_READ>
   if((tmp & PHYCFGR_OPMD)== 0) return -1;
 8001b64:	0643      	lsls	r3, r0, #25
 8001b66:	d518      	bpl.n	8001b9a <wizphy_setphypmode+0x42>
   tmp &= ~PHYCFGR_OPMDC_ALLA;         
 8001b68:	2138      	movs	r1, #56	; 0x38
 8001b6a:	4388      	bics	r0, r1
 8001b6c:	b2c0      	uxtb	r0, r0
   if( pmode == PHY_POWER_DOWN)
      tmp |= PHYCFGR_OPMDC_PDOWN;
   else
      tmp |= PHYCFGR_OPMDC_ALLA;
 8001b6e:	4301      	orrs	r1, r0
   if( pmode == PHY_POWER_DOWN)
 8001b70:	2c01      	cmp	r4, #1
 8001b72:	d101      	bne.n	8001b78 <wizphy_setphypmode+0x20>
      tmp |= PHYCFGR_OPMDC_PDOWN;
 8001b74:	2130      	movs	r1, #48	; 0x30
 8001b76:	4301      	orrs	r1, r0
   setPHYCFGR(tmp);
 8001b78:	20b8      	movs	r0, #184	; 0xb8
 8001b7a:	0180      	lsls	r0, r0, #6
 8001b7c:	f7ff fdc6 	bl	800170c <WIZCHIP_WRITE>
   wizphy_reset();
 8001b80:	f7ff ff80 	bl	8001a84 <wizphy_reset>
   tmp = getPHYCFGR();
 8001b84:	20b8      	movs	r0, #184	; 0xb8
 8001b86:	0180      	lsls	r0, r0, #6
 8001b88:	f7ff fd96 	bl	80016b8 <WIZCHIP_READ>
   if( pmode == PHY_POWER_DOWN)
   {
      if(tmp & PHYCFGR_OPMDC_PDOWN) return 0;
 8001b8c:	2230      	movs	r2, #48	; 0x30
   if( pmode == PHY_POWER_DOWN)
 8001b8e:	2c01      	cmp	r4, #1
 8001b90:	d000      	beq.n	8001b94 <wizphy_setphypmode+0x3c>
   }
   else
   {
      if(tmp & PHYCFGR_OPMDC_ALLA) return 0;
 8001b92:	2238      	movs	r2, #56	; 0x38
      if(tmp & PHYCFGR_OPMDC_PDOWN) return 0;
 8001b94:	2300      	movs	r3, #0
      if(tmp & PHYCFGR_OPMDC_ALLA) return 0;
 8001b96:	4210      	tst	r0, r2
 8001b98:	d101      	bne.n	8001b9e <wizphy_setphypmode+0x46>
   }
   return -1;
 8001b9a:	2301      	movs	r3, #1
 8001b9c:	425b      	negs	r3, r3
}
 8001b9e:	0018      	movs	r0, r3
 8001ba0:	bd10      	pop	{r4, pc}
	...

08001ba4 <ctlwizchip>:
{
 8001ba4:	b570      	push	{r4, r5, r6, lr}
 8001ba6:	000c      	movs	r4, r1
   switch(cwtype)
 8001ba8:	280f      	cmp	r0, #15
 8001baa:	d862      	bhi.n	8001c72 <ctlwizchip+0xce>
 8001bac:	f7fe faac 	bl	8000108 <__gnu_thumb1_case_uqi>
 8001bb0:	13170c08 	.word	0x13170c08
 8001bb4:	2e221f1b 	.word	0x2e221f1b
 8001bb8:	4f4b483a 	.word	0x4f4b483a
 8001bbc:	5e57530a 	.word	0x5e57530a
         wizchip_sw_reset();
 8001bc0:	f7ff fe94 	bl	80018ec <wizchip_sw_reset>
   return 0;
 8001bc4:	2000      	movs	r0, #0
         break;
 8001bc6:	e005      	b.n	8001bd4 <ctlwizchip+0x30>
         if(arg != 0) 
 8001bc8:	2900      	cmp	r1, #0
 8001bca:	d000      	beq.n	8001bce <ctlwizchip+0x2a>
            ptmp[1] = ptmp[0] + _WIZCHIP_SOCK_NUM_;
 8001bcc:	3108      	adds	r1, #8
         return wizchip_init(ptmp[0], ptmp[1]);
 8001bce:	0020      	movs	r0, r4
 8001bd0:	f7ff fec8 	bl	8001964 <wizchip_init>
}
 8001bd4:	bd70      	pop	{r4, r5, r6, pc}
         wizchip_clrinterrupt(*((intr_kind*)arg));
 8001bd6:	8808      	ldrh	r0, [r1, #0]
 8001bd8:	f7ff ff06 	bl	80019e8 <wizchip_clrinterrupt>
 8001bdc:	e7f2      	b.n	8001bc4 <ctlwizchip+0x20>
        *((intr_kind*)arg) = wizchip_getinterrupt();
 8001bde:	f7ff ff11 	bl	8001a04 <wizchip_getinterrupt>
         *(uint16_t*)arg = getINTLEVEL();
 8001be2:	8020      	strh	r0, [r4, #0]
 8001be4:	e7ee      	b.n	8001bc4 <ctlwizchip+0x20>
         wizchip_setinterruptmask(*((intr_kind*)arg));
 8001be6:	8808      	ldrh	r0, [r1, #0]
 8001be8:	f7ff ff1d 	bl	8001a26 <wizchip_setinterruptmask>
 8001bec:	e7ea      	b.n	8001bc4 <ctlwizchip+0x20>
         *((intr_kind*)arg) = wizchip_getinterruptmask();
 8001bee:	f7ff ff27 	bl	8001a40 <wizchip_getinterruptmask>
 8001bf2:	e7f6      	b.n	8001be2 <ctlwizchip+0x3e>
         setINTLEVEL(*(uint16_t*)arg);
 8001bf4:	2098      	movs	r0, #152	; 0x98
 8001bf6:	8809      	ldrh	r1, [r1, #0]
 8001bf8:	0140      	lsls	r0, r0, #5
 8001bfa:	0a09      	lsrs	r1, r1, #8
 8001bfc:	f7ff fd86 	bl	800170c <WIZCHIP_WRITE>
 8001c00:	20a0      	movs	r0, #160	; 0xa0
 8001c02:	7821      	ldrb	r1, [r4, #0]
 8001c04:	0140      	lsls	r0, r0, #5
 8001c06:	f7ff fd81 	bl	800170c <WIZCHIP_WRITE>
 8001c0a:	e7db      	b.n	8001bc4 <ctlwizchip+0x20>
         *(uint16_t*)arg = getINTLEVEL();
 8001c0c:	2098      	movs	r0, #152	; 0x98
 8001c0e:	0140      	lsls	r0, r0, #5
 8001c10:	f7ff fd52 	bl	80016b8 <WIZCHIP_READ>
 8001c14:	0005      	movs	r5, r0
 8001c16:	20a0      	movs	r0, #160	; 0xa0
 8001c18:	0140      	lsls	r0, r0, #5
 8001c1a:	f7ff fd4d 	bl	80016b8 <WIZCHIP_READ>
 8001c1e:	022d      	lsls	r5, r5, #8
 8001c20:	1828      	adds	r0, r5, r0
 8001c22:	e7de      	b.n	8001be2 <ctlwizchip+0x3e>
         ((uint8_t*)arg)[5] = 0;
 8001c24:	2000      	movs	r0, #0
         ((uint8_t*)arg)[0] = WIZCHIP.id[0];
 8001c26:	4b14      	ldr	r3, [pc, #80]	; (8001c78 <ctlwizchip+0xd4>)
 8001c28:	789a      	ldrb	r2, [r3, #2]
 8001c2a:	700a      	strb	r2, [r1, #0]
         ((uint8_t*)arg)[1] = WIZCHIP.id[1];
 8001c2c:	78da      	ldrb	r2, [r3, #3]
 8001c2e:	704a      	strb	r2, [r1, #1]
         ((uint8_t*)arg)[2] = WIZCHIP.id[2];
 8001c30:	791a      	ldrb	r2, [r3, #4]
 8001c32:	708a      	strb	r2, [r1, #2]
         ((uint8_t*)arg)[3] = WIZCHIP.id[3];
 8001c34:	795a      	ldrb	r2, [r3, #5]
 8001c36:	70ca      	strb	r2, [r1, #3]
         ((uint8_t*)arg)[4] = WIZCHIP.id[4];
 8001c38:	799b      	ldrb	r3, [r3, #6]
         ((uint8_t*)arg)[5] = 0;
 8001c3a:	7148      	strb	r0, [r1, #5]
         ((uint8_t*)arg)[4] = WIZCHIP.id[4];
 8001c3c:	710b      	strb	r3, [r1, #4]
         break;
 8001c3e:	e7c9      	b.n	8001bd4 <ctlwizchip+0x30>
         wizphy_reset();
 8001c40:	f7ff ff20 	bl	8001a84 <wizphy_reset>
 8001c44:	e7be      	b.n	8001bc4 <ctlwizchip+0x20>
         wizphy_setphyconf((wiz_PhyConf*)arg);
 8001c46:	0008      	movs	r0, r1
 8001c48:	f7ff ff32 	bl	8001ab0 <wizphy_setphyconf>
 8001c4c:	e7ba      	b.n	8001bc4 <ctlwizchip+0x20>
         wizphy_getphyconf((wiz_PhyConf*)arg);
 8001c4e:	0008      	movs	r0, r1
 8001c50:	f7ff ff4e 	bl	8001af0 <wizphy_getphyconf>
 8001c54:	e7b6      	b.n	8001bc4 <ctlwizchip+0x20>
         return wizphy_setphypmode(*(uint8_t*)arg);
 8001c56:	7808      	ldrb	r0, [r1, #0]
 8001c58:	f7ff ff7e 	bl	8001b58 <wizphy_setphypmode>
 8001c5c:	e7ba      	b.n	8001bd4 <ctlwizchip+0x30>
         tmp = wizphy_getphypmode();
 8001c5e:	f7ff ff05 	bl	8001a6c <wizphy_getphypmode>
         tmp = wizphy_getphylink();
 8001c62:	b2c0      	uxtb	r0, r0
         if((int8_t)tmp == -1) return -1;
 8001c64:	28ff      	cmp	r0, #255	; 0xff
 8001c66:	d004      	beq.n	8001c72 <ctlwizchip+0xce>
         *(uint8_t*)arg = tmp;
 8001c68:	7020      	strb	r0, [r4, #0]
 8001c6a:	e7ab      	b.n	8001bc4 <ctlwizchip+0x20>
         tmp = wizphy_getphylink();
 8001c6c:	f7ff fef6 	bl	8001a5c <wizphy_getphylink>
 8001c70:	e7f7      	b.n	8001c62 <ctlwizchip+0xbe>
         return -1;
 8001c72:	2001      	movs	r0, #1
 8001c74:	4240      	negs	r0, r0
 8001c76:	e7ad      	b.n	8001bd4 <ctlwizchip+0x30>
 8001c78:	20000000 	.word	0x20000000

08001c7c <W5500_Select>:
    HAL_UART_Transmit(&huart1, (uint8_t*)buff, strlen(buff),
                      HAL_MAX_DELAY);
    va_end(args);
}

void W5500_Select(void) {
 8001c7c:	b510      	push	{r4, lr}
    HAL_GPIO_WritePin(W5500_CS_GPIO_Port, W5500_CS_Pin, GPIO_PIN_RESET);
 8001c7e:	2200      	movs	r2, #0
 8001c80:	2102      	movs	r1, #2
 8001c82:	4802      	ldr	r0, [pc, #8]	; (8001c8c <W5500_Select+0x10>)
 8001c84:	f7fe fc10 	bl	80004a8 <HAL_GPIO_WritePin>
}
 8001c88:	bd10      	pop	{r4, pc}
 8001c8a:	46c0      	nop			; (mov r8, r8)
 8001c8c:	48000400 	.word	0x48000400

08001c90 <W5500_Unselect>:

void W5500_Unselect(void) {
 8001c90:	b510      	push	{r4, lr}
    HAL_GPIO_WritePin(W5500_CS_GPIO_Port, W5500_CS_Pin, GPIO_PIN_SET);
 8001c92:	2201      	movs	r2, #1
 8001c94:	2102      	movs	r1, #2
 8001c96:	4802      	ldr	r0, [pc, #8]	; (8001ca0 <W5500_Unselect+0x10>)
 8001c98:	f7fe fc06 	bl	80004a8 <HAL_GPIO_WritePin>
}
 8001c9c:	bd10      	pop	{r4, pc}
 8001c9e:	46c0      	nop			; (mov r8, r8)
 8001ca0:	48000400 	.word	0x48000400

08001ca4 <W5500_ReadBuff>:

void W5500_ReadBuff(uint8_t* buff, uint16_t len) {
    HAL_SPI_Receive(&hspi1, buff, len, HAL_MAX_DELAY);
 8001ca4:	2301      	movs	r3, #1
void W5500_ReadBuff(uint8_t* buff, uint16_t len) {
 8001ca6:	b510      	push	{r4, lr}
 8001ca8:	000a      	movs	r2, r1
    HAL_SPI_Receive(&hspi1, buff, len, HAL_MAX_DELAY);
 8001caa:	425b      	negs	r3, r3
 8001cac:	0001      	movs	r1, r0
 8001cae:	4802      	ldr	r0, [pc, #8]	; (8001cb8 <W5500_ReadBuff+0x14>)
 8001cb0:	f7ff fb1c 	bl	80012ec <HAL_SPI_Receive>
}
 8001cb4:	bd10      	pop	{r4, pc}
 8001cb6:	46c0      	nop			; (mov r8, r8)
 8001cb8:	20000178 	.word	0x20000178

08001cbc <W5500_ReadByte>:

void W5500_WriteBuff(uint8_t* buff, uint16_t len) {
    HAL_SPI_Transmit(&hspi1, buff, len, HAL_MAX_DELAY);
}

uint8_t W5500_ReadByte(void) {
 8001cbc:	b513      	push	{r0, r1, r4, lr}
    uint8_t byte;
    W5500_ReadBuff(&byte, sizeof(byte));
 8001cbe:	466b      	mov	r3, sp
 8001cc0:	1ddc      	adds	r4, r3, #7
 8001cc2:	0020      	movs	r0, r4
 8001cc4:	2101      	movs	r1, #1
 8001cc6:	f7ff ffed 	bl	8001ca4 <W5500_ReadBuff>
    return byte;
 8001cca:	7820      	ldrb	r0, [r4, #0]
}
 8001ccc:	bd16      	pop	{r1, r2, r4, pc}
	...

08001cd0 <W5500_WriteBuff>:
    HAL_SPI_Transmit(&hspi1, buff, len, HAL_MAX_DELAY);
 8001cd0:	2301      	movs	r3, #1
void W5500_WriteBuff(uint8_t* buff, uint16_t len) {
 8001cd2:	b510      	push	{r4, lr}
 8001cd4:	000a      	movs	r2, r1
    HAL_SPI_Transmit(&hspi1, buff, len, HAL_MAX_DELAY);
 8001cd6:	425b      	negs	r3, r3
 8001cd8:	0001      	movs	r1, r0
 8001cda:	4802      	ldr	r0, [pc, #8]	; (8001ce4 <W5500_WriteBuff+0x14>)
 8001cdc:	f7ff f8fc 	bl	8000ed8 <HAL_SPI_Transmit>
}
 8001ce0:	bd10      	pop	{r4, pc}
 8001ce2:	46c0      	nop			; (mov r8, r8)
 8001ce4:	20000178 	.word	0x20000178

08001ce8 <W5500_WriteByte>:

void W5500_WriteByte(uint8_t byte) {
 8001ce8:	b507      	push	{r0, r1, r2, lr}
 8001cea:	466b      	mov	r3, sp
 8001cec:	71d8      	strb	r0, [r3, #7]
 8001cee:	3307      	adds	r3, #7
    W5500_WriteBuff(&byte, sizeof(byte));
 8001cf0:	2101      	movs	r1, #1
 8001cf2:	0018      	movs	r0, r3
 8001cf4:	f7ff ffec 	bl	8001cd0 <W5500_WriteBuff>
}
 8001cf8:	bd07      	pop	{r0, r1, r2, pc}
	...

08001cfc <init>:
// 1K should be enough, see https://forum.wiznet.io/t/topic/1612/2
//uint8_t dhcp_buffer[2];
// 1K seems to be enough for this buffer as well
//uint8_t dns_buffer[2];

void init() {
 8001cfc:	b5f0      	push	{r4, r5, r6, r7, lr}
//
//    UART_Printf("Registering W5500 callbacks...\r\n");
//    HAL_GPIO_WritePin(W5500_CS_GPIO_Port, W5500_CS_Pin, GPIO_PIN_SET);


    reg_wizchip_cs_cbfunc(W5500_Select, W5500_Unselect);
 8001cfe:	4942      	ldr	r1, [pc, #264]	; (8001e08 <init+0x10c>)
void init() {
 8001d00:	b08d      	sub	sp, #52	; 0x34
    reg_wizchip_cs_cbfunc(W5500_Select, W5500_Unselect);
 8001d02:	4842      	ldr	r0, [pc, #264]	; (8001e0c <init+0x110>)
 8001d04:	f7ff fdae 	bl	8001864 <reg_wizchip_cs_cbfunc>
    reg_wizchip_spi_cbfunc(W5500_ReadByte, W5500_WriteByte);
 8001d08:	4941      	ldr	r1, [pc, #260]	; (8001e10 <init+0x114>)
 8001d0a:	4842      	ldr	r0, [pc, #264]	; (8001e14 <init+0x118>)
 8001d0c:	f7ff fdbe 	bl	800188c <reg_wizchip_spi_cbfunc>
    reg_wizchip_spiburst_cbfunc(W5500_ReadBuff, W5500_WriteBuff);
 8001d10:	4941      	ldr	r1, [pc, #260]	; (8001e18 <init+0x11c>)
 8001d12:	4842      	ldr	r0, [pc, #264]	; (8001e1c <init+0x120>)
 8001d14:	f7ff fdd2 	bl	80018bc <reg_wizchip_spiburst_cbfunc>



//    UART_Printf("Calling wizchip_init()...\r\n");
    uint8_t rx_tx_buff_sizes[] = {2, 2, 2, 2, 2, 2, 2, 2};
 8001d18:	2302      	movs	r3, #2
 8001d1a:	a806      	add	r0, sp, #24
 8001d1c:	7003      	strb	r3, [r0, #0]
 8001d1e:	7043      	strb	r3, [r0, #1]
 8001d20:	7083      	strb	r3, [r0, #2]
 8001d22:	70c3      	strb	r3, [r0, #3]
 8001d24:	7103      	strb	r3, [r0, #4]
 8001d26:	7143      	strb	r3, [r0, #5]
 8001d28:	7183      	strb	r3, [r0, #6]
 8001d2a:	71c3      	strb	r3, [r0, #7]
    wizchip_init(rx_tx_buff_sizes, rx_tx_buff_sizes);
 8001d2c:	0001      	movs	r1, r0
 8001d2e:	f7ff fe19 	bl	8001964 <wizchip_init>
    };
    // set MAC address before using DHCP
//    setSHAR(net_info.mac);


    uint8_t memsize[2][8] = {{2,2,2,2,2,2,2,2},{2,2,2,2,2,2,2,2}};
 8001d32:	493b      	ldr	r1, [pc, #236]	; (8001e20 <init+0x124>)
 8001d34:	2210      	movs	r2, #16
 8001d36:	a808      	add	r0, sp, #32
 8001d38:	f000 fada 	bl	80022f0 <memcpy>
    uint8_t tmp;

	/* WIZCHIP SOCKET Buffer initialize */
	if(ctlwizchip(CW_INIT_WIZCHIP,(void*)memsize) == -1){
 8001d3c:	a908      	add	r1, sp, #32
 8001d3e:	2001      	movs	r0, #1
 8001d40:	f7ff ff30 	bl	8001ba4 <ctlwizchip>
 8001d44:	1c43      	adds	r3, r0, #1
 8001d46:	d103      	bne.n	8001d50 <init+0x54>



		//init fail
		printf("WIZCHIP Initialized fail.\r\n");
 8001d48:	4836      	ldr	r0, [pc, #216]	; (8001e24 <init+0x128>)
 8001d4a:	f000 fb43 	bl	80023d4 <puts>
 8001d4e:	e7fe      	b.n	8001d4e <init+0x52>
		while(1);
	}
	do{
		if(ctlwizchip(CW_GET_PHYLINK, (void*)&tmp) == -1)
			printf("Unknown PHY Link stauts.\r\n");
		  HAL_GPIO_TogglePin(DEBUG_LED_GPIO_Port, DEBUG_LED_Pin);
 8001d50:	2490      	movs	r4, #144	; 0x90
 8001d52:	2510      	movs	r5, #16
 8001d54:	05e4      	lsls	r4, r4, #23
		if(ctlwizchip(CW_GET_PHYLINK, (void*)&tmp) == -1)
 8001d56:	466b      	mov	r3, sp
 8001d58:	1cde      	adds	r6, r3, #3
 8001d5a:	0031      	movs	r1, r6
 8001d5c:	200f      	movs	r0, #15
 8001d5e:	f7ff ff21 	bl	8001ba4 <ctlwizchip>
 8001d62:	1c43      	adds	r3, r0, #1
 8001d64:	d102      	bne.n	8001d6c <init+0x70>
			printf("Unknown PHY Link stauts.\r\n");
 8001d66:	4830      	ldr	r0, [pc, #192]	; (8001e28 <init+0x12c>)
 8001d68:	f000 fb34 	bl	80023d4 <puts>
		  HAL_GPIO_TogglePin(DEBUG_LED_GPIO_Port, DEBUG_LED_Pin);
 8001d6c:	0029      	movs	r1, r5
 8001d6e:	0020      	movs	r0, r4
 8001d70:	f7fe fba0 	bl	80004b4 <HAL_GPIO_TogglePin>
		  HAL_Delay(200);
 8001d74:	20c8      	movs	r0, #200	; 0xc8
 8001d76:	f7fe fa8d 	bl	8000294 <HAL_Delay>
		  HAL_GPIO_TogglePin(DEBUG_LED_GPIO_Port, DEBUG_LED_Pin);
 8001d7a:	0029      	movs	r1, r5
 8001d7c:	0020      	movs	r0, r4
 8001d7e:	f7fe fb99 	bl	80004b4 <HAL_GPIO_TogglePin>
		  HAL_Delay(200);
 8001d82:	20c8      	movs	r0, #200	; 0xc8
 8001d84:	f7fe fa86 	bl	8000294 <HAL_Delay>
		  HAL_GPIO_TogglePin(DEBUG_LED_GPIO_Port, DEBUG_LED_Pin);
 8001d88:	0029      	movs	r1, r5
 8001d8a:	0020      	movs	r0, r4
 8001d8c:	f7fe fb92 	bl	80004b4 <HAL_GPIO_TogglePin>

	}while(tmp == PHY_LINK_OFF);
 8001d90:	7833      	ldrb	r3, [r6, #0]
 8001d92:	2b00      	cmp	r3, #0
 8001d94:	d0df      	beq.n	8001d56 <init+0x5a>

	uint8_t macAddr[6] = {0x00, 0x08, 0xdc, 0x00, 0xab, 0x05};
	uint8_t ipAddr[4] = {192,168,0,5};
 8001d96:	20a8      	movs	r0, #168	; 0xa8
	uint8_t macAddr[6] = {0x00, 0x08, 0xdc, 0x00, 0xab, 0x05};
 8001d98:	2208      	movs	r2, #8
 8001d9a:	2300      	movs	r3, #0
	uint8_t ipAddr[4] = {192,168,0,5};
 8001d9c:	ae01      	add	r6, sp, #4
	uint8_t subNet[4] = {255,255,255,0};
	uint8_t gateWay[4] = {192, 168, 0, 1};
 8001d9e:	ad03      	add	r5, sp, #12
	uint8_t ipAddr[4] = {192,168,0,5};
 8001da0:	27c0      	movs	r7, #192	; 0xc0
 8001da2:	7070      	strb	r0, [r6, #1]
	uint8_t gateWay[4] = {192, 168, 0, 1};
 8001da4:	7068      	strb	r0, [r5, #1]


	setSHAR(macAddr);			//set MAC addr
 8001da6:	2090      	movs	r0, #144	; 0x90
	uint8_t macAddr[6] = {0x00, 0x08, 0xdc, 0x00, 0xab, 0x05};
 8001da8:	a904      	add	r1, sp, #16
 8001daa:	704a      	strb	r2, [r1, #1]
 8001dac:	32d4      	adds	r2, #212	; 0xd4
 8001dae:	708a      	strb	r2, [r1, #2]
 8001db0:	3a31      	subs	r2, #49	; 0x31
	uint8_t subNet[4] = {255,255,255,0};
 8001db2:	ac02      	add	r4, sp, #8
	uint8_t macAddr[6] = {0x00, 0x08, 0xdc, 0x00, 0xab, 0x05};
 8001db4:	710a      	strb	r2, [r1, #4]
 8001db6:	3aa6      	subs	r2, #166	; 0xa6
 8001db8:	700b      	strb	r3, [r1, #0]
 8001dba:	70cb      	strb	r3, [r1, #3]
 8001dbc:	714a      	strb	r2, [r1, #5]
	uint8_t ipAddr[4] = {192,168,0,5};
 8001dbe:	70b3      	strb	r3, [r6, #2]
 8001dc0:	70f2      	strb	r2, [r6, #3]
	uint8_t subNet[4] = {255,255,255,0};
 8001dc2:	70e3      	strb	r3, [r4, #3]
 8001dc4:	32fa      	adds	r2, #250	; 0xfa
	uint8_t gateWay[4] = {192, 168, 0, 1};
 8001dc6:	70ab      	strb	r3, [r5, #2]
 8001dc8:	3301      	adds	r3, #1
 8001dca:	70eb      	strb	r3, [r5, #3]
	uint8_t subNet[4] = {255,255,255,0};
 8001dcc:	7022      	strb	r2, [r4, #0]
 8001dce:	7062      	strb	r2, [r4, #1]
 8001dd0:	70a2      	strb	r2, [r4, #2]
	uint8_t ipAddr[4] = {192,168,0,5};
 8001dd2:	7037      	strb	r7, [r6, #0]
	uint8_t gateWay[4] = {192, 168, 0, 1};
 8001dd4:	702f      	strb	r7, [r5, #0]
	setSHAR(macAddr);			//set MAC addr
 8001dd6:	3af9      	subs	r2, #249	; 0xf9
 8001dd8:	0100      	lsls	r0, r0, #4
 8001dda:	f7ff fcfb 	bl	80017d4 <WIZCHIP_WRITE_BUF>
	setSIPR(ipAddr);			//set IP addr
 8001dde:	20f0      	movs	r0, #240	; 0xf0
 8001de0:	0031      	movs	r1, r6
 8001de2:	2204      	movs	r2, #4
 8001de4:	0100      	lsls	r0, r0, #4
 8001de6:	f7ff fcf5 	bl	80017d4 <WIZCHIP_WRITE_BUF>
	setGAR(gateWay);			//set gate way
 8001dea:	2080      	movs	r0, #128	; 0x80
 8001dec:	0029      	movs	r1, r5
 8001dee:	2204      	movs	r2, #4
 8001df0:	0040      	lsls	r0, r0, #1
 8001df2:	f7ff fcef 	bl	80017d4 <WIZCHIP_WRITE_BUF>
	setSUBR(subNet);			//set subnet
 8001df6:	20a0      	movs	r0, #160	; 0xa0
 8001df8:	2204      	movs	r2, #4
 8001dfa:	0021      	movs	r1, r4
 8001dfc:	00c0      	lsls	r0, r0, #3
 8001dfe:	f7ff fce9 	bl	80017d4 <WIZCHIP_WRITE_BUF>
//        }
//    }

//    UART_Printf("Closing socket.\r\n");
//    close(http_socket);
}
 8001e02:	b00d      	add	sp, #52	; 0x34
 8001e04:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001e06:	46c0      	nop			; (mov r8, r8)
 8001e08:	08001c91 	.word	0x08001c91
 8001e0c:	08001c7d 	.word	0x08001c7d
 8001e10:	08001ce9 	.word	0x08001ce9
 8001e14:	08001cbd 	.word	0x08001cbd
 8001e18:	08001cd1 	.word	0x08001cd1
 8001e1c:	08001ca5 	.word	0x08001ca5
 8001e20:	08002ca0 	.word	0x08002ca0
 8001e24:	08002cb4 	.word	0x08002cb4
 8001e28:	08002ccf 	.word	0x08002ccf

08001e2c <loop>:

void loop() {
    HAL_Delay(1000);
 8001e2c:	20fa      	movs	r0, #250	; 0xfa
void loop() {
 8001e2e:	b510      	push	{r4, lr}
    HAL_Delay(1000);
 8001e30:	0080      	lsls	r0, r0, #2
 8001e32:	f7fe fa2f 	bl	8000294 <HAL_Delay>
}
 8001e36:	bd10      	pop	{r4, pc}

08001e38 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001e38:	b530      	push	{r4, r5, lr}
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001e3a:	2410      	movs	r4, #16
{
 8001e3c:	b095      	sub	sp, #84	; 0x54
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001e3e:	2230      	movs	r2, #48	; 0x30
 8001e40:	2100      	movs	r1, #0
 8001e42:	a808      	add	r0, sp, #32
 8001e44:	f000 fa5d 	bl	8002302 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001e48:	0022      	movs	r2, r4
 8001e4a:	2100      	movs	r1, #0
 8001e4c:	4668      	mov	r0, sp
 8001e4e:	f000 fa58 	bl	8002302 <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001e52:	0022      	movs	r2, r4
 8001e54:	2100      	movs	r1, #0
 8001e56:	a804      	add	r0, sp, #16
 8001e58:	f000 fa53 	bl	8002302 <memset>

  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_HSE;
 8001e5c:	2303      	movs	r3, #3
 8001e5e:	9308      	str	r3, [sp, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001e60:	2380      	movs	r3, #128	; 0x80
 8001e62:	025b      	lsls	r3, r3, #9
 8001e64:	9311      	str	r3, [sp, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL6;
 8001e66:	2380      	movs	r3, #128	; 0x80
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8001e68:	2501      	movs	r5, #1
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001e6a:	940c      	str	r4, [sp, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL6;
 8001e6c:	035b      	lsls	r3, r3, #13
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001e6e:	3c0e      	subs	r4, #14
  RCC_OscInitStruct.PLL.PREDIV = RCC_PREDIV_DIV1;
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001e70:	a808      	add	r0, sp, #32
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001e72:	9410      	str	r4, [sp, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL6;
 8001e74:	9312      	str	r3, [sp, #72]	; 0x48
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8001e76:	9509      	str	r5, [sp, #36]	; 0x24
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001e78:	950b      	str	r5, [sp, #44]	; 0x2c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001e7a:	f7fe fbbf 	bl	80005fc <HAL_RCC_OscConfig>
  {
    Error_Handler();
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001e7e:	2307      	movs	r3, #7
                              |RCC_CLOCKTYPE_PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001e80:	9401      	str	r4, [sp, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001e82:	2400      	movs	r4, #0
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8001e84:	0029      	movs	r1, r5
 8001e86:	4668      	mov	r0, sp
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001e88:	9300      	str	r3, [sp, #0]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001e8a:	9402      	str	r4, [sp, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8001e8c:	9403      	str	r4, [sp, #12]
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8001e8e:	f7fe fdc9 	bl	8000a24 <HAL_RCC_ClockConfig>
  {
    Error_Handler();
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1|RCC_PERIPHCLK_I2C1;
 8001e92:	2321      	movs	r3, #33	; 0x21
  PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK1;
  PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_HSI;
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001e94:	a804      	add	r0, sp, #16
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1|RCC_PERIPHCLK_I2C1;
 8001e96:	9304      	str	r3, [sp, #16]
  PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK1;
 8001e98:	9406      	str	r4, [sp, #24]
  PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_HSI;
 8001e9a:	9407      	str	r4, [sp, #28]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001e9c:	f7fe fe6e 	bl	8000b7c <HAL_RCCEx_PeriphCLKConfig>
  {
    Error_Handler();
  }
}
 8001ea0:	b015      	add	sp, #84	; 0x54
 8001ea2:	bd30      	pop	{r4, r5, pc}

08001ea4 <main>:
{
 8001ea4:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001ea6:	b089      	sub	sp, #36	; 0x24
  HAL_Init();
 8001ea8:	f7fe f9d6 	bl	8000258 <HAL_Init>
  SystemClock_Config();
 8001eac:	f7ff ffc4 	bl	8001e38 <SystemClock_Config>
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001eb0:	2214      	movs	r2, #20
 8001eb2:	2100      	movs	r1, #0
 8001eb4:	a803      	add	r0, sp, #12
 8001eb6:	f000 fa24 	bl	8002302 <memset>

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8001eba:	2080      	movs	r0, #128	; 0x80
 8001ebc:	4b44      	ldr	r3, [pc, #272]	; (8001fd0 <main+0x12c>)
 8001ebe:	03c0      	lsls	r0, r0, #15
 8001ec0:	6959      	ldr	r1, [r3, #20]
  HAL_GPIO_WritePin(SPI1_CS0_GPIO_Port, SPI1_CS0_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin : DEBUG_LED_Pin */
  GPIO_InitStruct.Pin = DEBUG_LED_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_OD;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ec2:	2400      	movs	r4, #0
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8001ec4:	4301      	orrs	r1, r0
 8001ec6:	6159      	str	r1, [r3, #20]
 8001ec8:	695a      	ldr	r2, [r3, #20]
  GPIO_InitStruct.Pin = DEBUG_LED_Pin;
 8001eca:	2610      	movs	r6, #16
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8001ecc:	4002      	ands	r2, r0
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001ece:	2080      	movs	r0, #128	; 0x80
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8001ed0:	9200      	str	r2, [sp, #0]
 8001ed2:	9a00      	ldr	r2, [sp, #0]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001ed4:	6959      	ldr	r1, [r3, #20]
 8001ed6:	0280      	lsls	r0, r0, #10
 8001ed8:	4301      	orrs	r1, r0
 8001eda:	6159      	str	r1, [r3, #20]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001edc:	2180      	movs	r1, #128	; 0x80
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001ede:	695a      	ldr	r2, [r3, #20]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001ee0:	02c9      	lsls	r1, r1, #11
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001ee2:	4002      	ands	r2, r0
  HAL_GPIO_WritePin(DEBUG_LED_GPIO_Port, DEBUG_LED_Pin, GPIO_PIN_RESET);
 8001ee4:	2090      	movs	r0, #144	; 0x90
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001ee6:	9201      	str	r2, [sp, #4]
 8001ee8:	9a01      	ldr	r2, [sp, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001eea:	695a      	ldr	r2, [r3, #20]
  HAL_GPIO_WritePin(DEBUG_LED_GPIO_Port, DEBUG_LED_Pin, GPIO_PIN_RESET);
 8001eec:	05c0      	lsls	r0, r0, #23
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001eee:	430a      	orrs	r2, r1
 8001ef0:	615a      	str	r2, [r3, #20]
 8001ef2:	695b      	ldr	r3, [r3, #20]
  HAL_GPIO_WritePin(DEBUG_LED_GPIO_Port, DEBUG_LED_Pin, GPIO_PIN_RESET);
 8001ef4:	2200      	movs	r2, #0
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001ef6:	400b      	ands	r3, r1
 8001ef8:	9302      	str	r3, [sp, #8]
  HAL_GPIO_WritePin(DEBUG_LED_GPIO_Port, DEBUG_LED_Pin, GPIO_PIN_RESET);
 8001efa:	2110      	movs	r1, #16
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001efc:	9b02      	ldr	r3, [sp, #8]
  HAL_GPIO_WritePin(DEBUG_LED_GPIO_Port, DEBUG_LED_Pin, GPIO_PIN_RESET);
 8001efe:	f7fe fad3 	bl	80004a8 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(SPI1_CS0_GPIO_Port, SPI1_CS0_Pin, GPIO_PIN_RESET);
 8001f02:	2200      	movs	r2, #0
 8001f04:	2102      	movs	r1, #2
 8001f06:	4833      	ldr	r0, [pc, #204]	; (8001fd4 <main+0x130>)
 8001f08:	f7fe face 	bl	80004a8 <HAL_GPIO_WritePin>
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
  HAL_GPIO_Init(DEBUG_LED_GPIO_Port, &GPIO_InitStruct);
 8001f0c:	2090      	movs	r0, #144	; 0x90
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_OD;
 8001f0e:	2311      	movs	r3, #17
  HAL_GPIO_Init(DEBUG_LED_GPIO_Port, &GPIO_InitStruct);
 8001f10:	a903      	add	r1, sp, #12
 8001f12:	05c0      	lsls	r0, r0, #23

  /*Configure GPIO pin : SPI1_CS0_Pin */
  GPIO_InitStruct.Pin = SPI1_CS0_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001f14:	2701      	movs	r7, #1
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_OD;
 8001f16:	9304      	str	r3, [sp, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f18:	9405      	str	r4, [sp, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001f1a:	9406      	str	r4, [sp, #24]
  GPIO_InitStruct.Pin = DEBUG_LED_Pin;
 8001f1c:	9603      	str	r6, [sp, #12]
  HAL_GPIO_Init(DEBUG_LED_GPIO_Port, &GPIO_InitStruct);
 8001f1e:	f7fe fa13 	bl	8000348 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = SPI1_CS0_Pin;
 8001f22:	2302      	movs	r3, #2
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
  HAL_GPIO_Init(SPI1_CS0_GPIO_Port, &GPIO_InitStruct);
 8001f24:	a903      	add	r1, sp, #12
 8001f26:	482b      	ldr	r0, [pc, #172]	; (8001fd4 <main+0x130>)
  GPIO_InitStruct.Pin = SPI1_CS0_Pin;
 8001f28:	9303      	str	r3, [sp, #12]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f2a:	9405      	str	r4, [sp, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001f2c:	9406      	str	r4, [sp, #24]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001f2e:	9704      	str	r7, [sp, #16]
  HAL_GPIO_Init(SPI1_CS0_GPIO_Port, &GPIO_InitStruct);
 8001f30:	f7fe fa0a 	bl	8000348 <HAL_GPIO_Init>
  hi2c1.Instance = I2C1;
 8001f34:	4d28      	ldr	r5, [pc, #160]	; (8001fd8 <main+0x134>)
 8001f36:	4b29      	ldr	r3, [pc, #164]	; (8001fdc <main+0x138>)
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8001f38:	0028      	movs	r0, r5
  hi2c1.Instance = I2C1;
 8001f3a:	602b      	str	r3, [r5, #0]
  hi2c1.Init.Timing = 0x2000090E;
 8001f3c:	4b28      	ldr	r3, [pc, #160]	; (8001fe0 <main+0x13c>)
  hi2c1.Init.OwnAddress1 = 0;
 8001f3e:	60ac      	str	r4, [r5, #8]
  hi2c1.Init.Timing = 0x2000090E;
 8001f40:	606b      	str	r3, [r5, #4]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001f42:	612c      	str	r4, [r5, #16]
  hi2c1.Init.OwnAddress2 = 0;
 8001f44:	616c      	str	r4, [r5, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8001f46:	61ac      	str	r4, [r5, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001f48:	61ec      	str	r4, [r5, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001f4a:	622c      	str	r4, [r5, #32]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001f4c:	60ef      	str	r7, [r5, #12]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8001f4e:	f7fe fab5 	bl	80004bc <HAL_I2C_Init>
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8001f52:	0021      	movs	r1, r4
 8001f54:	0028      	movs	r0, r5
 8001f56:	f7fe fb07 	bl	8000568 <HAL_I2CEx_ConfigAnalogFilter>
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8001f5a:	0021      	movs	r1, r4
 8001f5c:	0028      	movs	r0, r5
 8001f5e:	f7fe fb29 	bl	80005b4 <HAL_I2CEx_ConfigDigitalFilter>
  hspi1.Instance = SPI1;
 8001f62:	4820      	ldr	r0, [pc, #128]	; (8001fe4 <main+0x140>)
 8001f64:	4b20      	ldr	r3, [pc, #128]	; (8001fe8 <main+0x144>)
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8001f66:	6084      	str	r4, [r0, #8]
  hspi1.Instance = SPI1;
 8001f68:	6003      	str	r3, [r0, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8001f6a:	2382      	movs	r3, #130	; 0x82
 8001f6c:	005b      	lsls	r3, r3, #1
 8001f6e:	6043      	str	r3, [r0, #4]
  hspi1.Init.DataSize = SPI_DATASIZE_4BIT;
 8001f70:	33fd      	adds	r3, #253	; 0xfd
 8001f72:	33ff      	adds	r3, #255	; 0xff
 8001f74:	60c3      	str	r3, [r0, #12]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8001f76:	3b01      	subs	r3, #1
 8001f78:	3bff      	subs	r3, #255	; 0xff
 8001f7a:	6183      	str	r3, [r0, #24]
  hspi1.Init.CRCPolynomial = 7;
 8001f7c:	3bfa      	subs	r3, #250	; 0xfa
 8001f7e:	3bff      	subs	r3, #255	; 0xff
 8001f80:	62c3      	str	r3, [r0, #44]	; 0x2c
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8001f82:	19db      	adds	r3, r3, r7
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8001f84:	6104      	str	r4, [r0, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001f86:	6144      	str	r4, [r0, #20]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001f88:	6204      	str	r4, [r0, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8001f8a:	6244      	str	r4, [r0, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001f8c:	6284      	str	r4, [r0, #40]	; 0x28
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8001f8e:	6304      	str	r4, [r0, #48]	; 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8001f90:	6343      	str	r3, [r0, #52]	; 0x34
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_8;
 8001f92:	61c6      	str	r6, [r0, #28]
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8001f94:	f7fe ff42 	bl	8000e1c <HAL_SPI_Init>
  huart1.Instance = USART1;
 8001f98:	4814      	ldr	r0, [pc, #80]	; (8001fec <main+0x148>)
 8001f9a:	4b15      	ldr	r3, [pc, #84]	; (8001ff0 <main+0x14c>)
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8001f9c:	6084      	str	r4, [r0, #8]
  huart1.Instance = USART1;
 8001f9e:	6003      	str	r3, [r0, #0]
  huart1.Init.BaudRate = 115200;
 8001fa0:	23e1      	movs	r3, #225	; 0xe1
 8001fa2:	025b      	lsls	r3, r3, #9
 8001fa4:	6043      	str	r3, [r0, #4]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8001fa6:	230c      	movs	r3, #12
  huart1.Init.StopBits = UART_STOPBITS_1;
 8001fa8:	60c4      	str	r4, [r0, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8001faa:	6104      	str	r4, [r0, #16]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001fac:	6184      	str	r4, [r0, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8001fae:	61c4      	str	r4, [r0, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001fb0:	6204      	str	r4, [r0, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001fb2:	6244      	str	r4, [r0, #36]	; 0x24
	  HAL_GPIO_TogglePin(DEBUG_LED_GPIO_Port, DEBUG_LED_Pin);
 8001fb4:	2490      	movs	r4, #144	; 0x90
  huart1.Init.Mode = UART_MODE_TX_RX;
 8001fb6:	6143      	str	r3, [r0, #20]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8001fb8:	f7ff fb42 	bl	8001640 <HAL_UART_Init>
  init();
 8001fbc:	f7ff fe9e 	bl	8001cfc <init>
	  HAL_GPIO_TogglePin(DEBUG_LED_GPIO_Port, DEBUG_LED_Pin);
 8001fc0:	05e4      	lsls	r4, r4, #23
	loop();
 8001fc2:	f7ff ff33 	bl	8001e2c <loop>
	  HAL_GPIO_TogglePin(DEBUG_LED_GPIO_Port, DEBUG_LED_Pin);
 8001fc6:	2110      	movs	r1, #16
 8001fc8:	0020      	movs	r0, r4
 8001fca:	f7fe fa73 	bl	80004b4 <HAL_GPIO_TogglePin>
 8001fce:	e7f8      	b.n	8001fc2 <main+0x11e>
 8001fd0:	40021000 	.word	0x40021000
 8001fd4:	48000400 	.word	0x48000400
 8001fd8:	200000bc 	.word	0x200000bc
 8001fdc:	40005400 	.word	0x40005400
 8001fe0:	2000090e 	.word	0x2000090e
 8001fe4:	20000178 	.word	0x20000178
 8001fe8:	40013000 	.word	0x40013000
 8001fec:	20000108 	.word	0x20000108
 8001ff0:	40013800 	.word	0x40013800

08001ff4 <HAL_MspInit>:
{
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001ff4:	2001      	movs	r0, #1
 8001ff6:	4b0a      	ldr	r3, [pc, #40]	; (8002020 <HAL_MspInit+0x2c>)
{
 8001ff8:	b082      	sub	sp, #8
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001ffa:	6999      	ldr	r1, [r3, #24]
 8001ffc:	4301      	orrs	r1, r0
 8001ffe:	6199      	str	r1, [r3, #24]
  __HAL_RCC_PWR_CLK_ENABLE();
 8002000:	2180      	movs	r1, #128	; 0x80
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002002:	699a      	ldr	r2, [r3, #24]
  __HAL_RCC_PWR_CLK_ENABLE();
 8002004:	0549      	lsls	r1, r1, #21
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002006:	4002      	ands	r2, r0
 8002008:	9200      	str	r2, [sp, #0]
 800200a:	9a00      	ldr	r2, [sp, #0]
  __HAL_RCC_PWR_CLK_ENABLE();
 800200c:	69da      	ldr	r2, [r3, #28]
 800200e:	430a      	orrs	r2, r1
 8002010:	61da      	str	r2, [r3, #28]
 8002012:	69db      	ldr	r3, [r3, #28]
 8002014:	400b      	ands	r3, r1
 8002016:	9301      	str	r3, [sp, #4]
 8002018:	9b01      	ldr	r3, [sp, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800201a:	b002      	add	sp, #8
 800201c:	4770      	bx	lr
 800201e:	46c0      	nop			; (mov r8, r8)
 8002020:	40021000 	.word	0x40021000

08002024 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8002024:	b510      	push	{r4, lr}
 8002026:	0004      	movs	r4, r0
 8002028:	b088      	sub	sp, #32
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800202a:	2214      	movs	r2, #20
 800202c:	2100      	movs	r1, #0
 800202e:	a803      	add	r0, sp, #12
 8002030:	f000 f967 	bl	8002302 <memset>
  if(hi2c->Instance==I2C1)
 8002034:	4b14      	ldr	r3, [pc, #80]	; (8002088 <HAL_I2C_MspInit+0x64>)
 8002036:	6822      	ldr	r2, [r4, #0]
 8002038:	429a      	cmp	r2, r3
 800203a:	d122      	bne.n	8002082 <HAL_I2C_MspInit+0x5e>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800203c:	2180      	movs	r1, #128	; 0x80
 800203e:	4c13      	ldr	r4, [pc, #76]	; (800208c <HAL_I2C_MspInit+0x68>)
 8002040:	0289      	lsls	r1, r1, #10
 8002042:	6962      	ldr	r2, [r4, #20]
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
    GPIO_InitStruct.Pull = GPIO_PULLUP;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002044:	2090      	movs	r0, #144	; 0x90
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002046:	430a      	orrs	r2, r1
 8002048:	6162      	str	r2, [r4, #20]
 800204a:	6963      	ldr	r3, [r4, #20]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800204c:	05c0      	lsls	r0, r0, #23
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800204e:	400b      	ands	r3, r1
 8002050:	9301      	str	r3, [sp, #4]
 8002052:	9b01      	ldr	r3, [sp, #4]
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8002054:	23c0      	movs	r3, #192	; 0xc0
 8002056:	00db      	lsls	r3, r3, #3
 8002058:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800205a:	2312      	movs	r3, #18
 800205c:	9304      	str	r3, [sp, #16]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 800205e:	3b11      	subs	r3, #17
 8002060:	9305      	str	r3, [sp, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8002062:	3302      	adds	r3, #2
 8002064:	9306      	str	r3, [sp, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002066:	a903      	add	r1, sp, #12
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8002068:	3301      	adds	r3, #1
 800206a:	9307      	str	r3, [sp, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800206c:	f7fe f96c 	bl	8000348 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8002070:	2180      	movs	r1, #128	; 0x80
 8002072:	69e2      	ldr	r2, [r4, #28]
 8002074:	0389      	lsls	r1, r1, #14
 8002076:	430a      	orrs	r2, r1
 8002078:	61e2      	str	r2, [r4, #28]
 800207a:	69e3      	ldr	r3, [r4, #28]
 800207c:	400b      	ands	r3, r1
 800207e:	9302      	str	r3, [sp, #8]
 8002080:	9b02      	ldr	r3, [sp, #8]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8002082:	b008      	add	sp, #32
 8002084:	bd10      	pop	{r4, pc}
 8002086:	46c0      	nop			; (mov r8, r8)
 8002088:	40005400 	.word	0x40005400
 800208c:	40021000 	.word	0x40021000

08002090 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8002090:	b510      	push	{r4, lr}
 8002092:	0004      	movs	r4, r0
 8002094:	b088      	sub	sp, #32
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002096:	2214      	movs	r2, #20
 8002098:	2100      	movs	r1, #0
 800209a:	a803      	add	r0, sp, #12
 800209c:	f000 f931 	bl	8002302 <memset>
  if(hspi->Instance==SPI1)
 80020a0:	4b11      	ldr	r3, [pc, #68]	; (80020e8 <HAL_SPI_MspInit+0x58>)
 80020a2:	6822      	ldr	r2, [r4, #0]
 80020a4:	429a      	cmp	r2, r3
 80020a6:	d11d      	bne.n	80020e4 <HAL_SPI_MspInit+0x54>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 80020a8:	2080      	movs	r0, #128	; 0x80
 80020aa:	4b10      	ldr	r3, [pc, #64]	; (80020ec <HAL_SPI_MspInit+0x5c>)
 80020ac:	0140      	lsls	r0, r0, #5
 80020ae:	6999      	ldr	r1, [r3, #24]
 80020b0:	4301      	orrs	r1, r0
 80020b2:	6199      	str	r1, [r3, #24]
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80020b4:	2180      	movs	r1, #128	; 0x80
    __HAL_RCC_SPI1_CLK_ENABLE();
 80020b6:	699a      	ldr	r2, [r3, #24]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80020b8:	0289      	lsls	r1, r1, #10
    __HAL_RCC_SPI1_CLK_ENABLE();
 80020ba:	4002      	ands	r2, r0
 80020bc:	9201      	str	r2, [sp, #4]
 80020be:	9a01      	ldr	r2, [sp, #4]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80020c0:	695a      	ldr	r2, [r3, #20]
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
    GPIO_InitStruct.Alternate = GPIO_AF0_SPI1;
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80020c2:	2090      	movs	r0, #144	; 0x90
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80020c4:	430a      	orrs	r2, r1
 80020c6:	615a      	str	r2, [r3, #20]
 80020c8:	695b      	ldr	r3, [r3, #20]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80020ca:	05c0      	lsls	r0, r0, #23
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80020cc:	400b      	ands	r3, r1
 80020ce:	9302      	str	r3, [sp, #8]
 80020d0:	9b02      	ldr	r3, [sp, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 80020d2:	23e0      	movs	r3, #224	; 0xe0
 80020d4:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80020d6:	3bde      	subs	r3, #222	; 0xde
 80020d8:	9304      	str	r3, [sp, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80020da:	a903      	add	r1, sp, #12
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80020dc:	3301      	adds	r3, #1
 80020de:	9306      	str	r3, [sp, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80020e0:	f7fe f932 	bl	8000348 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 80020e4:	b008      	add	sp, #32
 80020e6:	bd10      	pop	{r4, pc}
 80020e8:	40013000 	.word	0x40013000
 80020ec:	40021000 	.word	0x40021000

080020f0 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80020f0:	b510      	push	{r4, lr}
 80020f2:	0004      	movs	r4, r0
 80020f4:	b088      	sub	sp, #32
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80020f6:	2214      	movs	r2, #20
 80020f8:	2100      	movs	r1, #0
 80020fa:	a803      	add	r0, sp, #12
 80020fc:	f000 f901 	bl	8002302 <memset>
  if(huart->Instance==USART1)
 8002100:	4b12      	ldr	r3, [pc, #72]	; (800214c <HAL_UART_MspInit+0x5c>)
 8002102:	6822      	ldr	r2, [r4, #0]
 8002104:	429a      	cmp	r2, r3
 8002106:	d11f      	bne.n	8002148 <HAL_UART_MspInit+0x58>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8002108:	2080      	movs	r0, #128	; 0x80
 800210a:	4b11      	ldr	r3, [pc, #68]	; (8002150 <HAL_UART_MspInit+0x60>)
 800210c:	01c0      	lsls	r0, r0, #7
 800210e:	6999      	ldr	r1, [r3, #24]
 8002110:	4301      	orrs	r1, r0
 8002112:	6199      	str	r1, [r3, #24]
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002114:	2180      	movs	r1, #128	; 0x80
    __HAL_RCC_USART1_CLK_ENABLE();
 8002116:	699a      	ldr	r2, [r3, #24]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002118:	0289      	lsls	r1, r1, #10
    __HAL_RCC_USART1_CLK_ENABLE();
 800211a:	4002      	ands	r2, r0
 800211c:	9201      	str	r2, [sp, #4]
 800211e:	9a01      	ldr	r2, [sp, #4]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002120:	695a      	ldr	r2, [r3, #20]
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
    GPIO_InitStruct.Alternate = GPIO_AF1_USART1;
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002122:	2090      	movs	r0, #144	; 0x90
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002124:	430a      	orrs	r2, r1
 8002126:	615a      	str	r2, [r3, #20]
 8002128:	695b      	ldr	r3, [r3, #20]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800212a:	05c0      	lsls	r0, r0, #23
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800212c:	400b      	ands	r3, r1
 800212e:	9302      	str	r3, [sp, #8]
 8002130:	9b02      	ldr	r3, [sp, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8002132:	230c      	movs	r3, #12
 8002134:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002136:	3b0a      	subs	r3, #10
 8002138:	9304      	str	r3, [sp, #16]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800213a:	3301      	adds	r3, #1
 800213c:	9306      	str	r3, [sp, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800213e:	a903      	add	r1, sp, #12
    GPIO_InitStruct.Alternate = GPIO_AF1_USART1;
 8002140:	3b02      	subs	r3, #2
 8002142:	9307      	str	r3, [sp, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002144:	f7fe f900 	bl	8000348 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 8002148:	b008      	add	sp, #32
 800214a:	bd10      	pop	{r4, pc}
 800214c:	40013800 	.word	0x40013800
 8002150:	40021000 	.word	0x40021000

08002154 <NMI_Handler>:
 8002154:	4770      	bx	lr

08002156 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002156:	e7fe      	b.n	8002156 <HardFault_Handler>

08002158 <SVC_Handler>:
 8002158:	4770      	bx	lr

0800215a <PendSV_Handler>:

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800215a:	4770      	bx	lr

0800215c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800215c:	b510      	push	{r4, lr}
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800215e:	f7fe f88b 	bl	8000278 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002162:	bd10      	pop	{r4, pc}

08002164 <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8002164:	b570      	push	{r4, r5, r6, lr}
 8002166:	000e      	movs	r6, r1
 8002168:	0015      	movs	r5, r2
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800216a:	000c      	movs	r4, r1
 800216c:	1ba3      	subs	r3, r4, r6
 800216e:	429d      	cmp	r5, r3
 8002170:	dc01      	bgt.n	8002176 <_read+0x12>
	{
		*ptr++ = __io_getchar();
	}

return len;
}
 8002172:	0028      	movs	r0, r5
 8002174:	bd70      	pop	{r4, r5, r6, pc}
		*ptr++ = __io_getchar();
 8002176:	e000      	b.n	800217a <_read+0x16>
 8002178:	bf00      	nop
 800217a:	7020      	strb	r0, [r4, #0]
 800217c:	3401      	adds	r4, #1
 800217e:	e7f5      	b.n	800216c <_read+0x8>

08002180 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8002180:	b570      	push	{r4, r5, r6, lr}
 8002182:	000e      	movs	r6, r1
 8002184:	0015      	movs	r5, r2
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002186:	000c      	movs	r4, r1
 8002188:	1ba3      	subs	r3, r4, r6
 800218a:	429d      	cmp	r5, r3
 800218c:	dc01      	bgt.n	8002192 <_write+0x12>
	{
		__io_putchar(*ptr++);
	}
	return len;
}
 800218e:	0028      	movs	r0, r5
 8002190:	bd70      	pop	{r4, r5, r6, pc}
		__io_putchar(*ptr++);
 8002192:	7820      	ldrb	r0, [r4, #0]
 8002194:	e000      	b.n	8002198 <_write+0x18>
 8002196:	bf00      	nop
 8002198:	3401      	adds	r4, #1
 800219a:	e7f5      	b.n	8002188 <_write+0x8>

0800219c <_sbrk>:
{
	extern char end asm("end");
	static char *heap_end;
	char *prev_heap_end;

	if (heap_end == 0)
 800219c:	4b0a      	ldr	r3, [pc, #40]	; (80021c8 <_sbrk+0x2c>)
{
 800219e:	b510      	push	{r4, lr}
	if (heap_end == 0)
 80021a0:	6819      	ldr	r1, [r3, #0]
{
 80021a2:	0002      	movs	r2, r0
	if (heap_end == 0)
 80021a4:	2900      	cmp	r1, #0
 80021a6:	d101      	bne.n	80021ac <_sbrk+0x10>
		heap_end = &end;
 80021a8:	4908      	ldr	r1, [pc, #32]	; (80021cc <_sbrk+0x30>)
 80021aa:	6019      	str	r1, [r3, #0]

	prev_heap_end = heap_end;
	if (heap_end + incr > stack_ptr)
 80021ac:	4669      	mov	r1, sp
	prev_heap_end = heap_end;
 80021ae:	6818      	ldr	r0, [r3, #0]
	if (heap_end + incr > stack_ptr)
 80021b0:	1882      	adds	r2, r0, r2
 80021b2:	428a      	cmp	r2, r1
 80021b4:	d906      	bls.n	80021c4 <_sbrk+0x28>
	{
//		write(1, "Heap and stack collision\n", 25);
//		abort();
		errno = ENOMEM;
 80021b6:	f000 f871 	bl	800229c <__errno>
 80021ba:	230c      	movs	r3, #12
 80021bc:	6003      	str	r3, [r0, #0]
		return (caddr_t) -1;
 80021be:	2001      	movs	r0, #1
 80021c0:	4240      	negs	r0, r0
	}

	heap_end += incr;

	return (caddr_t) prev_heap_end;
}
 80021c2:	bd10      	pop	{r4, pc}
	heap_end += incr;
 80021c4:	601a      	str	r2, [r3, #0]
	return (caddr_t) prev_heap_end;
 80021c6:	e7fc      	b.n	80021c2 <_sbrk+0x26>
 80021c8:	200000ac 	.word	0x200000ac
 80021cc:	200001e0 	.word	0x200001e0

080021d0 <_close>:

int _close(int file)
{
	return -1;
}
 80021d0:	2001      	movs	r0, #1
 80021d2:	4240      	negs	r0, r0
 80021d4:	4770      	bx	lr

080021d6 <_fstat>:


int _fstat(int file, struct stat *st)
{
	st->st_mode = S_IFCHR;
 80021d6:	2380      	movs	r3, #128	; 0x80
 80021d8:	019b      	lsls	r3, r3, #6
	return 0;
}
 80021da:	2000      	movs	r0, #0
	st->st_mode = S_IFCHR;
 80021dc:	604b      	str	r3, [r1, #4]
}
 80021de:	4770      	bx	lr

080021e0 <_isatty>:

int _isatty(int file)
{
	return 1;
}
 80021e0:	2001      	movs	r0, #1
 80021e2:	4770      	bx	lr

080021e4 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
	return 0;
}
 80021e4:	2000      	movs	r0, #0
 80021e6:	4770      	bx	lr

080021e8 <SystemInit>:
  */
void SystemInit(void)
{
  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001U;
 80021e8:	2101      	movs	r1, #1
 80021ea:	4b11      	ldr	r3, [pc, #68]	; (8002230 <SystemInit+0x48>)
#if defined (STM32F051x8) || defined (STM32F058x8)
  /* Reset SW[1:0], HPRE[3:0], PPRE[2:0], ADCPRE and MCOSEL[2:0] bits */
  RCC->CFGR &= (uint32_t)0xF8FFB80CU;
#else
  /* Reset SW[1:0], HPRE[3:0], PPRE[2:0], ADCPRE, MCOSEL[2:0], MCOPRE[2:0] and PLLNODIV bits */
  RCC->CFGR &= (uint32_t)0x08FFB80CU;
 80021ec:	4811      	ldr	r0, [pc, #68]	; (8002234 <SystemInit+0x4c>)
  RCC->CR |= (uint32_t)0x00000001U;
 80021ee:	681a      	ldr	r2, [r3, #0]
 80021f0:	430a      	orrs	r2, r1
 80021f2:	601a      	str	r2, [r3, #0]
  RCC->CFGR &= (uint32_t)0x08FFB80CU;
 80021f4:	685a      	ldr	r2, [r3, #4]
 80021f6:	4002      	ands	r2, r0
 80021f8:	605a      	str	r2, [r3, #4]
#endif /* STM32F051x8 or STM32F058x8 */
  
  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFFFU;
 80021fa:	681a      	ldr	r2, [r3, #0]
 80021fc:	480e      	ldr	r0, [pc, #56]	; (8002238 <SystemInit+0x50>)
 80021fe:	4002      	ands	r2, r0
 8002200:	601a      	str	r2, [r3, #0]

  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFFU;
 8002202:	681a      	ldr	r2, [r3, #0]
 8002204:	480d      	ldr	r0, [pc, #52]	; (800223c <SystemInit+0x54>)
 8002206:	4002      	ands	r2, r0
 8002208:	601a      	str	r2, [r3, #0]

  /* Reset PLLSRC, PLLXTPRE and PLLMUL[3:0] bits */
  RCC->CFGR &= (uint32_t)0xFFC0FFFFU;
 800220a:	685a      	ldr	r2, [r3, #4]
 800220c:	480c      	ldr	r0, [pc, #48]	; (8002240 <SystemInit+0x58>)
 800220e:	4002      	ands	r2, r0

  /* Reset PREDIV[3:0] bits */
  RCC->CFGR2 &= (uint32_t)0xFFFFFFF0U;
 8002210:	200f      	movs	r0, #15
  RCC->CFGR &= (uint32_t)0xFFC0FFFFU;
 8002212:	605a      	str	r2, [r3, #4]
  RCC->CFGR2 &= (uint32_t)0xFFFFFFF0U;
 8002214:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002216:	4382      	bics	r2, r0
 8002218:	62da      	str	r2, [r3, #44]	; 0x2c
#elif defined (STM32F091xC) || defined (STM32F098xx)
  /* Reset USART3SW[1:0], USART2SW[1:0], USART1SW[1:0], I2C1SW, CECSW and ADCSW bits */
  RCC->CFGR3 &= (uint32_t)0xFFF0FEACU;
#elif defined (STM32F030x6) || defined (STM32F030x8) || defined (STM32F031x6) || defined (STM32F038xx) || defined (STM32F030xC)
  /* Reset USART1SW[1:0], I2C1SW and ADCSW bits */
  RCC->CFGR3 &= (uint32_t)0xFFFFFEECU;
 800221a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800221c:	4809      	ldr	r0, [pc, #36]	; (8002244 <SystemInit+0x5c>)
 800221e:	4002      	ands	r2, r0
 8002220:	631a      	str	r2, [r3, #48]	; 0x30
#else
 #warning "No target selected"
#endif

  /* Reset HSI14 bit */
  RCC->CR2 &= (uint32_t)0xFFFFFFFEU;
 8002222:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002224:	438a      	bics	r2, r1
 8002226:	635a      	str	r2, [r3, #52]	; 0x34

  /* Disable all interrupts */
  RCC->CIR = 0x00000000U;
 8002228:	2200      	movs	r2, #0
 800222a:	609a      	str	r2, [r3, #8]

}
 800222c:	4770      	bx	lr
 800222e:	46c0      	nop			; (mov r8, r8)
 8002230:	40021000 	.word	0x40021000
 8002234:	08ffb80c 	.word	0x08ffb80c
 8002238:	fef6ffff 	.word	0xfef6ffff
 800223c:	fffbffff 	.word	0xfffbffff
 8002240:	ffc0ffff 	.word	0xffc0ffff
 8002244:	fffffeec 	.word	0xfffffeec

08002248 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8002248:	480d      	ldr	r0, [pc, #52]	; (8002280 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 800224a:	4685      	mov	sp, r0

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 800224c:	480d      	ldr	r0, [pc, #52]	; (8002284 <LoopForever+0x6>)
  ldr r1, =_edata
 800224e:	490e      	ldr	r1, [pc, #56]	; (8002288 <LoopForever+0xa>)
  ldr r2, =_sidata
 8002250:	4a0e      	ldr	r2, [pc, #56]	; (800228c <LoopForever+0xe>)
  movs r3, #0
 8002252:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002254:	e002      	b.n	800225c <LoopCopyDataInit>

08002256 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002256:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002258:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800225a:	3304      	adds	r3, #4

0800225c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800225c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800225e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002260:	d3f9      	bcc.n	8002256 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002262:	4a0b      	ldr	r2, [pc, #44]	; (8002290 <LoopForever+0x12>)
  ldr r4, =_ebss
 8002264:	4c0b      	ldr	r4, [pc, #44]	; (8002294 <LoopForever+0x16>)
  movs r3, #0
 8002266:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002268:	e001      	b.n	800226e <LoopFillZerobss>

0800226a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800226a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800226c:	3204      	adds	r2, #4

0800226e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800226e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002270:	d3fb      	bcc.n	800226a <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit
 8002272:	f7ff ffb9 	bl	80021e8 <SystemInit>
/* Call static constructors */
  bl __libc_init_array
 8002276:	f000 f817 	bl	80022a8 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800227a:	f7ff fe13 	bl	8001ea4 <main>

0800227e <LoopForever>:

LoopForever:
    b LoopForever
 800227e:	e7fe      	b.n	800227e <LoopForever>
  ldr   r0, =_estack
 8002280:	20001000 	.word	0x20001000
  ldr r0, =_sdata
 8002284:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002288:	20000090 	.word	0x20000090
  ldr r2, =_sidata
 800228c:	08002d70 	.word	0x08002d70
  ldr r2, =_sbss
 8002290:	20000090 	.word	0x20000090
  ldr r4, =_ebss
 8002294:	200001e0 	.word	0x200001e0

08002298 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8002298:	e7fe      	b.n	8002298 <ADC1_IRQHandler>
	...

0800229c <__errno>:
 800229c:	4b01      	ldr	r3, [pc, #4]	; (80022a4 <__errno+0x8>)
 800229e:	6818      	ldr	r0, [r3, #0]
 80022a0:	4770      	bx	lr
 80022a2:	46c0      	nop			; (mov r8, r8)
 80022a4:	2000002c 	.word	0x2000002c

080022a8 <__libc_init_array>:
 80022a8:	b570      	push	{r4, r5, r6, lr}
 80022aa:	2600      	movs	r6, #0
 80022ac:	4d0c      	ldr	r5, [pc, #48]	; (80022e0 <__libc_init_array+0x38>)
 80022ae:	4c0d      	ldr	r4, [pc, #52]	; (80022e4 <__libc_init_array+0x3c>)
 80022b0:	1b64      	subs	r4, r4, r5
 80022b2:	10a4      	asrs	r4, r4, #2
 80022b4:	42a6      	cmp	r6, r4
 80022b6:	d109      	bne.n	80022cc <__libc_init_array+0x24>
 80022b8:	2600      	movs	r6, #0
 80022ba:	f000 fcd5 	bl	8002c68 <_init>
 80022be:	4d0a      	ldr	r5, [pc, #40]	; (80022e8 <__libc_init_array+0x40>)
 80022c0:	4c0a      	ldr	r4, [pc, #40]	; (80022ec <__libc_init_array+0x44>)
 80022c2:	1b64      	subs	r4, r4, r5
 80022c4:	10a4      	asrs	r4, r4, #2
 80022c6:	42a6      	cmp	r6, r4
 80022c8:	d105      	bne.n	80022d6 <__libc_init_array+0x2e>
 80022ca:	bd70      	pop	{r4, r5, r6, pc}
 80022cc:	00b3      	lsls	r3, r6, #2
 80022ce:	58eb      	ldr	r3, [r5, r3]
 80022d0:	4798      	blx	r3
 80022d2:	3601      	adds	r6, #1
 80022d4:	e7ee      	b.n	80022b4 <__libc_init_array+0xc>
 80022d6:	00b3      	lsls	r3, r6, #2
 80022d8:	58eb      	ldr	r3, [r5, r3]
 80022da:	4798      	blx	r3
 80022dc:	3601      	adds	r6, #1
 80022de:	e7f2      	b.n	80022c6 <__libc_init_array+0x1e>
 80022e0:	08002d68 	.word	0x08002d68
 80022e4:	08002d68 	.word	0x08002d68
 80022e8:	08002d68 	.word	0x08002d68
 80022ec:	08002d6c 	.word	0x08002d6c

080022f0 <memcpy>:
 80022f0:	2300      	movs	r3, #0
 80022f2:	b510      	push	{r4, lr}
 80022f4:	429a      	cmp	r2, r3
 80022f6:	d100      	bne.n	80022fa <memcpy+0xa>
 80022f8:	bd10      	pop	{r4, pc}
 80022fa:	5ccc      	ldrb	r4, [r1, r3]
 80022fc:	54c4      	strb	r4, [r0, r3]
 80022fe:	3301      	adds	r3, #1
 8002300:	e7f8      	b.n	80022f4 <memcpy+0x4>

08002302 <memset>:
 8002302:	0003      	movs	r3, r0
 8002304:	1882      	adds	r2, r0, r2
 8002306:	4293      	cmp	r3, r2
 8002308:	d100      	bne.n	800230c <memset+0xa>
 800230a:	4770      	bx	lr
 800230c:	7019      	strb	r1, [r3, #0]
 800230e:	3301      	adds	r3, #1
 8002310:	e7f9      	b.n	8002306 <memset+0x4>
	...

08002314 <_puts_r>:
 8002314:	b570      	push	{r4, r5, r6, lr}
 8002316:	0005      	movs	r5, r0
 8002318:	000e      	movs	r6, r1
 800231a:	2800      	cmp	r0, #0
 800231c:	d004      	beq.n	8002328 <_puts_r+0x14>
 800231e:	6983      	ldr	r3, [r0, #24]
 8002320:	2b00      	cmp	r3, #0
 8002322:	d101      	bne.n	8002328 <_puts_r+0x14>
 8002324:	f000 fa24 	bl	8002770 <__sinit>
 8002328:	69ab      	ldr	r3, [r5, #24]
 800232a:	68ac      	ldr	r4, [r5, #8]
 800232c:	2b00      	cmp	r3, #0
 800232e:	d102      	bne.n	8002336 <_puts_r+0x22>
 8002330:	0028      	movs	r0, r5
 8002332:	f000 fa1d 	bl	8002770 <__sinit>
 8002336:	4b24      	ldr	r3, [pc, #144]	; (80023c8 <_puts_r+0xb4>)
 8002338:	429c      	cmp	r4, r3
 800233a:	d10f      	bne.n	800235c <_puts_r+0x48>
 800233c:	686c      	ldr	r4, [r5, #4]
 800233e:	89a3      	ldrh	r3, [r4, #12]
 8002340:	071b      	lsls	r3, r3, #28
 8002342:	d502      	bpl.n	800234a <_puts_r+0x36>
 8002344:	6923      	ldr	r3, [r4, #16]
 8002346:	2b00      	cmp	r3, #0
 8002348:	d120      	bne.n	800238c <_puts_r+0x78>
 800234a:	0021      	movs	r1, r4
 800234c:	0028      	movs	r0, r5
 800234e:	f000 f8a1 	bl	8002494 <__swsetup_r>
 8002352:	2800      	cmp	r0, #0
 8002354:	d01a      	beq.n	800238c <_puts_r+0x78>
 8002356:	2001      	movs	r0, #1
 8002358:	4240      	negs	r0, r0
 800235a:	bd70      	pop	{r4, r5, r6, pc}
 800235c:	4b1b      	ldr	r3, [pc, #108]	; (80023cc <_puts_r+0xb8>)
 800235e:	429c      	cmp	r4, r3
 8002360:	d101      	bne.n	8002366 <_puts_r+0x52>
 8002362:	68ac      	ldr	r4, [r5, #8]
 8002364:	e7eb      	b.n	800233e <_puts_r+0x2a>
 8002366:	4b1a      	ldr	r3, [pc, #104]	; (80023d0 <_puts_r+0xbc>)
 8002368:	429c      	cmp	r4, r3
 800236a:	d1e8      	bne.n	800233e <_puts_r+0x2a>
 800236c:	68ec      	ldr	r4, [r5, #12]
 800236e:	e7e6      	b.n	800233e <_puts_r+0x2a>
 8002370:	3b01      	subs	r3, #1
 8002372:	3601      	adds	r6, #1
 8002374:	60a3      	str	r3, [r4, #8]
 8002376:	2b00      	cmp	r3, #0
 8002378:	da04      	bge.n	8002384 <_puts_r+0x70>
 800237a:	69a2      	ldr	r2, [r4, #24]
 800237c:	4293      	cmp	r3, r2
 800237e:	db16      	blt.n	80023ae <_puts_r+0x9a>
 8002380:	290a      	cmp	r1, #10
 8002382:	d014      	beq.n	80023ae <_puts_r+0x9a>
 8002384:	6823      	ldr	r3, [r4, #0]
 8002386:	1c5a      	adds	r2, r3, #1
 8002388:	6022      	str	r2, [r4, #0]
 800238a:	7019      	strb	r1, [r3, #0]
 800238c:	7831      	ldrb	r1, [r6, #0]
 800238e:	68a3      	ldr	r3, [r4, #8]
 8002390:	2900      	cmp	r1, #0
 8002392:	d1ed      	bne.n	8002370 <_puts_r+0x5c>
 8002394:	3b01      	subs	r3, #1
 8002396:	60a3      	str	r3, [r4, #8]
 8002398:	2b00      	cmp	r3, #0
 800239a:	da0f      	bge.n	80023bc <_puts_r+0xa8>
 800239c:	0022      	movs	r2, r4
 800239e:	310a      	adds	r1, #10
 80023a0:	0028      	movs	r0, r5
 80023a2:	f000 f821 	bl	80023e8 <__swbuf_r>
 80023a6:	1c43      	adds	r3, r0, #1
 80023a8:	d0d5      	beq.n	8002356 <_puts_r+0x42>
 80023aa:	200a      	movs	r0, #10
 80023ac:	e7d5      	b.n	800235a <_puts_r+0x46>
 80023ae:	0022      	movs	r2, r4
 80023b0:	0028      	movs	r0, r5
 80023b2:	f000 f819 	bl	80023e8 <__swbuf_r>
 80023b6:	1c43      	adds	r3, r0, #1
 80023b8:	d1e8      	bne.n	800238c <_puts_r+0x78>
 80023ba:	e7cc      	b.n	8002356 <_puts_r+0x42>
 80023bc:	200a      	movs	r0, #10
 80023be:	6823      	ldr	r3, [r4, #0]
 80023c0:	1c5a      	adds	r2, r3, #1
 80023c2:	6022      	str	r2, [r4, #0]
 80023c4:	7018      	strb	r0, [r3, #0]
 80023c6:	e7c8      	b.n	800235a <_puts_r+0x46>
 80023c8:	08002d28 	.word	0x08002d28
 80023cc:	08002d48 	.word	0x08002d48
 80023d0:	08002d08 	.word	0x08002d08

080023d4 <puts>:
 80023d4:	b510      	push	{r4, lr}
 80023d6:	4b03      	ldr	r3, [pc, #12]	; (80023e4 <puts+0x10>)
 80023d8:	0001      	movs	r1, r0
 80023da:	6818      	ldr	r0, [r3, #0]
 80023dc:	f7ff ff9a 	bl	8002314 <_puts_r>
 80023e0:	bd10      	pop	{r4, pc}
 80023e2:	46c0      	nop			; (mov r8, r8)
 80023e4:	2000002c 	.word	0x2000002c

080023e8 <__swbuf_r>:
 80023e8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80023ea:	0005      	movs	r5, r0
 80023ec:	000e      	movs	r6, r1
 80023ee:	0014      	movs	r4, r2
 80023f0:	2800      	cmp	r0, #0
 80023f2:	d004      	beq.n	80023fe <__swbuf_r+0x16>
 80023f4:	6983      	ldr	r3, [r0, #24]
 80023f6:	2b00      	cmp	r3, #0
 80023f8:	d101      	bne.n	80023fe <__swbuf_r+0x16>
 80023fa:	f000 f9b9 	bl	8002770 <__sinit>
 80023fe:	4b22      	ldr	r3, [pc, #136]	; (8002488 <__swbuf_r+0xa0>)
 8002400:	429c      	cmp	r4, r3
 8002402:	d12d      	bne.n	8002460 <__swbuf_r+0x78>
 8002404:	686c      	ldr	r4, [r5, #4]
 8002406:	69a3      	ldr	r3, [r4, #24]
 8002408:	60a3      	str	r3, [r4, #8]
 800240a:	89a3      	ldrh	r3, [r4, #12]
 800240c:	071b      	lsls	r3, r3, #28
 800240e:	d531      	bpl.n	8002474 <__swbuf_r+0x8c>
 8002410:	6923      	ldr	r3, [r4, #16]
 8002412:	2b00      	cmp	r3, #0
 8002414:	d02e      	beq.n	8002474 <__swbuf_r+0x8c>
 8002416:	6823      	ldr	r3, [r4, #0]
 8002418:	6922      	ldr	r2, [r4, #16]
 800241a:	b2f7      	uxtb	r7, r6
 800241c:	1a98      	subs	r0, r3, r2
 800241e:	6963      	ldr	r3, [r4, #20]
 8002420:	b2f6      	uxtb	r6, r6
 8002422:	4298      	cmp	r0, r3
 8002424:	db05      	blt.n	8002432 <__swbuf_r+0x4a>
 8002426:	0021      	movs	r1, r4
 8002428:	0028      	movs	r0, r5
 800242a:	f000 f933 	bl	8002694 <_fflush_r>
 800242e:	2800      	cmp	r0, #0
 8002430:	d126      	bne.n	8002480 <__swbuf_r+0x98>
 8002432:	68a3      	ldr	r3, [r4, #8]
 8002434:	3001      	adds	r0, #1
 8002436:	3b01      	subs	r3, #1
 8002438:	60a3      	str	r3, [r4, #8]
 800243a:	6823      	ldr	r3, [r4, #0]
 800243c:	1c5a      	adds	r2, r3, #1
 800243e:	6022      	str	r2, [r4, #0]
 8002440:	701f      	strb	r7, [r3, #0]
 8002442:	6963      	ldr	r3, [r4, #20]
 8002444:	4298      	cmp	r0, r3
 8002446:	d004      	beq.n	8002452 <__swbuf_r+0x6a>
 8002448:	89a3      	ldrh	r3, [r4, #12]
 800244a:	07db      	lsls	r3, r3, #31
 800244c:	d51a      	bpl.n	8002484 <__swbuf_r+0x9c>
 800244e:	2e0a      	cmp	r6, #10
 8002450:	d118      	bne.n	8002484 <__swbuf_r+0x9c>
 8002452:	0021      	movs	r1, r4
 8002454:	0028      	movs	r0, r5
 8002456:	f000 f91d 	bl	8002694 <_fflush_r>
 800245a:	2800      	cmp	r0, #0
 800245c:	d012      	beq.n	8002484 <__swbuf_r+0x9c>
 800245e:	e00f      	b.n	8002480 <__swbuf_r+0x98>
 8002460:	4b0a      	ldr	r3, [pc, #40]	; (800248c <__swbuf_r+0xa4>)
 8002462:	429c      	cmp	r4, r3
 8002464:	d101      	bne.n	800246a <__swbuf_r+0x82>
 8002466:	68ac      	ldr	r4, [r5, #8]
 8002468:	e7cd      	b.n	8002406 <__swbuf_r+0x1e>
 800246a:	4b09      	ldr	r3, [pc, #36]	; (8002490 <__swbuf_r+0xa8>)
 800246c:	429c      	cmp	r4, r3
 800246e:	d1ca      	bne.n	8002406 <__swbuf_r+0x1e>
 8002470:	68ec      	ldr	r4, [r5, #12]
 8002472:	e7c8      	b.n	8002406 <__swbuf_r+0x1e>
 8002474:	0021      	movs	r1, r4
 8002476:	0028      	movs	r0, r5
 8002478:	f000 f80c 	bl	8002494 <__swsetup_r>
 800247c:	2800      	cmp	r0, #0
 800247e:	d0ca      	beq.n	8002416 <__swbuf_r+0x2e>
 8002480:	2601      	movs	r6, #1
 8002482:	4276      	negs	r6, r6
 8002484:	0030      	movs	r0, r6
 8002486:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8002488:	08002d28 	.word	0x08002d28
 800248c:	08002d48 	.word	0x08002d48
 8002490:	08002d08 	.word	0x08002d08

08002494 <__swsetup_r>:
 8002494:	4b36      	ldr	r3, [pc, #216]	; (8002570 <__swsetup_r+0xdc>)
 8002496:	b570      	push	{r4, r5, r6, lr}
 8002498:	681d      	ldr	r5, [r3, #0]
 800249a:	0006      	movs	r6, r0
 800249c:	000c      	movs	r4, r1
 800249e:	2d00      	cmp	r5, #0
 80024a0:	d005      	beq.n	80024ae <__swsetup_r+0x1a>
 80024a2:	69ab      	ldr	r3, [r5, #24]
 80024a4:	2b00      	cmp	r3, #0
 80024a6:	d102      	bne.n	80024ae <__swsetup_r+0x1a>
 80024a8:	0028      	movs	r0, r5
 80024aa:	f000 f961 	bl	8002770 <__sinit>
 80024ae:	4b31      	ldr	r3, [pc, #196]	; (8002574 <__swsetup_r+0xe0>)
 80024b0:	429c      	cmp	r4, r3
 80024b2:	d10f      	bne.n	80024d4 <__swsetup_r+0x40>
 80024b4:	686c      	ldr	r4, [r5, #4]
 80024b6:	230c      	movs	r3, #12
 80024b8:	5ee2      	ldrsh	r2, [r4, r3]
 80024ba:	b293      	uxth	r3, r2
 80024bc:	0719      	lsls	r1, r3, #28
 80024be:	d42d      	bmi.n	800251c <__swsetup_r+0x88>
 80024c0:	06d9      	lsls	r1, r3, #27
 80024c2:	d411      	bmi.n	80024e8 <__swsetup_r+0x54>
 80024c4:	2309      	movs	r3, #9
 80024c6:	2001      	movs	r0, #1
 80024c8:	6033      	str	r3, [r6, #0]
 80024ca:	3337      	adds	r3, #55	; 0x37
 80024cc:	4313      	orrs	r3, r2
 80024ce:	81a3      	strh	r3, [r4, #12]
 80024d0:	4240      	negs	r0, r0
 80024d2:	bd70      	pop	{r4, r5, r6, pc}
 80024d4:	4b28      	ldr	r3, [pc, #160]	; (8002578 <__swsetup_r+0xe4>)
 80024d6:	429c      	cmp	r4, r3
 80024d8:	d101      	bne.n	80024de <__swsetup_r+0x4a>
 80024da:	68ac      	ldr	r4, [r5, #8]
 80024dc:	e7eb      	b.n	80024b6 <__swsetup_r+0x22>
 80024de:	4b27      	ldr	r3, [pc, #156]	; (800257c <__swsetup_r+0xe8>)
 80024e0:	429c      	cmp	r4, r3
 80024e2:	d1e8      	bne.n	80024b6 <__swsetup_r+0x22>
 80024e4:	68ec      	ldr	r4, [r5, #12]
 80024e6:	e7e6      	b.n	80024b6 <__swsetup_r+0x22>
 80024e8:	075b      	lsls	r3, r3, #29
 80024ea:	d513      	bpl.n	8002514 <__swsetup_r+0x80>
 80024ec:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80024ee:	2900      	cmp	r1, #0
 80024f0:	d008      	beq.n	8002504 <__swsetup_r+0x70>
 80024f2:	0023      	movs	r3, r4
 80024f4:	3344      	adds	r3, #68	; 0x44
 80024f6:	4299      	cmp	r1, r3
 80024f8:	d002      	beq.n	8002500 <__swsetup_r+0x6c>
 80024fa:	0030      	movs	r0, r6
 80024fc:	f000 fa3a 	bl	8002974 <_free_r>
 8002500:	2300      	movs	r3, #0
 8002502:	6363      	str	r3, [r4, #52]	; 0x34
 8002504:	2224      	movs	r2, #36	; 0x24
 8002506:	89a3      	ldrh	r3, [r4, #12]
 8002508:	4393      	bics	r3, r2
 800250a:	81a3      	strh	r3, [r4, #12]
 800250c:	2300      	movs	r3, #0
 800250e:	6063      	str	r3, [r4, #4]
 8002510:	6923      	ldr	r3, [r4, #16]
 8002512:	6023      	str	r3, [r4, #0]
 8002514:	2308      	movs	r3, #8
 8002516:	89a2      	ldrh	r2, [r4, #12]
 8002518:	4313      	orrs	r3, r2
 800251a:	81a3      	strh	r3, [r4, #12]
 800251c:	6923      	ldr	r3, [r4, #16]
 800251e:	2b00      	cmp	r3, #0
 8002520:	d10b      	bne.n	800253a <__swsetup_r+0xa6>
 8002522:	21a0      	movs	r1, #160	; 0xa0
 8002524:	2280      	movs	r2, #128	; 0x80
 8002526:	89a3      	ldrh	r3, [r4, #12]
 8002528:	0089      	lsls	r1, r1, #2
 800252a:	0092      	lsls	r2, r2, #2
 800252c:	400b      	ands	r3, r1
 800252e:	4293      	cmp	r3, r2
 8002530:	d003      	beq.n	800253a <__swsetup_r+0xa6>
 8002532:	0021      	movs	r1, r4
 8002534:	0030      	movs	r0, r6
 8002536:	f000 f9d9 	bl	80028ec <__smakebuf_r>
 800253a:	2301      	movs	r3, #1
 800253c:	89a2      	ldrh	r2, [r4, #12]
 800253e:	4013      	ands	r3, r2
 8002540:	d011      	beq.n	8002566 <__swsetup_r+0xd2>
 8002542:	2300      	movs	r3, #0
 8002544:	60a3      	str	r3, [r4, #8]
 8002546:	6963      	ldr	r3, [r4, #20]
 8002548:	425b      	negs	r3, r3
 800254a:	61a3      	str	r3, [r4, #24]
 800254c:	2000      	movs	r0, #0
 800254e:	6923      	ldr	r3, [r4, #16]
 8002550:	4283      	cmp	r3, r0
 8002552:	d1be      	bne.n	80024d2 <__swsetup_r+0x3e>
 8002554:	230c      	movs	r3, #12
 8002556:	5ee2      	ldrsh	r2, [r4, r3]
 8002558:	0613      	lsls	r3, r2, #24
 800255a:	d5ba      	bpl.n	80024d2 <__swsetup_r+0x3e>
 800255c:	2340      	movs	r3, #64	; 0x40
 800255e:	4313      	orrs	r3, r2
 8002560:	81a3      	strh	r3, [r4, #12]
 8002562:	3801      	subs	r0, #1
 8002564:	e7b5      	b.n	80024d2 <__swsetup_r+0x3e>
 8002566:	0792      	lsls	r2, r2, #30
 8002568:	d400      	bmi.n	800256c <__swsetup_r+0xd8>
 800256a:	6963      	ldr	r3, [r4, #20]
 800256c:	60a3      	str	r3, [r4, #8]
 800256e:	e7ed      	b.n	800254c <__swsetup_r+0xb8>
 8002570:	2000002c 	.word	0x2000002c
 8002574:	08002d28 	.word	0x08002d28
 8002578:	08002d48 	.word	0x08002d48
 800257c:	08002d08 	.word	0x08002d08

08002580 <__sflush_r>:
 8002580:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8002582:	898a      	ldrh	r2, [r1, #12]
 8002584:	0005      	movs	r5, r0
 8002586:	000c      	movs	r4, r1
 8002588:	0713      	lsls	r3, r2, #28
 800258a:	d460      	bmi.n	800264e <__sflush_r+0xce>
 800258c:	684b      	ldr	r3, [r1, #4]
 800258e:	2b00      	cmp	r3, #0
 8002590:	dc04      	bgt.n	800259c <__sflush_r+0x1c>
 8002592:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8002594:	2b00      	cmp	r3, #0
 8002596:	dc01      	bgt.n	800259c <__sflush_r+0x1c>
 8002598:	2000      	movs	r0, #0
 800259a:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 800259c:	6ae7      	ldr	r7, [r4, #44]	; 0x2c
 800259e:	2f00      	cmp	r7, #0
 80025a0:	d0fa      	beq.n	8002598 <__sflush_r+0x18>
 80025a2:	2300      	movs	r3, #0
 80025a4:	682e      	ldr	r6, [r5, #0]
 80025a6:	602b      	str	r3, [r5, #0]
 80025a8:	2380      	movs	r3, #128	; 0x80
 80025aa:	015b      	lsls	r3, r3, #5
 80025ac:	401a      	ands	r2, r3
 80025ae:	d034      	beq.n	800261a <__sflush_r+0x9a>
 80025b0:	6d60      	ldr	r0, [r4, #84]	; 0x54
 80025b2:	89a3      	ldrh	r3, [r4, #12]
 80025b4:	075b      	lsls	r3, r3, #29
 80025b6:	d506      	bpl.n	80025c6 <__sflush_r+0x46>
 80025b8:	6863      	ldr	r3, [r4, #4]
 80025ba:	1ac0      	subs	r0, r0, r3
 80025bc:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80025be:	2b00      	cmp	r3, #0
 80025c0:	d001      	beq.n	80025c6 <__sflush_r+0x46>
 80025c2:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80025c4:	1ac0      	subs	r0, r0, r3
 80025c6:	0002      	movs	r2, r0
 80025c8:	6a21      	ldr	r1, [r4, #32]
 80025ca:	2300      	movs	r3, #0
 80025cc:	0028      	movs	r0, r5
 80025ce:	6ae7      	ldr	r7, [r4, #44]	; 0x2c
 80025d0:	47b8      	blx	r7
 80025d2:	89a1      	ldrh	r1, [r4, #12]
 80025d4:	1c43      	adds	r3, r0, #1
 80025d6:	d106      	bne.n	80025e6 <__sflush_r+0x66>
 80025d8:	682b      	ldr	r3, [r5, #0]
 80025da:	2b1d      	cmp	r3, #29
 80025dc:	d831      	bhi.n	8002642 <__sflush_r+0xc2>
 80025de:	4a2c      	ldr	r2, [pc, #176]	; (8002690 <__sflush_r+0x110>)
 80025e0:	40da      	lsrs	r2, r3
 80025e2:	07d3      	lsls	r3, r2, #31
 80025e4:	d52d      	bpl.n	8002642 <__sflush_r+0xc2>
 80025e6:	2300      	movs	r3, #0
 80025e8:	6063      	str	r3, [r4, #4]
 80025ea:	6923      	ldr	r3, [r4, #16]
 80025ec:	6023      	str	r3, [r4, #0]
 80025ee:	04cb      	lsls	r3, r1, #19
 80025f0:	d505      	bpl.n	80025fe <__sflush_r+0x7e>
 80025f2:	1c43      	adds	r3, r0, #1
 80025f4:	d102      	bne.n	80025fc <__sflush_r+0x7c>
 80025f6:	682b      	ldr	r3, [r5, #0]
 80025f8:	2b00      	cmp	r3, #0
 80025fa:	d100      	bne.n	80025fe <__sflush_r+0x7e>
 80025fc:	6560      	str	r0, [r4, #84]	; 0x54
 80025fe:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8002600:	602e      	str	r6, [r5, #0]
 8002602:	2900      	cmp	r1, #0
 8002604:	d0c8      	beq.n	8002598 <__sflush_r+0x18>
 8002606:	0023      	movs	r3, r4
 8002608:	3344      	adds	r3, #68	; 0x44
 800260a:	4299      	cmp	r1, r3
 800260c:	d002      	beq.n	8002614 <__sflush_r+0x94>
 800260e:	0028      	movs	r0, r5
 8002610:	f000 f9b0 	bl	8002974 <_free_r>
 8002614:	2000      	movs	r0, #0
 8002616:	6360      	str	r0, [r4, #52]	; 0x34
 8002618:	e7bf      	b.n	800259a <__sflush_r+0x1a>
 800261a:	2301      	movs	r3, #1
 800261c:	6a21      	ldr	r1, [r4, #32]
 800261e:	0028      	movs	r0, r5
 8002620:	47b8      	blx	r7
 8002622:	1c43      	adds	r3, r0, #1
 8002624:	d1c5      	bne.n	80025b2 <__sflush_r+0x32>
 8002626:	682b      	ldr	r3, [r5, #0]
 8002628:	2b00      	cmp	r3, #0
 800262a:	d0c2      	beq.n	80025b2 <__sflush_r+0x32>
 800262c:	2b1d      	cmp	r3, #29
 800262e:	d001      	beq.n	8002634 <__sflush_r+0xb4>
 8002630:	2b16      	cmp	r3, #22
 8002632:	d101      	bne.n	8002638 <__sflush_r+0xb8>
 8002634:	602e      	str	r6, [r5, #0]
 8002636:	e7af      	b.n	8002598 <__sflush_r+0x18>
 8002638:	2340      	movs	r3, #64	; 0x40
 800263a:	89a2      	ldrh	r2, [r4, #12]
 800263c:	4313      	orrs	r3, r2
 800263e:	81a3      	strh	r3, [r4, #12]
 8002640:	e7ab      	b.n	800259a <__sflush_r+0x1a>
 8002642:	2340      	movs	r3, #64	; 0x40
 8002644:	430b      	orrs	r3, r1
 8002646:	2001      	movs	r0, #1
 8002648:	81a3      	strh	r3, [r4, #12]
 800264a:	4240      	negs	r0, r0
 800264c:	e7a5      	b.n	800259a <__sflush_r+0x1a>
 800264e:	690f      	ldr	r7, [r1, #16]
 8002650:	2f00      	cmp	r7, #0
 8002652:	d0a1      	beq.n	8002598 <__sflush_r+0x18>
 8002654:	680b      	ldr	r3, [r1, #0]
 8002656:	600f      	str	r7, [r1, #0]
 8002658:	1bdb      	subs	r3, r3, r7
 800265a:	9301      	str	r3, [sp, #4]
 800265c:	2300      	movs	r3, #0
 800265e:	0792      	lsls	r2, r2, #30
 8002660:	d100      	bne.n	8002664 <__sflush_r+0xe4>
 8002662:	694b      	ldr	r3, [r1, #20]
 8002664:	60a3      	str	r3, [r4, #8]
 8002666:	9b01      	ldr	r3, [sp, #4]
 8002668:	2b00      	cmp	r3, #0
 800266a:	dc00      	bgt.n	800266e <__sflush_r+0xee>
 800266c:	e794      	b.n	8002598 <__sflush_r+0x18>
 800266e:	9b01      	ldr	r3, [sp, #4]
 8002670:	003a      	movs	r2, r7
 8002672:	6a21      	ldr	r1, [r4, #32]
 8002674:	0028      	movs	r0, r5
 8002676:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8002678:	47b0      	blx	r6
 800267a:	2800      	cmp	r0, #0
 800267c:	dc03      	bgt.n	8002686 <__sflush_r+0x106>
 800267e:	2340      	movs	r3, #64	; 0x40
 8002680:	89a2      	ldrh	r2, [r4, #12]
 8002682:	4313      	orrs	r3, r2
 8002684:	e7df      	b.n	8002646 <__sflush_r+0xc6>
 8002686:	9b01      	ldr	r3, [sp, #4]
 8002688:	183f      	adds	r7, r7, r0
 800268a:	1a1b      	subs	r3, r3, r0
 800268c:	9301      	str	r3, [sp, #4]
 800268e:	e7ea      	b.n	8002666 <__sflush_r+0xe6>
 8002690:	20400001 	.word	0x20400001

08002694 <_fflush_r>:
 8002694:	690b      	ldr	r3, [r1, #16]
 8002696:	b570      	push	{r4, r5, r6, lr}
 8002698:	0005      	movs	r5, r0
 800269a:	000c      	movs	r4, r1
 800269c:	2b00      	cmp	r3, #0
 800269e:	d101      	bne.n	80026a4 <_fflush_r+0x10>
 80026a0:	2000      	movs	r0, #0
 80026a2:	bd70      	pop	{r4, r5, r6, pc}
 80026a4:	2800      	cmp	r0, #0
 80026a6:	d004      	beq.n	80026b2 <_fflush_r+0x1e>
 80026a8:	6983      	ldr	r3, [r0, #24]
 80026aa:	2b00      	cmp	r3, #0
 80026ac:	d101      	bne.n	80026b2 <_fflush_r+0x1e>
 80026ae:	f000 f85f 	bl	8002770 <__sinit>
 80026b2:	4b0b      	ldr	r3, [pc, #44]	; (80026e0 <_fflush_r+0x4c>)
 80026b4:	429c      	cmp	r4, r3
 80026b6:	d109      	bne.n	80026cc <_fflush_r+0x38>
 80026b8:	686c      	ldr	r4, [r5, #4]
 80026ba:	220c      	movs	r2, #12
 80026bc:	5ea3      	ldrsh	r3, [r4, r2]
 80026be:	2b00      	cmp	r3, #0
 80026c0:	d0ee      	beq.n	80026a0 <_fflush_r+0xc>
 80026c2:	0021      	movs	r1, r4
 80026c4:	0028      	movs	r0, r5
 80026c6:	f7ff ff5b 	bl	8002580 <__sflush_r>
 80026ca:	e7ea      	b.n	80026a2 <_fflush_r+0xe>
 80026cc:	4b05      	ldr	r3, [pc, #20]	; (80026e4 <_fflush_r+0x50>)
 80026ce:	429c      	cmp	r4, r3
 80026d0:	d101      	bne.n	80026d6 <_fflush_r+0x42>
 80026d2:	68ac      	ldr	r4, [r5, #8]
 80026d4:	e7f1      	b.n	80026ba <_fflush_r+0x26>
 80026d6:	4b04      	ldr	r3, [pc, #16]	; (80026e8 <_fflush_r+0x54>)
 80026d8:	429c      	cmp	r4, r3
 80026da:	d1ee      	bne.n	80026ba <_fflush_r+0x26>
 80026dc:	68ec      	ldr	r4, [r5, #12]
 80026de:	e7ec      	b.n	80026ba <_fflush_r+0x26>
 80026e0:	08002d28 	.word	0x08002d28
 80026e4:	08002d48 	.word	0x08002d48
 80026e8:	08002d08 	.word	0x08002d08

080026ec <_cleanup_r>:
 80026ec:	b510      	push	{r4, lr}
 80026ee:	4902      	ldr	r1, [pc, #8]	; (80026f8 <_cleanup_r+0xc>)
 80026f0:	f000 f8b2 	bl	8002858 <_fwalk_reent>
 80026f4:	bd10      	pop	{r4, pc}
 80026f6:	46c0      	nop			; (mov r8, r8)
 80026f8:	08002695 	.word	0x08002695

080026fc <std.isra.0>:
 80026fc:	2300      	movs	r3, #0
 80026fe:	b510      	push	{r4, lr}
 8002700:	0004      	movs	r4, r0
 8002702:	6003      	str	r3, [r0, #0]
 8002704:	6043      	str	r3, [r0, #4]
 8002706:	6083      	str	r3, [r0, #8]
 8002708:	8181      	strh	r1, [r0, #12]
 800270a:	6643      	str	r3, [r0, #100]	; 0x64
 800270c:	81c2      	strh	r2, [r0, #14]
 800270e:	6103      	str	r3, [r0, #16]
 8002710:	6143      	str	r3, [r0, #20]
 8002712:	6183      	str	r3, [r0, #24]
 8002714:	0019      	movs	r1, r3
 8002716:	2208      	movs	r2, #8
 8002718:	305c      	adds	r0, #92	; 0x5c
 800271a:	f7ff fdf2 	bl	8002302 <memset>
 800271e:	4b05      	ldr	r3, [pc, #20]	; (8002734 <std.isra.0+0x38>)
 8002720:	6224      	str	r4, [r4, #32]
 8002722:	6263      	str	r3, [r4, #36]	; 0x24
 8002724:	4b04      	ldr	r3, [pc, #16]	; (8002738 <std.isra.0+0x3c>)
 8002726:	62a3      	str	r3, [r4, #40]	; 0x28
 8002728:	4b04      	ldr	r3, [pc, #16]	; (800273c <std.isra.0+0x40>)
 800272a:	62e3      	str	r3, [r4, #44]	; 0x2c
 800272c:	4b04      	ldr	r3, [pc, #16]	; (8002740 <std.isra.0+0x44>)
 800272e:	6323      	str	r3, [r4, #48]	; 0x30
 8002730:	bd10      	pop	{r4, pc}
 8002732:	46c0      	nop			; (mov r8, r8)
 8002734:	08002ae9 	.word	0x08002ae9
 8002738:	08002b11 	.word	0x08002b11
 800273c:	08002b49 	.word	0x08002b49
 8002740:	08002b75 	.word	0x08002b75

08002744 <__sfmoreglue>:
 8002744:	b570      	push	{r4, r5, r6, lr}
 8002746:	2568      	movs	r5, #104	; 0x68
 8002748:	1e4a      	subs	r2, r1, #1
 800274a:	4355      	muls	r5, r2
 800274c:	000e      	movs	r6, r1
 800274e:	0029      	movs	r1, r5
 8002750:	3174      	adds	r1, #116	; 0x74
 8002752:	f000 f959 	bl	8002a08 <_malloc_r>
 8002756:	1e04      	subs	r4, r0, #0
 8002758:	d008      	beq.n	800276c <__sfmoreglue+0x28>
 800275a:	2100      	movs	r1, #0
 800275c:	002a      	movs	r2, r5
 800275e:	6001      	str	r1, [r0, #0]
 8002760:	6046      	str	r6, [r0, #4]
 8002762:	300c      	adds	r0, #12
 8002764:	60a0      	str	r0, [r4, #8]
 8002766:	3268      	adds	r2, #104	; 0x68
 8002768:	f7ff fdcb 	bl	8002302 <memset>
 800276c:	0020      	movs	r0, r4
 800276e:	bd70      	pop	{r4, r5, r6, pc}

08002770 <__sinit>:
 8002770:	6983      	ldr	r3, [r0, #24]
 8002772:	b513      	push	{r0, r1, r4, lr}
 8002774:	0004      	movs	r4, r0
 8002776:	2b00      	cmp	r3, #0
 8002778:	d128      	bne.n	80027cc <__sinit+0x5c>
 800277a:	6483      	str	r3, [r0, #72]	; 0x48
 800277c:	64c3      	str	r3, [r0, #76]	; 0x4c
 800277e:	6503      	str	r3, [r0, #80]	; 0x50
 8002780:	4b13      	ldr	r3, [pc, #76]	; (80027d0 <__sinit+0x60>)
 8002782:	4a14      	ldr	r2, [pc, #80]	; (80027d4 <__sinit+0x64>)
 8002784:	681b      	ldr	r3, [r3, #0]
 8002786:	6282      	str	r2, [r0, #40]	; 0x28
 8002788:	9301      	str	r3, [sp, #4]
 800278a:	4298      	cmp	r0, r3
 800278c:	d101      	bne.n	8002792 <__sinit+0x22>
 800278e:	2301      	movs	r3, #1
 8002790:	6183      	str	r3, [r0, #24]
 8002792:	0020      	movs	r0, r4
 8002794:	f000 f820 	bl	80027d8 <__sfp>
 8002798:	6060      	str	r0, [r4, #4]
 800279a:	0020      	movs	r0, r4
 800279c:	f000 f81c 	bl	80027d8 <__sfp>
 80027a0:	60a0      	str	r0, [r4, #8]
 80027a2:	0020      	movs	r0, r4
 80027a4:	f000 f818 	bl	80027d8 <__sfp>
 80027a8:	2200      	movs	r2, #0
 80027aa:	60e0      	str	r0, [r4, #12]
 80027ac:	2104      	movs	r1, #4
 80027ae:	6860      	ldr	r0, [r4, #4]
 80027b0:	f7ff ffa4 	bl	80026fc <std.isra.0>
 80027b4:	2201      	movs	r2, #1
 80027b6:	2109      	movs	r1, #9
 80027b8:	68a0      	ldr	r0, [r4, #8]
 80027ba:	f7ff ff9f 	bl	80026fc <std.isra.0>
 80027be:	2202      	movs	r2, #2
 80027c0:	2112      	movs	r1, #18
 80027c2:	68e0      	ldr	r0, [r4, #12]
 80027c4:	f7ff ff9a 	bl	80026fc <std.isra.0>
 80027c8:	2301      	movs	r3, #1
 80027ca:	61a3      	str	r3, [r4, #24]
 80027cc:	bd13      	pop	{r0, r1, r4, pc}
 80027ce:	46c0      	nop			; (mov r8, r8)
 80027d0:	08002d04 	.word	0x08002d04
 80027d4:	080026ed 	.word	0x080026ed

080027d8 <__sfp>:
 80027d8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80027da:	4b1e      	ldr	r3, [pc, #120]	; (8002854 <__sfp+0x7c>)
 80027dc:	0007      	movs	r7, r0
 80027de:	681e      	ldr	r6, [r3, #0]
 80027e0:	69b3      	ldr	r3, [r6, #24]
 80027e2:	2b00      	cmp	r3, #0
 80027e4:	d102      	bne.n	80027ec <__sfp+0x14>
 80027e6:	0030      	movs	r0, r6
 80027e8:	f7ff ffc2 	bl	8002770 <__sinit>
 80027ec:	3648      	adds	r6, #72	; 0x48
 80027ee:	68b4      	ldr	r4, [r6, #8]
 80027f0:	6873      	ldr	r3, [r6, #4]
 80027f2:	3b01      	subs	r3, #1
 80027f4:	d504      	bpl.n	8002800 <__sfp+0x28>
 80027f6:	6833      	ldr	r3, [r6, #0]
 80027f8:	2b00      	cmp	r3, #0
 80027fa:	d007      	beq.n	800280c <__sfp+0x34>
 80027fc:	6836      	ldr	r6, [r6, #0]
 80027fe:	e7f6      	b.n	80027ee <__sfp+0x16>
 8002800:	220c      	movs	r2, #12
 8002802:	5ea5      	ldrsh	r5, [r4, r2]
 8002804:	2d00      	cmp	r5, #0
 8002806:	d00d      	beq.n	8002824 <__sfp+0x4c>
 8002808:	3468      	adds	r4, #104	; 0x68
 800280a:	e7f2      	b.n	80027f2 <__sfp+0x1a>
 800280c:	2104      	movs	r1, #4
 800280e:	0038      	movs	r0, r7
 8002810:	f7ff ff98 	bl	8002744 <__sfmoreglue>
 8002814:	6030      	str	r0, [r6, #0]
 8002816:	2800      	cmp	r0, #0
 8002818:	d1f0      	bne.n	80027fc <__sfp+0x24>
 800281a:	230c      	movs	r3, #12
 800281c:	0004      	movs	r4, r0
 800281e:	603b      	str	r3, [r7, #0]
 8002820:	0020      	movs	r0, r4
 8002822:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8002824:	2301      	movs	r3, #1
 8002826:	0020      	movs	r0, r4
 8002828:	425b      	negs	r3, r3
 800282a:	81e3      	strh	r3, [r4, #14]
 800282c:	3302      	adds	r3, #2
 800282e:	81a3      	strh	r3, [r4, #12]
 8002830:	6665      	str	r5, [r4, #100]	; 0x64
 8002832:	6025      	str	r5, [r4, #0]
 8002834:	60a5      	str	r5, [r4, #8]
 8002836:	6065      	str	r5, [r4, #4]
 8002838:	6125      	str	r5, [r4, #16]
 800283a:	6165      	str	r5, [r4, #20]
 800283c:	61a5      	str	r5, [r4, #24]
 800283e:	2208      	movs	r2, #8
 8002840:	0029      	movs	r1, r5
 8002842:	305c      	adds	r0, #92	; 0x5c
 8002844:	f7ff fd5d 	bl	8002302 <memset>
 8002848:	6365      	str	r5, [r4, #52]	; 0x34
 800284a:	63a5      	str	r5, [r4, #56]	; 0x38
 800284c:	64a5      	str	r5, [r4, #72]	; 0x48
 800284e:	64e5      	str	r5, [r4, #76]	; 0x4c
 8002850:	e7e6      	b.n	8002820 <__sfp+0x48>
 8002852:	46c0      	nop			; (mov r8, r8)
 8002854:	08002d04 	.word	0x08002d04

08002858 <_fwalk_reent>:
 8002858:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800285a:	0004      	movs	r4, r0
 800285c:	0007      	movs	r7, r0
 800285e:	2600      	movs	r6, #0
 8002860:	9101      	str	r1, [sp, #4]
 8002862:	3448      	adds	r4, #72	; 0x48
 8002864:	2c00      	cmp	r4, #0
 8002866:	d101      	bne.n	800286c <_fwalk_reent+0x14>
 8002868:	0030      	movs	r0, r6
 800286a:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 800286c:	6863      	ldr	r3, [r4, #4]
 800286e:	68a5      	ldr	r5, [r4, #8]
 8002870:	9300      	str	r3, [sp, #0]
 8002872:	9b00      	ldr	r3, [sp, #0]
 8002874:	3b01      	subs	r3, #1
 8002876:	9300      	str	r3, [sp, #0]
 8002878:	d501      	bpl.n	800287e <_fwalk_reent+0x26>
 800287a:	6824      	ldr	r4, [r4, #0]
 800287c:	e7f2      	b.n	8002864 <_fwalk_reent+0xc>
 800287e:	89ab      	ldrh	r3, [r5, #12]
 8002880:	2b01      	cmp	r3, #1
 8002882:	d908      	bls.n	8002896 <_fwalk_reent+0x3e>
 8002884:	220e      	movs	r2, #14
 8002886:	5eab      	ldrsh	r3, [r5, r2]
 8002888:	3301      	adds	r3, #1
 800288a:	d004      	beq.n	8002896 <_fwalk_reent+0x3e>
 800288c:	0029      	movs	r1, r5
 800288e:	0038      	movs	r0, r7
 8002890:	9b01      	ldr	r3, [sp, #4]
 8002892:	4798      	blx	r3
 8002894:	4306      	orrs	r6, r0
 8002896:	3568      	adds	r5, #104	; 0x68
 8002898:	e7eb      	b.n	8002872 <_fwalk_reent+0x1a>
	...

0800289c <__swhatbuf_r>:
 800289c:	b570      	push	{r4, r5, r6, lr}
 800289e:	000e      	movs	r6, r1
 80028a0:	001d      	movs	r5, r3
 80028a2:	230e      	movs	r3, #14
 80028a4:	5ec9      	ldrsh	r1, [r1, r3]
 80028a6:	b090      	sub	sp, #64	; 0x40
 80028a8:	0014      	movs	r4, r2
 80028aa:	2900      	cmp	r1, #0
 80028ac:	da07      	bge.n	80028be <__swhatbuf_r+0x22>
 80028ae:	2300      	movs	r3, #0
 80028b0:	602b      	str	r3, [r5, #0]
 80028b2:	89b3      	ldrh	r3, [r6, #12]
 80028b4:	061b      	lsls	r3, r3, #24
 80028b6:	d411      	bmi.n	80028dc <__swhatbuf_r+0x40>
 80028b8:	2380      	movs	r3, #128	; 0x80
 80028ba:	00db      	lsls	r3, r3, #3
 80028bc:	e00f      	b.n	80028de <__swhatbuf_r+0x42>
 80028be:	aa01      	add	r2, sp, #4
 80028c0:	f000 f984 	bl	8002bcc <_fstat_r>
 80028c4:	2800      	cmp	r0, #0
 80028c6:	dbf2      	blt.n	80028ae <__swhatbuf_r+0x12>
 80028c8:	22f0      	movs	r2, #240	; 0xf0
 80028ca:	9b02      	ldr	r3, [sp, #8]
 80028cc:	0212      	lsls	r2, r2, #8
 80028ce:	4013      	ands	r3, r2
 80028d0:	4a05      	ldr	r2, [pc, #20]	; (80028e8 <__swhatbuf_r+0x4c>)
 80028d2:	189b      	adds	r3, r3, r2
 80028d4:	425a      	negs	r2, r3
 80028d6:	4153      	adcs	r3, r2
 80028d8:	602b      	str	r3, [r5, #0]
 80028da:	e7ed      	b.n	80028b8 <__swhatbuf_r+0x1c>
 80028dc:	2340      	movs	r3, #64	; 0x40
 80028de:	2000      	movs	r0, #0
 80028e0:	6023      	str	r3, [r4, #0]
 80028e2:	b010      	add	sp, #64	; 0x40
 80028e4:	bd70      	pop	{r4, r5, r6, pc}
 80028e6:	46c0      	nop			; (mov r8, r8)
 80028e8:	ffffe000 	.word	0xffffe000

080028ec <__smakebuf_r>:
 80028ec:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80028ee:	2602      	movs	r6, #2
 80028f0:	898b      	ldrh	r3, [r1, #12]
 80028f2:	0005      	movs	r5, r0
 80028f4:	000c      	movs	r4, r1
 80028f6:	4233      	tst	r3, r6
 80028f8:	d006      	beq.n	8002908 <__smakebuf_r+0x1c>
 80028fa:	0023      	movs	r3, r4
 80028fc:	3347      	adds	r3, #71	; 0x47
 80028fe:	6023      	str	r3, [r4, #0]
 8002900:	6123      	str	r3, [r4, #16]
 8002902:	2301      	movs	r3, #1
 8002904:	6163      	str	r3, [r4, #20]
 8002906:	bdf7      	pop	{r0, r1, r2, r4, r5, r6, r7, pc}
 8002908:	ab01      	add	r3, sp, #4
 800290a:	466a      	mov	r2, sp
 800290c:	f7ff ffc6 	bl	800289c <__swhatbuf_r>
 8002910:	9900      	ldr	r1, [sp, #0]
 8002912:	0007      	movs	r7, r0
 8002914:	0028      	movs	r0, r5
 8002916:	f000 f877 	bl	8002a08 <_malloc_r>
 800291a:	2800      	cmp	r0, #0
 800291c:	d108      	bne.n	8002930 <__smakebuf_r+0x44>
 800291e:	220c      	movs	r2, #12
 8002920:	5ea3      	ldrsh	r3, [r4, r2]
 8002922:	059a      	lsls	r2, r3, #22
 8002924:	d4ef      	bmi.n	8002906 <__smakebuf_r+0x1a>
 8002926:	2203      	movs	r2, #3
 8002928:	4393      	bics	r3, r2
 800292a:	431e      	orrs	r6, r3
 800292c:	81a6      	strh	r6, [r4, #12]
 800292e:	e7e4      	b.n	80028fa <__smakebuf_r+0xe>
 8002930:	4b0f      	ldr	r3, [pc, #60]	; (8002970 <__smakebuf_r+0x84>)
 8002932:	62ab      	str	r3, [r5, #40]	; 0x28
 8002934:	2380      	movs	r3, #128	; 0x80
 8002936:	89a2      	ldrh	r2, [r4, #12]
 8002938:	6020      	str	r0, [r4, #0]
 800293a:	4313      	orrs	r3, r2
 800293c:	81a3      	strh	r3, [r4, #12]
 800293e:	9b00      	ldr	r3, [sp, #0]
 8002940:	6120      	str	r0, [r4, #16]
 8002942:	6163      	str	r3, [r4, #20]
 8002944:	9b01      	ldr	r3, [sp, #4]
 8002946:	2b00      	cmp	r3, #0
 8002948:	d00d      	beq.n	8002966 <__smakebuf_r+0x7a>
 800294a:	230e      	movs	r3, #14
 800294c:	5ee1      	ldrsh	r1, [r4, r3]
 800294e:	0028      	movs	r0, r5
 8002950:	f000 f94e 	bl	8002bf0 <_isatty_r>
 8002954:	2800      	cmp	r0, #0
 8002956:	d006      	beq.n	8002966 <__smakebuf_r+0x7a>
 8002958:	2203      	movs	r2, #3
 800295a:	89a3      	ldrh	r3, [r4, #12]
 800295c:	4393      	bics	r3, r2
 800295e:	001a      	movs	r2, r3
 8002960:	2301      	movs	r3, #1
 8002962:	4313      	orrs	r3, r2
 8002964:	81a3      	strh	r3, [r4, #12]
 8002966:	89a0      	ldrh	r0, [r4, #12]
 8002968:	4338      	orrs	r0, r7
 800296a:	81a0      	strh	r0, [r4, #12]
 800296c:	e7cb      	b.n	8002906 <__smakebuf_r+0x1a>
 800296e:	46c0      	nop			; (mov r8, r8)
 8002970:	080026ed 	.word	0x080026ed

08002974 <_free_r>:
 8002974:	b570      	push	{r4, r5, r6, lr}
 8002976:	0005      	movs	r5, r0
 8002978:	2900      	cmp	r1, #0
 800297a:	d010      	beq.n	800299e <_free_r+0x2a>
 800297c:	1f0c      	subs	r4, r1, #4
 800297e:	6823      	ldr	r3, [r4, #0]
 8002980:	2b00      	cmp	r3, #0
 8002982:	da00      	bge.n	8002986 <_free_r+0x12>
 8002984:	18e4      	adds	r4, r4, r3
 8002986:	0028      	movs	r0, r5
 8002988:	f000 f958 	bl	8002c3c <__malloc_lock>
 800298c:	4a1d      	ldr	r2, [pc, #116]	; (8002a04 <_free_r+0x90>)
 800298e:	6813      	ldr	r3, [r2, #0]
 8002990:	2b00      	cmp	r3, #0
 8002992:	d105      	bne.n	80029a0 <_free_r+0x2c>
 8002994:	6063      	str	r3, [r4, #4]
 8002996:	6014      	str	r4, [r2, #0]
 8002998:	0028      	movs	r0, r5
 800299a:	f000 f950 	bl	8002c3e <__malloc_unlock>
 800299e:	bd70      	pop	{r4, r5, r6, pc}
 80029a0:	42a3      	cmp	r3, r4
 80029a2:	d909      	bls.n	80029b8 <_free_r+0x44>
 80029a4:	6821      	ldr	r1, [r4, #0]
 80029a6:	1860      	adds	r0, r4, r1
 80029a8:	4283      	cmp	r3, r0
 80029aa:	d1f3      	bne.n	8002994 <_free_r+0x20>
 80029ac:	6818      	ldr	r0, [r3, #0]
 80029ae:	685b      	ldr	r3, [r3, #4]
 80029b0:	1841      	adds	r1, r0, r1
 80029b2:	6021      	str	r1, [r4, #0]
 80029b4:	e7ee      	b.n	8002994 <_free_r+0x20>
 80029b6:	0013      	movs	r3, r2
 80029b8:	685a      	ldr	r2, [r3, #4]
 80029ba:	2a00      	cmp	r2, #0
 80029bc:	d001      	beq.n	80029c2 <_free_r+0x4e>
 80029be:	42a2      	cmp	r2, r4
 80029c0:	d9f9      	bls.n	80029b6 <_free_r+0x42>
 80029c2:	6819      	ldr	r1, [r3, #0]
 80029c4:	1858      	adds	r0, r3, r1
 80029c6:	42a0      	cmp	r0, r4
 80029c8:	d10b      	bne.n	80029e2 <_free_r+0x6e>
 80029ca:	6820      	ldr	r0, [r4, #0]
 80029cc:	1809      	adds	r1, r1, r0
 80029ce:	1858      	adds	r0, r3, r1
 80029d0:	6019      	str	r1, [r3, #0]
 80029d2:	4282      	cmp	r2, r0
 80029d4:	d1e0      	bne.n	8002998 <_free_r+0x24>
 80029d6:	6810      	ldr	r0, [r2, #0]
 80029d8:	6852      	ldr	r2, [r2, #4]
 80029da:	1841      	adds	r1, r0, r1
 80029dc:	6019      	str	r1, [r3, #0]
 80029de:	605a      	str	r2, [r3, #4]
 80029e0:	e7da      	b.n	8002998 <_free_r+0x24>
 80029e2:	42a0      	cmp	r0, r4
 80029e4:	d902      	bls.n	80029ec <_free_r+0x78>
 80029e6:	230c      	movs	r3, #12
 80029e8:	602b      	str	r3, [r5, #0]
 80029ea:	e7d5      	b.n	8002998 <_free_r+0x24>
 80029ec:	6821      	ldr	r1, [r4, #0]
 80029ee:	1860      	adds	r0, r4, r1
 80029f0:	4282      	cmp	r2, r0
 80029f2:	d103      	bne.n	80029fc <_free_r+0x88>
 80029f4:	6810      	ldr	r0, [r2, #0]
 80029f6:	6852      	ldr	r2, [r2, #4]
 80029f8:	1841      	adds	r1, r0, r1
 80029fa:	6021      	str	r1, [r4, #0]
 80029fc:	6062      	str	r2, [r4, #4]
 80029fe:	605c      	str	r4, [r3, #4]
 8002a00:	e7ca      	b.n	8002998 <_free_r+0x24>
 8002a02:	46c0      	nop			; (mov r8, r8)
 8002a04:	200000b0 	.word	0x200000b0

08002a08 <_malloc_r>:
 8002a08:	2303      	movs	r3, #3
 8002a0a:	b570      	push	{r4, r5, r6, lr}
 8002a0c:	1ccd      	adds	r5, r1, #3
 8002a0e:	439d      	bics	r5, r3
 8002a10:	3508      	adds	r5, #8
 8002a12:	0006      	movs	r6, r0
 8002a14:	2d0c      	cmp	r5, #12
 8002a16:	d21e      	bcs.n	8002a56 <_malloc_r+0x4e>
 8002a18:	250c      	movs	r5, #12
 8002a1a:	42a9      	cmp	r1, r5
 8002a1c:	d81d      	bhi.n	8002a5a <_malloc_r+0x52>
 8002a1e:	0030      	movs	r0, r6
 8002a20:	f000 f90c 	bl	8002c3c <__malloc_lock>
 8002a24:	4a25      	ldr	r2, [pc, #148]	; (8002abc <_malloc_r+0xb4>)
 8002a26:	6814      	ldr	r4, [r2, #0]
 8002a28:	0021      	movs	r1, r4
 8002a2a:	2900      	cmp	r1, #0
 8002a2c:	d119      	bne.n	8002a62 <_malloc_r+0x5a>
 8002a2e:	4c24      	ldr	r4, [pc, #144]	; (8002ac0 <_malloc_r+0xb8>)
 8002a30:	6823      	ldr	r3, [r4, #0]
 8002a32:	2b00      	cmp	r3, #0
 8002a34:	d103      	bne.n	8002a3e <_malloc_r+0x36>
 8002a36:	0030      	movs	r0, r6
 8002a38:	f000 f844 	bl	8002ac4 <_sbrk_r>
 8002a3c:	6020      	str	r0, [r4, #0]
 8002a3e:	0029      	movs	r1, r5
 8002a40:	0030      	movs	r0, r6
 8002a42:	f000 f83f 	bl	8002ac4 <_sbrk_r>
 8002a46:	1c43      	adds	r3, r0, #1
 8002a48:	d12c      	bne.n	8002aa4 <_malloc_r+0x9c>
 8002a4a:	230c      	movs	r3, #12
 8002a4c:	0030      	movs	r0, r6
 8002a4e:	6033      	str	r3, [r6, #0]
 8002a50:	f000 f8f5 	bl	8002c3e <__malloc_unlock>
 8002a54:	e003      	b.n	8002a5e <_malloc_r+0x56>
 8002a56:	2d00      	cmp	r5, #0
 8002a58:	dadf      	bge.n	8002a1a <_malloc_r+0x12>
 8002a5a:	230c      	movs	r3, #12
 8002a5c:	6033      	str	r3, [r6, #0]
 8002a5e:	2000      	movs	r0, #0
 8002a60:	bd70      	pop	{r4, r5, r6, pc}
 8002a62:	680b      	ldr	r3, [r1, #0]
 8002a64:	1b5b      	subs	r3, r3, r5
 8002a66:	d41a      	bmi.n	8002a9e <_malloc_r+0x96>
 8002a68:	2b0b      	cmp	r3, #11
 8002a6a:	d903      	bls.n	8002a74 <_malloc_r+0x6c>
 8002a6c:	600b      	str	r3, [r1, #0]
 8002a6e:	18cc      	adds	r4, r1, r3
 8002a70:	6025      	str	r5, [r4, #0]
 8002a72:	e003      	b.n	8002a7c <_malloc_r+0x74>
 8002a74:	428c      	cmp	r4, r1
 8002a76:	d10e      	bne.n	8002a96 <_malloc_r+0x8e>
 8002a78:	6863      	ldr	r3, [r4, #4]
 8002a7a:	6013      	str	r3, [r2, #0]
 8002a7c:	0030      	movs	r0, r6
 8002a7e:	f000 f8de 	bl	8002c3e <__malloc_unlock>
 8002a82:	0020      	movs	r0, r4
 8002a84:	2207      	movs	r2, #7
 8002a86:	300b      	adds	r0, #11
 8002a88:	1d23      	adds	r3, r4, #4
 8002a8a:	4390      	bics	r0, r2
 8002a8c:	1ac3      	subs	r3, r0, r3
 8002a8e:	d0e7      	beq.n	8002a60 <_malloc_r+0x58>
 8002a90:	425a      	negs	r2, r3
 8002a92:	50e2      	str	r2, [r4, r3]
 8002a94:	e7e4      	b.n	8002a60 <_malloc_r+0x58>
 8002a96:	684b      	ldr	r3, [r1, #4]
 8002a98:	6063      	str	r3, [r4, #4]
 8002a9a:	000c      	movs	r4, r1
 8002a9c:	e7ee      	b.n	8002a7c <_malloc_r+0x74>
 8002a9e:	000c      	movs	r4, r1
 8002aa0:	6849      	ldr	r1, [r1, #4]
 8002aa2:	e7c2      	b.n	8002a2a <_malloc_r+0x22>
 8002aa4:	2303      	movs	r3, #3
 8002aa6:	1cc4      	adds	r4, r0, #3
 8002aa8:	439c      	bics	r4, r3
 8002aaa:	42a0      	cmp	r0, r4
 8002aac:	d0e0      	beq.n	8002a70 <_malloc_r+0x68>
 8002aae:	1a21      	subs	r1, r4, r0
 8002ab0:	0030      	movs	r0, r6
 8002ab2:	f000 f807 	bl	8002ac4 <_sbrk_r>
 8002ab6:	1c43      	adds	r3, r0, #1
 8002ab8:	d1da      	bne.n	8002a70 <_malloc_r+0x68>
 8002aba:	e7c6      	b.n	8002a4a <_malloc_r+0x42>
 8002abc:	200000b0 	.word	0x200000b0
 8002ac0:	200000b4 	.word	0x200000b4

08002ac4 <_sbrk_r>:
 8002ac4:	2300      	movs	r3, #0
 8002ac6:	b570      	push	{r4, r5, r6, lr}
 8002ac8:	4c06      	ldr	r4, [pc, #24]	; (8002ae4 <_sbrk_r+0x20>)
 8002aca:	0005      	movs	r5, r0
 8002acc:	0008      	movs	r0, r1
 8002ace:	6023      	str	r3, [r4, #0]
 8002ad0:	f7ff fb64 	bl	800219c <_sbrk>
 8002ad4:	1c43      	adds	r3, r0, #1
 8002ad6:	d103      	bne.n	8002ae0 <_sbrk_r+0x1c>
 8002ad8:	6823      	ldr	r3, [r4, #0]
 8002ada:	2b00      	cmp	r3, #0
 8002adc:	d000      	beq.n	8002ae0 <_sbrk_r+0x1c>
 8002ade:	602b      	str	r3, [r5, #0]
 8002ae0:	bd70      	pop	{r4, r5, r6, pc}
 8002ae2:	46c0      	nop			; (mov r8, r8)
 8002ae4:	200001dc 	.word	0x200001dc

08002ae8 <__sread>:
 8002ae8:	b570      	push	{r4, r5, r6, lr}
 8002aea:	000c      	movs	r4, r1
 8002aec:	250e      	movs	r5, #14
 8002aee:	5f49      	ldrsh	r1, [r1, r5]
 8002af0:	f000 f8a6 	bl	8002c40 <_read_r>
 8002af4:	2800      	cmp	r0, #0
 8002af6:	db03      	blt.n	8002b00 <__sread+0x18>
 8002af8:	6d63      	ldr	r3, [r4, #84]	; 0x54
 8002afa:	181b      	adds	r3, r3, r0
 8002afc:	6563      	str	r3, [r4, #84]	; 0x54
 8002afe:	bd70      	pop	{r4, r5, r6, pc}
 8002b00:	89a3      	ldrh	r3, [r4, #12]
 8002b02:	4a02      	ldr	r2, [pc, #8]	; (8002b0c <__sread+0x24>)
 8002b04:	4013      	ands	r3, r2
 8002b06:	81a3      	strh	r3, [r4, #12]
 8002b08:	e7f9      	b.n	8002afe <__sread+0x16>
 8002b0a:	46c0      	nop			; (mov r8, r8)
 8002b0c:	ffffefff 	.word	0xffffefff

08002b10 <__swrite>:
 8002b10:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002b12:	001f      	movs	r7, r3
 8002b14:	898b      	ldrh	r3, [r1, #12]
 8002b16:	0005      	movs	r5, r0
 8002b18:	000c      	movs	r4, r1
 8002b1a:	0016      	movs	r6, r2
 8002b1c:	05db      	lsls	r3, r3, #23
 8002b1e:	d505      	bpl.n	8002b2c <__swrite+0x1c>
 8002b20:	230e      	movs	r3, #14
 8002b22:	5ec9      	ldrsh	r1, [r1, r3]
 8002b24:	2200      	movs	r2, #0
 8002b26:	2302      	movs	r3, #2
 8002b28:	f000 f874 	bl	8002c14 <_lseek_r>
 8002b2c:	89a3      	ldrh	r3, [r4, #12]
 8002b2e:	4a05      	ldr	r2, [pc, #20]	; (8002b44 <__swrite+0x34>)
 8002b30:	0028      	movs	r0, r5
 8002b32:	4013      	ands	r3, r2
 8002b34:	81a3      	strh	r3, [r4, #12]
 8002b36:	0032      	movs	r2, r6
 8002b38:	230e      	movs	r3, #14
 8002b3a:	5ee1      	ldrsh	r1, [r4, r3]
 8002b3c:	003b      	movs	r3, r7
 8002b3e:	f000 f81f 	bl	8002b80 <_write_r>
 8002b42:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8002b44:	ffffefff 	.word	0xffffefff

08002b48 <__sseek>:
 8002b48:	b570      	push	{r4, r5, r6, lr}
 8002b4a:	000c      	movs	r4, r1
 8002b4c:	250e      	movs	r5, #14
 8002b4e:	5f49      	ldrsh	r1, [r1, r5]
 8002b50:	f000 f860 	bl	8002c14 <_lseek_r>
 8002b54:	89a3      	ldrh	r3, [r4, #12]
 8002b56:	1c42      	adds	r2, r0, #1
 8002b58:	d103      	bne.n	8002b62 <__sseek+0x1a>
 8002b5a:	4a05      	ldr	r2, [pc, #20]	; (8002b70 <__sseek+0x28>)
 8002b5c:	4013      	ands	r3, r2
 8002b5e:	81a3      	strh	r3, [r4, #12]
 8002b60:	bd70      	pop	{r4, r5, r6, pc}
 8002b62:	2280      	movs	r2, #128	; 0x80
 8002b64:	0152      	lsls	r2, r2, #5
 8002b66:	4313      	orrs	r3, r2
 8002b68:	81a3      	strh	r3, [r4, #12]
 8002b6a:	6560      	str	r0, [r4, #84]	; 0x54
 8002b6c:	e7f8      	b.n	8002b60 <__sseek+0x18>
 8002b6e:	46c0      	nop			; (mov r8, r8)
 8002b70:	ffffefff 	.word	0xffffefff

08002b74 <__sclose>:
 8002b74:	b510      	push	{r4, lr}
 8002b76:	230e      	movs	r3, #14
 8002b78:	5ec9      	ldrsh	r1, [r1, r3]
 8002b7a:	f000 f815 	bl	8002ba8 <_close_r>
 8002b7e:	bd10      	pop	{r4, pc}

08002b80 <_write_r>:
 8002b80:	b570      	push	{r4, r5, r6, lr}
 8002b82:	0005      	movs	r5, r0
 8002b84:	0008      	movs	r0, r1
 8002b86:	0011      	movs	r1, r2
 8002b88:	2200      	movs	r2, #0
 8002b8a:	4c06      	ldr	r4, [pc, #24]	; (8002ba4 <_write_r+0x24>)
 8002b8c:	6022      	str	r2, [r4, #0]
 8002b8e:	001a      	movs	r2, r3
 8002b90:	f7ff faf6 	bl	8002180 <_write>
 8002b94:	1c43      	adds	r3, r0, #1
 8002b96:	d103      	bne.n	8002ba0 <_write_r+0x20>
 8002b98:	6823      	ldr	r3, [r4, #0]
 8002b9a:	2b00      	cmp	r3, #0
 8002b9c:	d000      	beq.n	8002ba0 <_write_r+0x20>
 8002b9e:	602b      	str	r3, [r5, #0]
 8002ba0:	bd70      	pop	{r4, r5, r6, pc}
 8002ba2:	46c0      	nop			; (mov r8, r8)
 8002ba4:	200001dc 	.word	0x200001dc

08002ba8 <_close_r>:
 8002ba8:	2300      	movs	r3, #0
 8002baa:	b570      	push	{r4, r5, r6, lr}
 8002bac:	4c06      	ldr	r4, [pc, #24]	; (8002bc8 <_close_r+0x20>)
 8002bae:	0005      	movs	r5, r0
 8002bb0:	0008      	movs	r0, r1
 8002bb2:	6023      	str	r3, [r4, #0]
 8002bb4:	f7ff fb0c 	bl	80021d0 <_close>
 8002bb8:	1c43      	adds	r3, r0, #1
 8002bba:	d103      	bne.n	8002bc4 <_close_r+0x1c>
 8002bbc:	6823      	ldr	r3, [r4, #0]
 8002bbe:	2b00      	cmp	r3, #0
 8002bc0:	d000      	beq.n	8002bc4 <_close_r+0x1c>
 8002bc2:	602b      	str	r3, [r5, #0]
 8002bc4:	bd70      	pop	{r4, r5, r6, pc}
 8002bc6:	46c0      	nop			; (mov r8, r8)
 8002bc8:	200001dc 	.word	0x200001dc

08002bcc <_fstat_r>:
 8002bcc:	2300      	movs	r3, #0
 8002bce:	b570      	push	{r4, r5, r6, lr}
 8002bd0:	4c06      	ldr	r4, [pc, #24]	; (8002bec <_fstat_r+0x20>)
 8002bd2:	0005      	movs	r5, r0
 8002bd4:	0008      	movs	r0, r1
 8002bd6:	0011      	movs	r1, r2
 8002bd8:	6023      	str	r3, [r4, #0]
 8002bda:	f7ff fafc 	bl	80021d6 <_fstat>
 8002bde:	1c43      	adds	r3, r0, #1
 8002be0:	d103      	bne.n	8002bea <_fstat_r+0x1e>
 8002be2:	6823      	ldr	r3, [r4, #0]
 8002be4:	2b00      	cmp	r3, #0
 8002be6:	d000      	beq.n	8002bea <_fstat_r+0x1e>
 8002be8:	602b      	str	r3, [r5, #0]
 8002bea:	bd70      	pop	{r4, r5, r6, pc}
 8002bec:	200001dc 	.word	0x200001dc

08002bf0 <_isatty_r>:
 8002bf0:	2300      	movs	r3, #0
 8002bf2:	b570      	push	{r4, r5, r6, lr}
 8002bf4:	4c06      	ldr	r4, [pc, #24]	; (8002c10 <_isatty_r+0x20>)
 8002bf6:	0005      	movs	r5, r0
 8002bf8:	0008      	movs	r0, r1
 8002bfa:	6023      	str	r3, [r4, #0]
 8002bfc:	f7ff faf0 	bl	80021e0 <_isatty>
 8002c00:	1c43      	adds	r3, r0, #1
 8002c02:	d103      	bne.n	8002c0c <_isatty_r+0x1c>
 8002c04:	6823      	ldr	r3, [r4, #0]
 8002c06:	2b00      	cmp	r3, #0
 8002c08:	d000      	beq.n	8002c0c <_isatty_r+0x1c>
 8002c0a:	602b      	str	r3, [r5, #0]
 8002c0c:	bd70      	pop	{r4, r5, r6, pc}
 8002c0e:	46c0      	nop			; (mov r8, r8)
 8002c10:	200001dc 	.word	0x200001dc

08002c14 <_lseek_r>:
 8002c14:	b570      	push	{r4, r5, r6, lr}
 8002c16:	0005      	movs	r5, r0
 8002c18:	0008      	movs	r0, r1
 8002c1a:	0011      	movs	r1, r2
 8002c1c:	2200      	movs	r2, #0
 8002c1e:	4c06      	ldr	r4, [pc, #24]	; (8002c38 <_lseek_r+0x24>)
 8002c20:	6022      	str	r2, [r4, #0]
 8002c22:	001a      	movs	r2, r3
 8002c24:	f7ff fade 	bl	80021e4 <_lseek>
 8002c28:	1c43      	adds	r3, r0, #1
 8002c2a:	d103      	bne.n	8002c34 <_lseek_r+0x20>
 8002c2c:	6823      	ldr	r3, [r4, #0]
 8002c2e:	2b00      	cmp	r3, #0
 8002c30:	d000      	beq.n	8002c34 <_lseek_r+0x20>
 8002c32:	602b      	str	r3, [r5, #0]
 8002c34:	bd70      	pop	{r4, r5, r6, pc}
 8002c36:	46c0      	nop			; (mov r8, r8)
 8002c38:	200001dc 	.word	0x200001dc

08002c3c <__malloc_lock>:
 8002c3c:	4770      	bx	lr

08002c3e <__malloc_unlock>:
 8002c3e:	4770      	bx	lr

08002c40 <_read_r>:
 8002c40:	b570      	push	{r4, r5, r6, lr}
 8002c42:	0005      	movs	r5, r0
 8002c44:	0008      	movs	r0, r1
 8002c46:	0011      	movs	r1, r2
 8002c48:	2200      	movs	r2, #0
 8002c4a:	4c06      	ldr	r4, [pc, #24]	; (8002c64 <_read_r+0x24>)
 8002c4c:	6022      	str	r2, [r4, #0]
 8002c4e:	001a      	movs	r2, r3
 8002c50:	f7ff fa88 	bl	8002164 <_read>
 8002c54:	1c43      	adds	r3, r0, #1
 8002c56:	d103      	bne.n	8002c60 <_read_r+0x20>
 8002c58:	6823      	ldr	r3, [r4, #0]
 8002c5a:	2b00      	cmp	r3, #0
 8002c5c:	d000      	beq.n	8002c60 <_read_r+0x20>
 8002c5e:	602b      	str	r3, [r5, #0]
 8002c60:	bd70      	pop	{r4, r5, r6, pc}
 8002c62:	46c0      	nop			; (mov r8, r8)
 8002c64:	200001dc 	.word	0x200001dc

08002c68 <_init>:
 8002c68:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002c6a:	46c0      	nop			; (mov r8, r8)
 8002c6c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002c6e:	bc08      	pop	{r3}
 8002c70:	469e      	mov	lr, r3
 8002c72:	4770      	bx	lr

08002c74 <_fini>:
 8002c74:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002c76:	46c0      	nop			; (mov r8, r8)
 8002c78:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002c7a:	bc08      	pop	{r3}
 8002c7c:	469e      	mov	lr, r3
 8002c7e:	4770      	bx	lr
